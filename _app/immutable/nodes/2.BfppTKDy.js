var Jt=Object.defineProperty;var Lr=e=>{throw TypeError(e)};var Qt=(e,r,t)=>r in e?Jt(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var I=(e,r,t)=>Qt(e,typeof r!="symbol"?r+"":r,t),Ir=(e,r,t)=>r.has(e)||Lr("Cannot "+t);var J=(e,r,t)=>(Ir(e,r,"read from private field"),t?t.call(e):r.get(e)),Ee=(e,r,t)=>r.has(e)?Lr("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(e):r.set(e,t),qr=(e,r,t,o)=>(Ir(e,r,"write to private field"),o?o.call(e,t):r.set(e,t),t);import{a as N,t as oe,c as Ue,d as He}from"../chunks/disclose-version.D5EZIDiT.js";import{u as ot,t as tr,o as Yt,h as M,a as nt,as as it,at as Xt,au as Zt,b as at,p as ct,e as ar,f as pe,U as es,a7 as rs,s as We,an as lt,H as ts,r as jr,c as Ve,av as De,d as ut,n as xr,aw as $r,ax as ss,ab as os,ay as ns,T as is,a8 as as,ak as cs,ad as ls,O as us,i as Nr,az as cr,aA as lr,aB as ps,ai as ds,aC as pt,y as gs,aD as hs,aE as ms,aF as _s,aG as fs,x as Es,w as Ts,v as dt,V as Oe,$ as ur,X as Re,m as h,k as H,Y as se,W as me,Z as Q,ar as V,a6 as D,a5 as Y,K as X}from"../chunks/runtime.Bl0zbOc9.js";import{d as vs,l as gt,e as qe,r as bs,f as pr,a as Fe}from"../chunks/store.ye7fQEO7.js";import{i as ws,b as ht,a as ie,p as de}from"../chunks/props.BdJklv41.js";import{i as ve}from"../chunks/if.BoCWKpRA.js";const ys=[];function mt(e,r=!1){return Le(e,new Map,"",ys)}function Le(e,r,t,o,s=null){if(typeof e=="object"&&e!==null){const a=r.get(e);if(a!==void 0)return a;if(e instanceof Map)return new Map(e);if(e instanceof Set)return new Set(e);if(ot(e)){const l=[];r.set(e,l),s!==null&&r.set(s,l);for(let d=0;d<e.length;d+=1)l.push(Le(e[d],r,t,o));return l}if(tr(e)===Yt){const l={};r.set(e,l),s!==null&&r.set(s,l);for(var i in e)l[i]=Le(e[i],r,t,o);return l}if(e instanceof Date)return structuredClone(e);if(typeof e.toJSON=="function")return Le(e.toJSON(),r,t,o,e)}if(e instanceof EventTarget)return e;try{return structuredClone(e)}catch{return e}}function ks(e,r,t){M&&nt();var o=e,s=es,i,a=it()?Xt:Zt;at(()=>{a(s,s=r())&&(i&&ct(i),i=ar(()=>t(o)))}),M&&(o=pe)}function Ps(e,r){return r}function Gs(e,r,t,o){for(var s=[],i=r.length,a=0;a<i;a++)ss(r[a].e,s,!0);var l=i>0&&s.length===0&&t!==null;if(l){var d=t.parentNode;os(d),d.append(t),o.clear(),te(e,r[0].prev,r[i-1].next)}ns(s,()=>{for(var f=0;f<i;f++){var E=r[f];l||(o.delete(E.k),te(e,E.prev,E.next)),is(E.e,!l)}})}function _t(e,r,t,o,s,i=null){var a=e,l={flags:r,items:new Map,first:null},d=(r&pt)!==0;if(d){var f=e;a=M?We(as(f)):f.appendChild(rs())}M&&nt();var E=null,y=!1;at(()=>{var T=t(),_=ot(T)?T:T==null?[]:lt(T),k=_.length;if(y&&k===0)return;y=k===0;let O=!1;if(M){var w=a.data===ts;w!==(k===0)&&(a=jr(),We(a),Ve(!1),O=!0)}if(M){for(var P=null,A,S=0;S<k;S++){if(pe.nodeType===8&&pe.data===cs){a=pe,O=!0,Ve(!1);break}var G=_[S],R=o(G,S);A=ft(pe,l,P,null,G,R,S,s,r),l.items.set(R,A),P=A}k>0&&We(jr())}if(!M){var U=ls;Os(_,l,a,s,r,(U.f&De)!==0,o)}i!==null&&(k===0?E?ut(E):E=ar(()=>i(a)):E!==null&&ct(E,()=>{E=null})),O&&Ve(!0),t()}),M&&(a=pe)}function Os(e,r,t,o,s,i,a){var W,re,ce,_e;var l=(s&hs)!==0,d=(s&(lr|cr))!==0,f=e.length,E=r.items,y=r.first,T=y,_,k=null,O,w=[],P=[],A,S,G,R;if(l)for(R=0;R<f;R+=1)A=e[R],S=a(A,R),G=E.get(S),G!==void 0&&((W=G.a)==null||W.measure(),(O??(O=new Set)).add(G));for(R=0;R<f;R+=1){if(A=e[R],S=a(A,R),G=E.get(S),G===void 0){var U=T?T.e.nodes_start:t;k=ft(U,r,k,k===null?r.first:k.next,A,S,R,o,s),E.set(S,k),w=[],P=[],T=k.next;continue}if(d&&Rs(G,A,R,s),G.e.f&De&&(ut(G.e),l&&((re=G.a)==null||re.unfix(),(O??(O=new Set)).delete(G))),G!==T){if(_!==void 0&&_.has(G)){if(w.length<P.length){var q=P[0],L;k=q.prev;var z=w[0],F=w[w.length-1];for(L=0;L<w.length;L+=1)Br(w[L],q,t);for(L=0;L<P.length;L+=1)_.delete(P[L]);te(r,z.prev,F.next),te(r,k,z),te(r,F,q),T=q,k=F,R-=1,w=[],P=[]}else _.delete(G),Br(G,T,t),te(r,G.prev,G.next),te(r,G,k===null?r.first:k.next),te(r,k,G),k=G;continue}for(w=[],P=[];T!==null&&T.k!==S;)(i||!(T.e.f&De))&&(_??(_=new Set)).add(T),P.push(T),T=T.next;if(T===null)continue;G=T}w.push(G),k=G,T=G.next}if(T!==null||_!==void 0){for(var j=_===void 0?[]:lt(_);T!==null;)(i||!(T.e.f&De))&&j.push(T),T=T.next;var Z=j.length;if(Z>0){var ee=s&pt&&f===0?t:null;if(l){for(R=0;R<Z;R+=1)(ce=j[R].a)==null||ce.measure();for(R=0;R<Z;R+=1)(_e=j[R].a)==null||_e.fix()}Gs(r,j,ee,E)}}l&&gs(()=>{var Ae;if(O!==void 0)for(G of O)(Ae=G.a)==null||Ae.apply()}),xr.first=r.first&&r.first.e,xr.last=k&&k.e}function Rs(e,r,t,o){o&lr&&$r(e.v,r),o&cr?$r(e.i,t):e.i=t}function ft(e,r,t,o,s,i,a,l,d){var f=(d&lr)!==0,E=(d&ps)===0,y=f?E?us(s):Nr(s):s,T=d&cr?Nr(a):a,_={i:T,v:y,k:i,a:null,e:null,prev:t,next:o};try{return _.e=ar(()=>l(e,y,T),M),_.e.prev=t&&t.e,_.e.next=o&&o.e,t===null?r.first=_:(t.next=_,t.e.next=_.e),o!==null&&(o.prev=_,o.e.prev=_.e),_}finally{}}function Br(e,r,t){for(var o=e.next?e.next.e.nodes_start:t,s=r?r.e.nodes_start:t,i=e.e.nodes_start;i!==o;){var a=ds(i);s.before(i),i=a}}function te(e,r,t){r===null?e.first=t:(r.next=t,r.e.next=t&&t.e),t!==null&&(t.prev=r,t.e.prev=r&&r.e)}function Et(e){if(M){var r=!1,t=()=>{if(!r){if(r=!0,e.hasAttribute("value")){var o=e.value;je(e,"value",null),e.value=o}if(e.hasAttribute("checked")){var s=e.checked;je(e,"checked",null),e.checked=s}}};e.__on_r=t,ms(t),vs()}}function je(e,r,t,o){var s=e.__attributes??(e.__attributes={});M&&(s[r]=e.getAttribute(r),r==="src"||r==="srcset"||r==="href"&&e.nodeName==="LINK")||s[r]!==(s[r]=t)&&(r==="style"&&"__styles"in e&&(e.__styles={}),r==="loading"&&(e[_s]=t),t==null?e.removeAttribute(r):typeof t!="string"&&As(e).includes(r)?e[r]=t:e.setAttribute(r,t))}var Mr=new Map;function As(e){var r=Mr.get(e.nodeName);if(r)return r;Mr.set(e.nodeName,r=[]);for(var t,o=tr(e),s=Element.prototype;s!==o;){t=fs(o);for(var i in t)t[i].set&&r.push(i);o=tr(o)}return r}function Tt(e,r){var t=e.__className,o=Ss(r);M&&e.className===o?e.__className=o:(t!==o||M&&e.className!==o)&&(r==null?e.removeAttribute("class"):e.className=o,e.__className=o)}function Ss(e){return e??""}function sr(e,r,t=r){var o=it();gt(e,"input",s=>{var i=s?e.defaultValue:e.value;i=ze(e)?Ke(i):i,t(i),o&&i!==(i=r())&&(e.value=i??"")}),(M&&e.defaultValue!==e.value||Es(r)==null&&e.value)&&t(ze(e)?Ke(e.value):e.value),Ts(()=>{var s=r();ze(e)&&s===Ke(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function ze(e){var r=e.type;return r==="number"||r==="range"}function Ke(e){return e===""?null:+e}function vt(e,r,t){if(e.multiple)return Us(e,r);for(var o of e.options){var s=we(o);if(ws(s,r)){o.selected=!0;return}}(!t||r!==void 0)&&(e.selectedIndex=-1)}function Fs(e,r){dt(()=>{var t=new MutationObserver(()=>{var o=e.__value;vt(e,o)});return t.observe(e,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),()=>{t.disconnect()}})}function Cs(e,r,t=r){var o=!0;gt(e,"change",s=>{var i=s?"[selected]":":checked",a;if(e.multiple)a=[].map.call(e.querySelectorAll(i),we);else{var l=e.querySelector(i)??e.querySelector("option:not([disabled])");a=l&&we(l)}t(a)}),dt(()=>{var s=r();if(vt(e,s,o),o&&s===void 0){var i=e.querySelector(":checked");i!==null&&(s=we(i),t(s))}e.__value=s,o=!1}),Fs(e)}function Us(e,r){for(var t of e.options)t.selected=~r.indexOf(we(t))}function we(e){return"__value"in e?e.__value:e.value}var Ds=oe('<textarea placeholder="Describe how the trade went"></textarea> <input placeholder="https://www.tradingview.com/x/HEUPOgtN/"> <img alt="Chart" class="svelte-1tbyhhq">',1),Ls=oe('<dialog class="svelte-1tbyhhq"><div class="flex-column gap-1"><!></div></dialog>');function Is(e,r){Oe(r,!0);let t=V(void 0),o=V(void 0),s=V(_=>{}),i=X(()=>h(o)==null||h(o).status=="closed"||h(o).status=="canceled"),a=V("");ur(()=>{var w,P;const _=(w=h(o))==null?void 0:w.report.match(new RegExp("(?<=https:\\/\\/www.tradingview.com\\/x\\/)(.*)(?=\\/)","g")),k=_==null?void 0:_[0],O=(P=k==null?void 0:k[0])==null?void 0:P.toLowerCase();H(a,`https://s3.tradingview.com/snapshots/${O}/${k}.png`)});const l=()=>{var _;h(s)(h(o)),(_=h(t))==null||_.close()},d=(_,k)=>{var O;H(o,ie(_)),H(s,ie(k)),(O=h(t))==null||O.showModal()};var f=Ls(),E=se(f),y=se(E);{var T=_=>{var k=Ue(),O=me(k);ks(O,()=>{var w;return(w=h(o))==null?void 0:w.date},w=>{var P=Ds(),A=me(P);bs(A);var S=D(A,2);Et(S);var G=D(S,2);Y(()=>{A.disabled=h(i),S.disabled=h(i),je(G,"src",h(a))}),sr(A,()=>h(o).note,R=>h(o).note=R),sr(S,()=>h(o).report,R=>h(o).report=R),N(w,P)}),N(_,k)};ve(y,_=>{h(o)&&_(T)})}return Q(E),Q(f),ht(f,_=>H(t,_),()=>h(t)),qe("close",f,l),N(e,f),Re({show:d})}const qs=5e-4,js=["created","open","closed","canceled"],xs=["btc","eth","ada"],$s=["1min","3min","15min"];function bt(){return{status:"created",date:Date.now(),report:"",note:"",symbol:"btc",timeFrame:"3min",longShort:"long",risk:0,riskRewardRatio:"",account:0,amount:0,entry:0,takeProfit:0,stopLoss:0,pnl:0,taker:qs,maker:0}}function Ns(e,r,t,o){if(!o||!t)return 0;const s=Math.abs(o/t-1);return wt(r/e*s,4)}function Bs(e,r){return r<e?"long":"short"}function Ms(e,r,t,o){if(!r||!t||!o)return 0;const s=r-o/t*r;return wt(e=="long"?s*-1:s,2)}function Hs(e,r,t){const o=Math.abs(e-t),s=Math.abs(e-r),i=Math.min(o,s),a=Math.round(o/i*10)/10,l=Math.round(s/i*10)/10;return a+" / "+l}function wt(e,r){return Number(e.toFixed(r))}var Ws=(e,r)=>!r()&&e.stopPropagation(),Vs=oe("<option> </option>"),zs=oe('<select class="svelte-1lhzzgw"></select>'),Ks=oe("<td><!></td>");function B(e,r){Oe(r,!0);let t=de(r,"value",15),o=de(r,"disabled",3,!0),s=de(r,"options",19,()=>[]),i=de(r,"color",3,"");const a=T=>{const _=T.currentTarget,k=document.createRange();k.selectNodeContents(_);const O=window.getSelection();O==null||O.removeAllRanges(),O==null||O.addRange(k)},l=T=>{switch(r.type){case"text":t(T.currentTarget.innerText);break;case"currency":t(Number(T.currentTarget.innerText));break;case"date":t(new Date(T.currentTarget.innerText).valueOf());break}const _=new Event("change",{bubbles:!0});T.currentTarget.dispatchEvent(_)};var d=Ks();d.__dblclick=[Ws,o];var f=se(d);{var E=T=>{var _=He();Y(()=>Fe(_,t())),N(T,_)},y=T=>{var _=Ue(),k=me(_);{var O=P=>{var A=He();Y(()=>Fe(A,new Date(Number(t())).toLocaleString("en-GB",{timeZone:"UTC"}))),N(P,A)},w=P=>{var A=Ue(),S=me(A);{var G=R=>{var U=Ue(),q=me(U);{var L=F=>{var j=He();Y(()=>Fe(j,t())),N(F,j)},z=F=>{var j=zs();_t(j,21,s,Ps,(Z,ee)=>{var W=Vs(),re={},ce=se(W,!0);Q(W),Y(()=>{re!==(re=h(ee))&&(W.value=(W.__value=h(ee))==null?"":h(ee)),Fe(ce,h(ee))}),N(Z,W)}),Q(j),Y(()=>j.disabled=o()),Cs(j,t),N(F,j)};ve(q,F=>{o()?F(L):F(z,!1)})}N(R,U)};ve(S,R=>{r.type=="select"&&R(G)},!0)}N(P,A)};ve(k,P=>{r.type=="date"?P(O):P(w,!1)},!0)}N(T,_)};ve(f,T=>{r.type=="text"||r.type=="currency"?T(E):T(y,!1)})}Q(d),Y(()=>{je(d,"contenteditable",o()||r.type=="select"?!1:"plaintext-only"),Tt(d,`${`${r.type}	${i()}`??""} svelte-1lhzzgw`)}),qe("focus",d,a),qe("blur",d,l),N(e,d),Re()}pr(["dblclick"]);var Js=(e,r,t)=>r()(mt(h(t))),Qs=oe("<tr><!><!><!><!><!><!><!><!><!><!><!><!><!><!></tr>");function Ys(e,r){Oe(r,!0);let t=de(r,"onchange",3,()=>{}),o=de(r,"ondblclick",3,()=>{}),s=V(ie(r.trade));ur(()=>{H(s,ie(r.trade))});let i=X(()=>h(s).status=="closed"||h(s).status=="canceled");const a=()=>{H(s,ie({...h(s),longShort:Bs(h(s).entry,h(s).stopLoss),risk:Ns(h(s).account,h(s).amount,h(s).entry,h(s).stopLoss),riskRewardRatio:Hs(h(s).entry,h(s).takeProfit,h(s).stopLoss),pnl:Ms(h(s).longShort,h(s).amount,h(s).entry,h(s).exit)})),t()(mt(h(s)))};var l=Qs();l.__dblclick=[Js,o,s],l.__change=a;var d=se(l);B(d,{type:"select",options:js,disabled:!1,get value(){return h(s).status},set value(F){h(s).status=F}});var f=D(d);B(f,{type:"date",get value(){return h(s).date}});var E=D(f);B(E,{type:"select",options:xs,get disabled(){return h(i)},get value(){return h(s).symbol},set value(F){h(s).symbol=F}});var y=D(E);B(y,{type:"select",options:$s,get disabled(){return h(i)},get value(){return h(s).timeFrame},set value(F){h(s).timeFrame=F}});var T=D(y),_=X(()=>h(s).longShort=="short"?"red":"green");B(T,{type:"text",get value(){return h(s).longShort},get color(){return h(_)}});var k=D(T);B(k,{type:"currency",get disabled(){return h(i)},get value(){return h(s).account},set value(F){h(s).account=F}});var O=D(k);B(O,{type:"currency",get disabled(){return h(i)},get value(){return h(s).amount},set value(F){h(s).amount=F}});var w=D(O);B(w,{type:"currency",get disabled(){return h(i)},get value(){return h(s).entry},set value(F){h(s).entry=F}});var P=D(w);B(P,{type:"currency",get disabled(){return h(i)},get value(){return h(s).takeProfit},set value(F){h(s).takeProfit=F}});var A=D(P);B(A,{type:"currency",get disabled(){return h(i)},get value(){return h(s).stopLoss},set value(F){h(s).stopLoss=F}});var S=D(A);B(S,{type:"currency",get disabled(){return h(i)},get value(){return h(s).exit},set value(F){h(s).exit=F}});var G=D(S),R=X(()=>"%"+(h(s).risk*100).toFixed(2));B(G,{type:"text",get value(){return h(R)}});var U=D(G);B(U,{type:"text",get value(){return h(s).riskRewardRatio}});var q=D(U),L=X(()=>h(s).pnl.toFixed(2)),z=X(()=>h(s).pnl==0?"":h(s).pnl<0?"red":"green");B(q,{type:"currency",get value(){return h(L)},get color(){return h(z)}}),Q(l),Y(()=>Tt(l,`${h(s).status??""} svelte-1x45f01`)),qe("blur",l,a),N(e,l),Re()}pr(["dblclick","change"]);var Xs=oe("<table><thead><tr><th>STATUS</th><th>DATE</th><th>SYMBOL</th><th>TF</th><th>L / S</th><th>ACCOUNT</th><th>AMOUNT</th><th>ENTRY</th><th>TP</th><th>SL</th><th>EXIT</th><th>RISK</th><th>R/R</th><th>PNL</th></tr></thead><tbody></tbody></table>");function Zs(e,r){Oe(r,!0);const t=(i,a)=>{r.onchange(r.trades.toSpliced(i,1,a))};var o=Xs(),s=D(se(o));_t(s,23,()=>r.trades,i=>i.date,(i,a,l)=>{Ys(i,{get trade(){return h(a)},onchange:d=>t(h(l),d),get ondblclick(){return r.ondblclick}})}),Q(s),Q(o),N(e,o),Re()}const Je="trading",Qe="trades.json";class Ye{static async getUser(r){try{const{data:t}=await r.rest.users.getAuthenticated();return console.log("Token is valid. Authenticated as:",t.login),t}catch(t){return console.error("An error occurred:",t),null}}static async getTrades(r,t){try{const{data:o}=await r.rest.repos.getContent({mediaType:{format:"raw"},owner:t||"",repo:Je,path:Qe});return JSON.parse(o)}catch(o){return console.error("An error occurred while fetching trades:",o),[]}}static async setTrades(r,t,o){try{const{data:s}=await r.rest.repos.getContent({owner:t,repo:Je,path:Qe}),i=Array.isArray(s)?s[0]:s;if("sha"in i){const a=btoa(JSON.stringify(o));return await r.rest.repos.createOrUpdateFileContents({owner:t,repo:Je,path:Qe,message:"Trades synced",content:a,sha:i.sha}),console.log("File updated successfully!"),!0}}catch(s){console.error("An error occurred while setting trades:",s)}return!1}}function xe(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function dr(e,r,t,o){if(typeof t!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce((s,i)=>dr.bind(null,e,i,s,o),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((s,i)=>i.hook.bind(null,s,o),t)():t(o))}function eo(e,r,t,o){const s=o;e.registry[t]||(e.registry[t]=[]),r==="before"&&(o=(i,a)=>Promise.resolve().then(s.bind(null,a)).then(i.bind(null,a))),r==="after"&&(o=(i,a)=>{let l;return Promise.resolve().then(i.bind(null,a)).then(d=>(l=d,s(l,a))).then(()=>l)}),r==="error"&&(o=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(l=>s(l,a))),e.registry[t].push({hook:o,orig:s})}function ro(e,r,t){if(!e.registry[r])return;const o=e.registry[r].map(s=>s.orig).indexOf(t);o!==-1&&e.registry[r].splice(o,1)}const Hr=Function.bind,Wr=Hr.bind(Hr);function yt(e,r,t){const o=Wr(ro,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(s=>{const i=t?[r,s,t]:[r,s];e[s]=e.api[s]=Wr(eo,null).apply(null,i)})}function to(){const e=Symbol("Singular"),r={registry:{}},t=dr.bind(null,r,e);return yt(t,r,e),t}function so(){const e={registry:{}},r=dr.bind(null,e);return yt(r,e),r}const oo={Singular:to,Collection:so};var no="0.0.0-development",io=`octokit-endpoint.js/${no} ${xe()}`,ao={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":io},mediaType:{format:""}};function co(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function lo(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function kt(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{lo(r[o])?o in e?t[o]=kt(e[o],r[o]):Object.assign(t,{[o]:r[o]}):Object.assign(t,{[o]:r[o]})}),t}function Vr(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function or(e,r,t){var s;if(typeof r=="string"){let[i,a]=r.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},r);t.headers=co(t.headers),Vr(t),Vr(t.headers);const o=kt(e||{},t);return t.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function uo(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return o.length===0?e:e+t+o.map(s=>s==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(r[s])}`).join("&")}var po=/\{[^}]+\}/g;function go(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function ho(e){const r=e.match(po);return r?r.map(go).reduce((t,o)=>t.concat(o),[]):[]}function zr(e,r){const t={__proto__:null};for(const o of Object.keys(e))r.indexOf(o)===-1&&(t[o]=e[o]);return t}function Pt(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function ge(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function Te(e,r,t){return r=e==="+"||e==="#"?Pt(r):ge(r),t?ge(t)+"="+r:r}function le(e){return e!=null}function Xe(e){return e===";"||e==="&"||e==="?"}function mo(e,r,t,o){var s=e[t],i=[];if(le(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(Te(r,s,Xe(r)?t:""));else if(o==="*")Array.isArray(s)?s.filter(le).forEach(function(a){i.push(Te(r,a,Xe(r)?t:""))}):Object.keys(s).forEach(function(a){le(s[a])&&i.push(Te(r,s[a],a))});else{const a=[];Array.isArray(s)?s.filter(le).forEach(function(l){a.push(Te(r,l))}):Object.keys(s).forEach(function(l){le(s[l])&&(a.push(ge(l)),a.push(Te(r,s[l].toString())))}),Xe(r)?i.push(ge(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else r===";"?le(s)&&i.push(ge(t)):s===""&&(r==="&"||r==="?")?i.push(ge(t)+"="):s===""&&i.push("");return i}function _o(e){return{expand:fo.bind(null,e)}}function fo(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let l="";const d=[];if(t.indexOf(s.charAt(0))!==-1&&(l=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(f){var E=/([^:\*]*)(?::(\d+)|(\*))?/.exec(f);d.push(mo(r,l,E[1],E[2]||E[3]))}),l&&l!=="+"){var a=",";return l==="?"?a="&":l!=="#"&&(a=l),(d.length!==0?l:"")+d.join(a)}else return d.join(",")}else return Pt(i)}),e==="/"?e:e.replace(/\/$/,"")}function Gt(e){var E;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=zr(e,["method","baseUrl","url","headers","request","mediaType"]);const a=ho(t);t=_o(t).expand(i),/^http/.test(t)||(t=e.baseUrl+t);const l=Object.keys(e).filter(y=>a.includes(y)).concat("baseUrl"),d=zr(i,l);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(y=>y.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(E=e.mediaType.previews)!=null&&E.length)){const y=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=y.concat(e.mediaType.previews).map(T=>{const _=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${T}-preview${_}`}).join(",")}return["GET","HEAD"].includes(r)?t=uo(t,d):"data"in d?s=d.data:Object.keys(d).length&&(s=d),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof s>"u"&&(s=""),Object.assign({method:r,url:t,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function Eo(e,r,t){return Gt(or(e,r,t))}function Ot(e,r){const t=or(e,r),o=Eo.bind(null,t);return Object.assign(o,{DEFAULTS:t,defaults:Ot.bind(null,t),merge:or.bind(null,t),parse:Gt})}var To=Ot(null,ao),Kr=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function vo(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var ue={},Jr;function bo(){if(Jr)return ue;Jr=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,o=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,s={type:"",parameters:new e};Object.freeze(s.parameters),Object.freeze(s);function i(l){if(typeof l!="string")throw new TypeError("argument header is required and must be a string");let d=l.indexOf(";");const f=d!==-1?l.slice(0,d).trim():l.trim();if(o.test(f)===!1)throw new TypeError("invalid media type");const E={type:f.toLowerCase(),parameters:new e};if(d===-1)return E;let y,T,_;for(r.lastIndex=d;T=r.exec(l);){if(T.index!==d)throw new TypeError("invalid parameter format");d+=T[0].length,y=T[1].toLowerCase(),_=T[2],_[0]==='"'&&(_=_.slice(1,_.length-1),t.test(_)&&(_=_.replace(t,"$1"))),E.parameters[y]=_}if(d!==l.length)throw new TypeError("invalid parameter format");return E}function a(l){if(typeof l!="string")return s;let d=l.indexOf(";");const f=d!==-1?l.slice(0,d).trim():l.trim();if(o.test(f)===!1)return s;const E={type:f.toLowerCase(),parameters:new e};if(d===-1)return E;let y,T,_;for(r.lastIndex=d;T=r.exec(l);){if(T.index!==d)return s;d+=T[0].length,y=T[1].toLowerCase(),_=T[2],_[0]==='"'&&(_=_.slice(1,_.length-1),t.test(_)&&(_=_.replace(t,"$1"))),E.parameters[y]=_}return d!==l.length?s:E}return ue.default={parse:i,safeParse:a},ue.parse=i,ue.safeParse=a,ue.defaultContentType=s,ue}var wo=bo();class be extends Error{constructor(t,o,s){super(t);I(this,"name");I(this,"status");I(this,"request");I(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const i=Object.assign({},s.request);s.request.headers.authorization&&(i.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var yo="0.0.0-development",ko={headers:{"user-agent":`octokit-request.js/${yo} ${xe()}`}};function Po(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function Qr(e){var y,T,_,k,O;const r=((y=e.request)==null?void 0:y.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((T=e.request)==null?void 0:T.log)||console,o=((_=e.request)==null?void 0:_.parseSuccessResponseBody)!==!1,s=Po(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([w,P])=>[w,String(P)]));let a;try{a=await r(e.url,{method:e.method,body:s,redirect:(k=e.request)==null?void 0:k.redirect,headers:i,signal:(O=e.request)==null?void 0:O.signal,...e.body&&{duplex:"half"}})}catch(w){let P="Unknown Error";if(w instanceof Error){if(w.name==="AbortError")throw w.status=500,w;P=w.message,w.name==="TypeError"&&"cause"in w&&(w.cause instanceof Error?P=w.cause.message:typeof w.cause=="string"&&(P=w.cause))}const A=new be(P,500,{request:e});throw A.cause=w,A}const l=a.status,d=a.url,f={};for(const[w,P]of a.headers)f[w]=P;const E={url:d,status:l,headers:f,data:""};if("deprecation"in f){const w=f.link&&f.link.match(/<([^>]+)>; rel="deprecation"/),P=w&&w.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${f.sunset}${P?`. See ${P}`:""}`)}if(l===204||l===205)return E;if(e.method==="HEAD"){if(l<400)return E;throw new be(a.statusText,l,{response:E,request:e})}if(l===304)throw E.data=await Ze(a),new be("Not modified",l,{response:E,request:e});if(l>=400)throw E.data=await Ze(a),new be(Go(E.data),l,{response:E,request:e});return E.data=o?await Ze(a):a.body,E}async function Ze(e){var o;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=wo.safeParse(r);if(t.type==="application/json"){let s="";try{return s=await e.text(),JSON.parse(s)}catch{return s}}else return t.type.startsWith("text/")||((o=t.parameters.charset)==null?void 0:o.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function Go(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function nr(e,r){const t=e.defaults(r);return Object.assign(function(s,i){const a=t.merge(s,i);if(!a.request||!a.request.hook)return Qr(t.parse(a));const l=(d,f)=>Qr(t.parse(t.merge(d,f)));return Object.assign(l,{endpoint:t,defaults:nr.bind(null,t)}),a.request.hook(l,a)},{endpoint:t,defaults:nr.bind(null,t)})}var ir=nr(To,ko),Oo="0.0.0-development";function Ro(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var Ao=class extends Error{constructor(r,t,o){super(Ro(o));I(this,"name","GraphqlResponseError");I(this,"errors");I(this,"data");this.request=r,this.headers=t,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},So=["method","baseUrl","url","headers","request","query","mediaType"],Fo=["query","method","url"],Yr=/\/api\/v3\/?$/;function Co(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(Fo.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const o=typeof r=="string"?Object.assign({query:r},t):r,s=Object.keys(o).reduce((a,l)=>So.includes(l)?(a[l]=o[l],a):(a.variables||(a.variables={}),a.variables[l]=o[l],a),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Yr.test(i)&&(s.url=i.replace(Yr,"/api/graphql")),e(s).then(a=>{if(a.data.errors){const l={};for(const d of Object.keys(a.headers))l[d]=a.headers[d];throw new Ao(s,l,a.data)}return a.data.data})}function gr(e,r){const t=e.defaults(r);return Object.assign((s,i)=>Co(t,s,i),{defaults:gr.bind(null,t),endpoint:t.endpoint})}gr(ir,{headers:{"user-agent":`octokit-graphql.js/${Oo} ${xe()}`},method:"POST",url:"/graphql"});function Uo(e){return gr(e,{method:"POST",url:"/graphql"})}var Do=/^v1\./,Lo=/^ghs_/,Io=/^ghu_/;async function qo(e){const r=e.split(/\./).length===3,t=Do.test(e)||Lo.test(e),o=Io.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}function jo(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function xo(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=jo(e),r(s)}var $o=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(qo.bind(null,r),{hook:xo.bind(null,r)})};const Rt="6.1.2",Xr=()=>{},No=console.warn.bind(console),Bo=console.error.bind(console),Zr=`octokit-core.js/${Rt} ${xe()}`;var Ce;let Mo=(Ce=class{constructor(r={}){I(this,"request");I(this,"graphql");I(this,"log");I(this,"hook");I(this,"auth");const t=new oo.Collection,o={baseUrl:ir.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=r.userAgent?`${r.userAgent} ${Zr}`:Zr,r.baseUrl&&(o.baseUrl=r.baseUrl),r.previews&&(o.mediaType.previews=r.previews),r.timeZone&&(o.headers["time-zone"]=r.timeZone),this.request=ir.defaults(o),this.graphql=Uo(this.request).defaults(o),this.log=Object.assign({debug:Xr,info:Xr,warn:No,error:Bo},r.log),this.hook=t,r.authStrategy){const{authStrategy:i,...a}=r,l=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",l.hook),this.auth=l}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=$o(r.auth);t.wrap("request",i.hook),this.auth=i}const s=this.constructor;for(let i=0;i<s.plugins.length;++i)Object.assign(this,s.plugins[i](this,r))}static defaults(r){return class extends this{constructor(...o){const s=o[0]||{};if(typeof r=="function"){super(r(s));return}super(Object.assign({},r,s,s.userAgent&&r.userAgent?{userAgent:`${s.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var s;const t=this.plugins;return s=class extends this{},I(s,"plugins",t.concat(r.filter(i=>!t.includes(i)))),s}},I(Ce,"VERSION",Rt),I(Ce,"plugins",[]),Ce);var Ho="0.0.0-development";function Wo(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof t<"u"&&(e.data.incomplete_results=t),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function hr(e,r,t){const o=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),s=typeof r=="function"?r:e.request,i=o.method,a=o.headers;let l=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!l)return{done:!0};try{const d=await s({method:i,url:l,headers:a}),f=Wo(d);return l=((f.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:f}}catch(d){if(d.status!==409)throw d;return l="",{value:{status:200,headers:{},data:[]}}}}})}}function At(e,r,t,o){return typeof t=="function"&&(o=t,t=void 0),St(e,[],hr(e,r,t)[Symbol.asyncIterator](),o)}function St(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let i=!1;function a(){i=!0}return r=r.concat(o?o(s.value,a):s.value.data),i?r:St(e,r,t,o)})}Object.assign(At,{iterator:hr});function Ft(e){return{paginate:Object.assign(At.bind(null,e),{iterator:hr.bind(null,e)})}}Ft.VERSION=Ho;var Vo=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,zo=class extends Error{constructor(r,t){super(Vo(r.pathInQuery,t));I(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Ko=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);I(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Jo=e=>Object.prototype.toString.call(e)==="[object Object]";function Ct(e){const r=Ut(e,"pageInfo");if(r.length===0)throw new Ko(e);return r}var Ut=(e,r,t=[])=>{for(const o of Object.keys(e)){const s=[...t,o],i=e[o];if(Jo(i)){if(i.hasOwnProperty(r))return s;const a=Ut(i,r,s);if(a.length>0)return a}}return[]},ye=(e,r)=>r.reduce((t,o)=>t[o],e),er=(e,r,t)=>{const o=r[r.length-1],s=[...r].slice(0,-1),i=ye(e,s);typeof t=="function"?i[o]=t(i[o]):i[o]=t},Qo=e=>{const r=Ct(e);return{pathInQuery:r,pageInfo:ye(e,[...r,"pageInfo"])}},Dt=e=>e.hasOwnProperty("hasNextPage"),Yo=e=>Dt(e)?e.endCursor:e.startCursor,Xo=e=>Dt(e)?e.hasNextPage:e.hasPreviousPage,Lt=e=>(r,t={})=>{let o=!0,s={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(r,s),a=Qo(i),l=Yo(a.pageInfo);if(o=Xo(a.pageInfo),o&&l===s.cursor)throw new zo(a,l);return s={...s,cursor:l},{done:!1,value:i}}})}},Zo=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=Ct(e),o=[...t,"nodes"],s=ye(r,o);s&&er(e,o,d=>[...d,...s]);const i=[...t,"edges"],a=ye(r,i);a&&er(e,i,d=>[...d,...a]);const l=[...t,"pageInfo"];return er(e,l,ye(r,l)),e},en=e=>{const r=Lt(e);return async(t,o={})=>{let s={};for await(const i of r(t,o))s=Zo(s,i);return s}};function rn(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(en(e),{iterator:Lt(e)})})}}const tn="13.2.6",sn={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var on=sn;const ae=new Map;for(const[e,r]of Object.entries(on))for(const[t,o]of Object.entries(r)){const[s,i,a]=o,[l,d]=s.split(/ /),f=Object.assign({method:l,url:d},i);ae.has(e)||ae.set(e,new Map),ae.get(e).set(t,{scope:e,methodName:t,endpointDefaults:f,decorations:a})}const nn={has({scope:e},r){return ae.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...ae.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},o){if(t[o])return t[o];const s=ae.get(r).get(o);if(!s)return;const{endpointDefaults:i,decorations:a}=s;return a?t[o]=cn(e,r,o,i,a):t[o]=e.request.defaults(i),t[o]}};function an(e){const r={};for(const t of ae.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},nn);return r}function cn(e,r,t,o,s){const i=e.request.defaults(o);function a(...l){let d=i.endpoint.merge(...l);if(s.mapToData)return d=Object.assign({},d,{data:d[s.mapToData],[s.mapToData]:void 0}),i(d);if(s.renamed){const[f,E]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${f}.${E}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const f=i.endpoint.merge(...l);for(const[E,y]of Object.entries(s.renamedParameters))E in f&&(e.log.warn(`"${E}" parameter is deprecated for "octokit.${r}.${t}()". Use "${y}" instead`),y in f||(f[y]=f[E]),delete f[E]);return i(f)}return i(...l)}return Object.assign(a,i)}function It(e){return{rest:an(e)}}It.VERSION=tn;var Ie={exports:{}},ln=Ie.exports,et;function un(){return et||(et=1,function(e,r){(function(t,o){e.exports=o()})(ln,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Kr<"u"?Kr:typeof self<"u"?self:{};function o(b){return b&&b.default||b}var s=function(b,c,n={}){var u,p,g;for(u in c)g=c[u],n[u]=(p=b[u])!=null?p:g;return n},i=function(b,c,n={}){var u,p;for(u in b)p=b[u],c[u]!==void 0&&(n[u]=p);return n},a={load:s,overwrite:i},l;l=class{constructor(c,n){this.incr=c,this.decr=n,this._first=null,this._last=null,this.length=0}push(c){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,n,u;for(c=this._first,u=[];c!=null;)u.push((n=c,c=c.next,n.value));return u}forEachShift(c){var n;for(n=this.shift();n!=null;)c(n),n=this.shift()}debug(){var c,n,u,p,g;for(c=this._first,g=[];c!=null;)g.push((n=c,c=c.next,{value:n.value,prev:(u=n.prev)!=null?u.value:void 0,next:(p=n.next)!=null?p.value:void 0}));return g}};var d=l,f;f=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,u)=>this._addListener(n,"many",u),this.instance.once=(n,u)=>this._addListener(n,"once",u),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(c,n,u){var p;return(p=this._events)[c]==null&&(p[c]=[]),this._events[c].push({cb:u,status:n}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}async trigger(c,...n){var u,p;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,n),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(g){return g.status!=="none"}),p=this._events[c].map(async g=>{var m,v;if(g.status!=="none"){g.status==="once"&&(g.status="none");try{return v=typeof g.cb=="function"?g.cb(...n):void 0,typeof(v!=null?v.then:void 0)=="function"?await v:v}catch(C){return m=C,this.trigger("error",m),null}}}),(await Promise.all(p)).find(function(g){return g!=null}))}catch(g){return u=g,this.trigger("error",u),null}}};var E=f,y,T,_;y=d,T=E,_=class{constructor(c){this.Events=new T(this),this._length=0,this._lists=(function(){var n,u,p;for(p=[],n=1,u=c;1<=u?n<=u:n>=u;1<=u?++n:--n)p.push(new y(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(n){return n.forEachShift(c)})}getFirst(c=this._lists){var n,u,p;for(n=0,u=c.length;n<u;n++)if(p=c[n],p.length>0)return p;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var k=_,O;O=class extends Error{};var w=O,P,A,S,G,R;G=10,A=5,R=a,P=w,S=class{constructor(c,n,u,p,g,m,v,C){this.task=c,this.args=n,this.rejectOnDrop=g,this.Events=m,this._states=v,this.Promise=C,this.options=R.load(u,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((x,$)=>{this._resolve=x,this._reject=$}),this.retryCount=0}_sanitizePriority(c){var n;return n=~~c!==c?A:c,n<0?0:n>G-1?G-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new P(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var n;if(n=this._states.jobStatus(this.options.id),!(n===c||c==="DONE"&&n===null))throw new P(`Invalid job status ${n}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(c,n,u,p){var g,m,v;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),m={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",m);try{if(v=await(c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(m),await p(this.options,m),this._assertStatus("DONE"),this._resolve(v)}catch(C){return g=C,this._onFailure(g,m,n,u,p)}}doExpire(c,n,u){var p,g;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},p=new P(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,g,c,n,u)}async _onFailure(c,n,u,p,g){var m,v;if(u())return m=await this.Events.trigger("failed",c,n),m!=null?(v=~~m,this.Events.trigger("retry",`Retrying ${this.options.id} after ${v} ms`,n),this.retryCount++,p(v)):(this.doDone(n),await g(this.options,n),this._assertStatus("DONE"),this._reject(c))}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var U=S,q,L,z;z=a,q=w,L=class{constructor(c,n,u){this.instance=c,this.storeOptions=n,this.clientId=this.instance._randomIndex(),z.load(u,u,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var n,u,p,g,m;if(g=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&g>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=g,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&g>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:p,reservoir:m}=this.storeOptions,this._lastReservoirIncrease=g,u=p!=null?Math.min(n,p-m):n,u>0))return this.storeOptions.reservoir+=u,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}async __publish__(c){return await this.yieldLoop(),this.instance.Events.trigger("message",c.toString())}async __disconnect__(c){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(c=0){return new this.Promise(function(n,u){return setTimeout(n,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}async __updateSettings__(c){return await this.yieldLoop(),z.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(c){return await this.yieldLoop(),this._nextRequest+this.timeout<c}computeCapacity(){var c,n;return{maxConcurrent:c,reservoir:n}=this.storeOptions,c!=null&&n!=null?Math.min(c-this._running,n):c!=null?c-this._running:n??null}conditionsCheck(c){var n;return n=this.computeCapacity(),n==null||c<=n}async __incrementReservoir__(c){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(c){return this._unblockTime>=c}check(c,n){return this.conditionsCheck(c)&&this._nextRequest-n<=0}async __check__(c){var n;return await this.yieldLoop(),n=Date.now(),this.check(c,n)}async __register__(c,n,u){var p,g;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),g=Math.max(this._nextRequest-p,0),this._nextRequest=p+g+this.storeOptions.minTime,{success:!0,wait:g,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(c,n){var u,p,g;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new q(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),g=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(n,p),u=this.strategyIsBlock()&&(g||this.isBlocked(p)),u&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:g,blocked:u,strategy:this.storeOptions.strategy}}async __free__(c,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var F=L,j,Z;j=w,Z=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var n,u;if(n=this._jobs[c],u=n+1,n!=null&&u<this.status.length)return this.counts[n]--,this.counts[u]++,this._jobs[c]++;if(n!=null)return this.counts[n]--,delete this._jobs[c]}start(c){var n;return n=0,this._jobs[c]=n,this.counts[n]++}remove(c){var n;return n=this._jobs[c],n!=null&&(this.counts[n]--,delete this._jobs[c]),n!=null}jobStatus(c){var n;return(n=this.status[this._jobs[c]])!=null?n:null}statusJobs(c){var n,u,p,g,m;if(c!=null){if(u=this.status.indexOf(c),u<0)throw new j(`status must be one of ${this.status.join(", ")}`);p=this._jobs,g=[];for(n in p)m=p[n],m===u&&g.push(n);return g}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,n,u)=>(c[this.status[u]]=n,c),{})}};var ee=Z,W,re;W=d,re=class{constructor(c,n){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=n,this._running=0,this._queue=new W}isEmpty(){return this._queue.length===0}async _tryToRun(){var c,n,u,p,g,m,v;if(this._running<1&&this._queue.length>0)return this._running++,{task:v,args:c,resolve:g,reject:p}=this._queue.shift(),n=await async function(){try{return m=await v(...c),function(){return g(m)}}catch(C){return u=C,function(){return p(u)}}}(),this._running--,this._tryToRun(),n()}schedule(c,...n){var u,p,g;return g=p=null,u=new this.Promise(function(m,v){return g=m,p=v}),this._queue.push({task:c,args:n,resolve:g,reject:p}),this._tryToRun(),u}};var ce=re,_e="2.19.5",Ae={version:_e},Nt=Object.freeze({version:_e,default:Ae}),_r=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),fr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Bt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Er,Tr,vr,br,wr,Se;Se=a,Er=E,br=_r,vr=fr,wr=Bt,Tr=(function(){class b{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,Se.load(this.limiterOptions,this.defaults,this),this.Events=new Er(this),this.instances={},this.Bottleneck=Ur,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new br(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new vr(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var u;return(u=this.instances[n])!=null?u:(()=>{var p;return p=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,n),p})()}async deleteKey(n=""){var u,p;return p=this.instances[n],this.connection&&(u=await this.connection.__runCommand__(["del",...wr.allKeys(`${this.id}-${n}`)])),p!=null&&(delete this.instances[n],await p.disconnect()),p!=null||u>0}limiters(){var n,u,p,g;u=this.instances,p=[];for(n in u)g=u[n],p.push({key:n,limiter:g});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,u,p,g,m,v,C,x,$;if(this.connection==null)return this.Promise.resolve(this.keys());for(v=[],n=null,$=`b_${this.id}-`.length,u=9;n!==0;)for([x,p]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~x,g=0,C=p.length;g<C;g++)m=p[g],v.push(m.slice($,-u));return v}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var u,p,g,m,v,C;v=Date.now(),g=this.instances,m=[];for(p in g){C=g[p];try{await C._store.__groupCheck__(v)?m.push(this.deleteKey(p)):m.push(void 0)}catch(x){u=x,m.push(C.Events.trigger("error",u))}}return m},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(Se.overwrite(n,this.defaults,this),Se.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var u;if(!this.sharedConnection)return(u=this.connection)!=null?u.disconnect(n):void 0}}return b.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},b}).call(t);var Mt=Tr,yr,kr,Pr;Pr=a,kr=E,yr=(function(){class b{constructor(n={}){this.options=n,Pr.load(this.options,this.defaults,this),this.Events=new kr(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,u)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var u;return this._arr.push(n),u=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),u}}return b.prototype.defaults={maxTime:null,maxSize:null,Promise},b}).call(t);var Ht=yr,Wt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Vt=o(Nt),Gr,Or,$e,Ne,Rr,Be,Ar,Sr,Fr,Me,K,Cr=[].splice;Be=10,Or=5,K=a,Ar=k,Ne=U,Rr=F,Sr=Wt,$e=E,Fr=ee,Me=ce,Gr=(function(){class b{constructor(n={},...u){var p,g;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,u),K.load(n,this.instanceDefaults,this),this._queues=new Ar(Be),this._scheduled={},this._states=new Fr(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new $e(this),this._submitLock=new Me("submit",this.Promise),this._registerLock=new Me("register",this.Promise),g=K.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=K.load(n,this.redisStoreDefaults,{}),new Sr(this,g,p);if(this.datastore==="local")return p=K.load(n,this.localStoreDefaults,{}),new Rr(this,g,p);throw new b.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.ref=="function"?m.ref():void 0}),this._queues.on("zero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.unref=="function"?m.unref():void 0})}_validateOptions(n,u){if(!(n!=null&&typeof n=="object"&&u.length===0))throw new b.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,u,p,g){var m,v;try{if({running:v}=await this._store.__free__(n,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,g),v===0&&this.empty())return this.Events.trigger("idle")}catch(C){return m=C,this.Events.trigger("error",m)}}_run(n,u,p){var g,m,v;return u.doRun(),g=this._clearGlobalState.bind(this,n),v=this._run.bind(this,n,u),m=this._free.bind(this,n,u),this._scheduled[n]={timeout:setTimeout(()=>u.doExecute(this._limiter,g,v,m),p),expiration:u.options.expiration!=null?setTimeout(function(){return u.doExpire(g,v,m)},p+u.options.expiration):void 0,job:u}}_drainOne(n){return this._registerLock.schedule(()=>{var u,p,g,m,v;return this.queued()===0?this.Promise.resolve(null):(v=this._queues.getFirst(),{options:m,args:u}=g=v.first(),n!=null&&m.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${m.id}`,{args:u,options:m}),p=this._randomIndex(),this._store.__register__(p,m.weight,m.expiration).then(({success:C,wait:x,reservoir:$})=>{var fe;return this.Events.trigger("debug",`Drained ${m.id}`,{success:C,args:u,options:m}),C?(v.shift(),fe=this.empty(),fe&&this.Events.trigger("empty"),$===0&&this.Events.trigger("depleted",fe),this._run(p,g,x),this.Promise.resolve(m.weight)):this.Promise.resolve(null)})))})}_drainAll(n,u=0){return this._drainOne(n).then(p=>{var g;return p!=null?(g=n!=null?n-p:n,this._drainAll(g,u+p)):this.Promise.resolve(u)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(n){return this._queues.shiftAll(function(u){return u.doDrop({message:n})})}stop(n={}){var u,p;return n=K.load(n,this.stopDefaults),p=g=>{var m;return m=()=>{var v;return v=this._states.counts,v[0]+v[1]+v[2]+v[3]===g},new this.Promise((v,C)=>m()?v():this.on("done",()=>{if(m())return this.removeAllListeners("done"),v()}))},u=n.dropWaitingJobs?(this._run=function(g,m){return m.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var g,m,v;m=this._scheduled;for(g in m)v=m[g],this.jobStatus(v.job.options.id)==="RUNNING"&&(clearTimeout(v.timeout),clearTimeout(v.expiration),v.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),p(0)}))):this.schedule({priority:Be-1,weight:0},()=>p(1)),this._receive=function(g){return g._reject(new b.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new b.prototype.BottleneckError("stop() has already been called")),u}async _addToQueue(n){var u,p,g,m,v,C,x;({args:u,options:m}=n);try{({reachedHWM:v,blocked:p,strategy:x}=await this._store.__submit__(this.queued(),m.weight))}catch($){return g=$,this.Events.trigger("debug",`Could not queue ${m.id}`,{args:u,options:m,error:g}),n.doDrop({error:g}),!1}return p?(n.doDrop(),!0):v&&(C=x===b.prototype.strategy.LEAK?this._queues.shiftLastFrom(m.priority):x===b.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(m.priority+1):x===b.prototype.strategy.OVERFLOW?n:void 0,C!=null&&C.doDrop(),C==null||x===b.prototype.strategy.OVERFLOW)?(C==null&&n.doDrop(),v):(n.doQueue(v,p),this._queues.push(n),await this._drainAll(),v)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new b.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var u,p,g,m,v,C,x;return typeof n[0]=="function"?(v=n,[p,...n]=v,[u]=Cr.call(n,-1),m=K.load({},this.jobDefaults)):(C=n,[m,p,...n]=C,[u]=Cr.call(n,-1),m=K.load(m,this.jobDefaults)),x=(...$)=>new this.Promise(function(fe,Kt){return p(...$,function(...Dr){return(Dr[0]!=null?Kt:fe)(Dr)})}),g=new Ne(x,n,m,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),g.promise.then(function($){return typeof u=="function"?u(...$):void 0}).catch(function($){return Array.isArray($)?typeof u=="function"?u(...$):void 0:typeof u=="function"?u($):void 0}),this._receive(g)}schedule(...n){var u,p,g;return typeof n[0]=="function"?([g,...n]=n,p={}):[p,g,...n]=n,u=new Ne(g,n,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(u),u.promise}wrap(n){var u,p;return u=this.schedule.bind(this),p=function(...g){return u(n.bind(this),...g)},p.withOptions=function(g,...m){return u(g,n,...m)},p}async updateSettings(n={}){return await this._store.__updateSettings__(K.overwrite(n,this.storeDefaults)),K.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return b.default=b,b.Events=$e,b.version=b.prototype.version=Vt.version,b.strategy=b.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},b.BottleneckError=b.prototype.BottleneckError=w,b.Group=b.prototype.Group=Mt,b.RedisConnection=b.prototype.RedisConnection=_r,b.IORedisConnection=b.prototype.IORedisConnection=fr,b.Batcher=b.prototype.Batcher=Ht,b.prototype.jobDefaults={priority:Or,weight:1,expiration:null,id:"<no-id>"},b.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:b.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},b.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},b.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},b.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},b.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},b}).call(t);var Ur=Gr,zt=Ur;return zt})}(Ie)),Ie.exports}var pn=un();const qt=vo(pn);var dn="0.0.0-development";async function jt(e,r,t,o){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,s,i)}throw t}async function gn(e,r,t,o){const s=new qt;return s.on("failed",function(i,a){const l=~~i.request.request.retries,d=~~i.request.request.retryAfter;if(o.request.retryCount=a.retryCount+1,l>a.retryCount)return d*e.retryAfterBaseValue}),s.schedule(hn.bind(null,e,r,t),o)}async function hn(e,r,t,o){const s=await t(t,o);if(s.data&&s.data.errors&&s.data.errors.length>0&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new be(s.data.errors[0].message,500,{request:o,response:s});return jt(e,r,i,o)}return s}function xt(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",jt.bind(null,t,e)),e.hook.wrap("request",gn.bind(null,t,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}xt.VERSION=dn;var mn="0.0.0-development",rr=()=>Promise.resolve();function _n(e,r,t){return e.retryLimiter.schedule(fn,e,r,t)}async function fn(e,r,t){const o=t.method!=="GET"&&t.method!=="HEAD",{pathname:s}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&s.startsWith("/search/"),a=s.startsWith("/graphql"),d=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(d.expiration=1e3*60),(o||a)&&await e.write.key(e.id).schedule(d,rr),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(d,rr),i&&await e.search.key(e.id).schedule(d,rr);const f=e.global.key(e.id).schedule(d,r,t);if(a){const E=await f;if(E.data.errors!=null&&E.data.errors.some(y=>y.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:E,data:E.data})}return f}var En=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Tn(e){const t=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var rt=Tn(En),$t=rt.test.bind(rt),he={},vn=function(e,r){he.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),he.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),he.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),he.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function mr(e,r){const{enabled:t=!0,Bottleneck:o=qt,id:s="no-id",timeout:i=1e3*60*2,connection:a}=r.throttle||{};if(!t)return{};const l={timeout:i};typeof a<"u"&&(l.connection=a),he.global==null&&vn(o,l);const d=Object.assign({clustering:a!=null,triggersNotification:$t,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...he},r.throttle);if(typeof d.onSecondaryRateLimit!="function"||typeof d.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const f={},E=new o.Events(f);return f.on("secondary-limit",d.onSecondaryRateLimit),f.on("rate-limit",d.onRateLimit),f.on("error",y=>e.log.warn("Error in throttling-plugin limit handler",y)),d.retryLimiter.on("failed",async function(y,T){const[_,k,O]=T.args,{pathname:w}=new URL(O.url,"http://github.test");if(!(w.startsWith("/graphql")&&y.status!==401||y.status===403||y.status===429))return;const A=~~k.retryCount;k.retryCount=A,O.request.retryCount=A;const{wantRetry:S,retryAfter:G=0}=await async function(){var R;if(/\bsecondary rate\b/i.test(y.message)){const U=Number(y.response.headers["retry-after"])||_.fallbackSecondaryRateRetryAfter;return{wantRetry:await E.trigger("secondary-limit",U,O,e,A),retryAfter:U}}if(y.response.headers!=null&&y.response.headers["x-ratelimit-remaining"]==="0"||(((R=y.response.data)==null?void 0:R.errors)??[]).some(U=>U.type==="RATE_LIMITED")){const U=new Date(~~y.response.headers["x-ratelimit-reset"]*1e3).getTime(),q=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await E.trigger("rate-limit",q,O,e,A),retryAfter:q}}return{}}();if(S)return k.retryCount++,G*_.retryAfterBaseValue}),e.hook.wrap("request",_n.bind(null,d)),{}}mr.VERSION=mn;mr.triggersNotification=$t;var bn="0.0.0-development",wn=Mo.plugin(It,Ft,rn,xt,mr).defaults({userAgent:`octokit.js/${bn}`,throttle:{onRateLimit:yn,onSecondaryRateLimit:kn}});function yn(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function kn(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}var ne,ke,Pe;class Pn{constructor(r){I(this,"auth","");Ee(this,ne);Ee(this,ke,V(null));Ee(this,Pe,V([]));this.auth=r,qr(this,ne,new wn({auth:r})),Ye.getUser(J(this,ne)).then(t=>{var o;this.user=t,Ye.getTrades(J(this,ne),(o=this.user)==null?void 0:o.login).then(s=>{this.trades=s})})}get user(){return h(J(this,ke))}set user(r){H(J(this,ke),r)}get trades(){return h(J(this,Pe))}set trades(r){H(J(this,Pe),r)}async set(r){var t;return this.user&&await Ye.setTrades(J(this,ne),(t=this.user)==null?void 0:t.login,r)?(this.trades=r,!0):!1}}ne=new WeakMap,ke=new WeakMap,Pe=new WeakMap;function Gn(e){return new Pn(e)}var Ge;class On{constructor(r,t){I(this,"key","");Ee(this,Ge,V());this.key=r,this.value=t,this.value=localStorage[r]?JSON.parse(localStorage[r]):t,ur(()=>{this.value&&(localStorage[r]=JSON.stringify(this.value))})}get value(){return h(J(this,Ge))}set value(r){H(J(this,Ge),r)}}Ge=new WeakMap;function tt(e,r){return new On(e,r)}class st{static combineChanges(r,t){const o=[...t];for(const s of r){const i=o.findIndex(a=>a.date===s.date);i!==-1?(o[i]={...o[i],...s},console.log(i,o[i])):o.push({...bt(),...s})}return o.sort((s,i)=>i.date-s.date)}static getChanges(r,t){var i;const o=[],s=new Map;for(const a of t)s.set(a.date.toString(),a);for(const a of r){const l=s.get((i=a.date)==null?void 0:i.toString());if(l){const d={};for(const f in a)a[f]!==l[f]&&(d.date=a.date,d[f]=a[f]);Object.keys(d).length>0&&o.push(d)}else o.push(a)}return o}}var Rn=oe('<header class="flex-row align-items-center gap-1 svelte-wxr5oq"><h1 class="flexible">Trading journal v5</h1> <input placeholder="Git personal access token"> <button>Add</button> <button>Sync</button></header> <div class="containerTable overflow-auto svelte-wxr5oq"><!></div> <!>',1);function Hn(e,r){Oe(r,!0);const t=tt("personalAccessToken",""),o=tt("trades",[]),s=X(()=>Gn(t.value)),i=X(()=>st.combineChanges(o.value,h(s).trades)),a=X(()=>o.value.length>0&&!!h(s).user);let l=V(void 0),d=V(-1),f=V(!1);const E=U=>{o.value=st.getChanges(U,h(s).trades)},y=U=>{var q;H(d,ie(h(i).findIndex(L=>U.date==L.date))),(q=h(l))==null||q.show(U,L=>{E(h(i).toSpliced(h(d),1,L)),H(d,-1)})},T=()=>{o.value=[bt(),...o.value]},_=async()=>{H(f,!0),await h(s).set(h(i))&&(o.value=[]),H(f,!1)};var k=Rn(),O=me(k),w=D(se(O),2);Et(w);var P=D(w,2);P.__click=T;var A=D(P,2);A.__click=_,Q(O);var S=D(O,2),G=se(S);Zs(G,{get trades(){return h(i)},onchange:E,ondblclick:y}),Q(S);var R=D(S,2);ht(Is(R,{}),U=>H(l,ie(U)),()=>h(l)),Y(()=>A.disabled=!h(a)||h(f)),sr(w,()=>t.value,U=>t.value=U),N(e,k),Re()}pr(["click"]);export{Hn as component};
