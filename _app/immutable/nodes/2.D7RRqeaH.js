var Ft=Object.defineProperty;var Ct=(e,r,t)=>r in e?Ft(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var L=(e,r,t)=>Ct(e,typeof r!="symbol"?r+"":r,t);import{a as $,t as Q,b as Ie,c as je}from"../chunks/disclose-version.DqP73NPj.js";import{B as Ut,b as Dt,h as W,s as qe,a as Lt,R as It,aq as Mr,H as jt,r as kr,c as xe,f as pe,as as Oe,d as Vr,e as zr,p as qt,D as Pr,at as Gr,au as xt,af as $t,av as Nt,I as Bt,C as Ht,an as Wt,ah as Mt,aa as Vt,L as Or,aw as Xe,ax as Ze,ay as zt,al as Kt,az as Kr,X as Jt,aA as Qt,aB as Yt,aC as Xt,Q as Rr,aD as Zt,aE as es,j as rs,W as ts,V as Jr,t as ve,y as J,z as V,w as z,x as be,v as me,m as P,A as U,o as Te,g as Ae,N as Z,ae as ne}from"../chunks/runtime.Bas2-fRA.js";import{d as ss,l as Qr,e as er,f as Yr,a as Pe,r as os}from"../chunks/store.Byoh2nn8.js";import{i as ns,p as _e,a as re,b as Xr,o as is}from"../chunks/index-client.Cgohhbib.js";import{i as ge}from"../chunks/if.Dj4KubjC.js";function as(e,r){return r}function cs(e,r,t,n){for(var s=[],i=r.length,a=0;a<i;a++)xt(r[a].e,s,!0);var u=i>0&&s.length===0&&t!==null;if(u){var g=t.parentNode;$t(g),g.append(t),n.clear(),K(e,r[0].prev,r[i-1].next)}Nt(s,()=>{for(var f=0;f<i;f++){var h=r[f];u||(n.delete(h.k),K(e,h.prev,h.next)),Bt(h.e,!u)}})}function Zr(e,r,t,n,s,i=null){var a=e,u={flags:r,items:new Map,first:null},g=(r&Kr)!==0;if(g){var f=e;a=W?qe(Ht(f)):f.appendChild(Ut())}W&&Lt();var h=null,v=!1;Dt(()=>{var E=t(),_=It(E)?E:E==null?[]:Mr(E),y=_.length;if(v&&y===0)return;v=y===0;let G=!1;if(W){var b=a.data===jt;b!==(y===0)&&(a=kr(),qe(a),xe(!1),G=!0)}if(W){for(var k=null,R,F=0;F<y;F++){if(pe.nodeType===8&&pe.data===Wt){a=pe,G=!0,xe(!1);break}var O=_[F],A=n(O,F);R=et(pe,u,k,null,O,A,F,s,r),u.items.set(A,R),k=R}y>0&&qe(kr())}if(!W){var S=Mt;ls(_,u,a,s,r,(S.f&Oe)!==0,n)}i!==null&&(y===0?h?Vr(h):h=zr(()=>i(a)):h!==null&&qt(h,()=>{h=null})),G&&xe(!0),t()}),W&&(a=pe)}function ls(e,r,t,n,s,i,a){var X,ce,we,le;var u=(s&Qt)!==0,g=(s&(Ze|Xe))!==0,f=e.length,h=r.items,v=r.first,E=v,_,y=null,G,b=[],k=[],R,F,O,A;if(u)for(A=0;A<f;A+=1)R=e[A],F=a(R,A),O=h.get(F),O!==void 0&&((X=O.a)==null||X.measure(),(G??(G=new Set)).add(O));for(A=0;A<f;A+=1){if(R=e[A],F=a(R,A),O=h.get(F),O===void 0){var S=E?E.e.nodes_start:t;y=et(S,r,y,y===null?r.first:y.next,R,F,A,n,s),h.set(F,y),b=[],k=[],E=y.next;continue}if(g&&us(O,R,A,s),O.e.f&Oe&&(Vr(O.e),u&&((ce=O.a)==null||ce.unfix(),(G??(G=new Set)).delete(O))),O!==E){if(_!==void 0&&_.has(O)){if(b.length<k.length){var N=k[0],D;y=N.prev;var q=b[0],Y=b[b.length-1];for(D=0;D<b.length;D+=1)Ar(b[D],N,t);for(D=0;D<k.length;D+=1)_.delete(k[D]);K(r,q.prev,Y.next),K(r,y,q),K(r,Y,N),E=N,y=Y,A-=1,b=[],k=[]}else _.delete(O),Ar(O,E,t),K(r,O.prev,O.next),K(r,O,y===null?r.first:y.next),K(r,y,O),y=O;continue}for(b=[],k=[];E!==null&&E.k!==F;)(i||!(E.e.f&Oe))&&(_??(_=new Set)).add(E),k.push(E),E=E.next;if(E===null)continue;O=E}b.push(O),y=O,E=O.next}if(E!==null||_!==void 0){for(var B=_===void 0?[]:Mr(_);E!==null;)(i||!(E.e.f&Oe))&&B.push(E),E=E.next;var H=B.length;if(H>0){var te=s&Kr&&f===0?t:null;if(u){for(A=0;A<H;A+=1)(we=B[A].a)==null||we.measure();for(A=0;A<H;A+=1)(le=B[A].a)==null||le.fix()}cs(r,B,te,h)}}u&&Jt(()=>{var ye;if(G!==void 0)for(O of G)(ye=O.a)==null||ye.apply()}),Pr.first=r.first&&r.first.e,Pr.last=y&&y.e}function us(e,r,t,n){n&Ze&&Gr(e.v,r),n&Xe?Gr(e.i,t):e.i=t}function et(e,r,t,n,s,i,a,u,g){var f=(g&Ze)!==0,h=(g&zt)===0,v=f?h?Vt(s):Or(s):s,E=g&Xe?Or(a):a,_={i:E,v,k:i,a:null,e:null,prev:t,next:n};try{return _.e=zr(()=>u(e,v,E),W),_.e.prev=t&&t.e,_.e.next=n&&n.e,t===null?r.first=_:(t.next=_,t.e.next=_.e),n!==null&&(n.prev=_,n.e.prev=_.e),_}finally{}}function Ar(e,r,t){for(var n=e.next?e.next.e.nodes_start:t,s=r?r.e.nodes_start:t,i=e.e.nodes_start;i!==n;){var a=Kt(i);s.before(i),i=a}}function K(e,r,t){r===null?e.first=t:(r.next=t,r.e.next=t&&t.e),t!==null&&(t.prev=r,t.e.prev=r&&r.e)}function rt(e){if(W){var r=!1,t=()=>{if(!r){if(r=!0,e.hasAttribute("value")){var n=e.value;Se(e,"value",null),e.value=n}if(e.hasAttribute("checked")){var s=e.checked;Se(e,"checked",null),e.checked=s}}};e.__on_r=t,Yt(t),ss()}}function Se(e,r,t,n){var s=e.__attributes??(e.__attributes={});W&&(s[r]=e.getAttribute(r),r==="src"||r==="srcset"||r==="href"&&e.nodeName==="LINK")||s[r]!==(s[r]=t)&&(r==="style"&&"__styles"in e&&(e.__styles={}),r==="loading"&&(e[Xt]=t),t==null?e.removeAttribute(r):typeof t!="string"&&ps(e).includes(r)?e[r]=t:e.setAttribute(r,t))}var Sr=new Map;function ps(e){var r=Sr.get(e.nodeName);if(r)return r;Sr.set(e.nodeName,r=[]);for(var t,n=Rr(e),s=Element.prototype;s!==n;){t=Zt(n);for(var i in t)t[i].set&&r.push(i);n=Rr(n)}return r}function tt(e,r){var t=e.__className,n=ds(r);W&&e.className===n?e.__className=n:(t!==n||W&&e.className!==n)&&(r==null?e.removeAttribute("class"):e.className=n,e.__className=n)}function ds(e){return e??""}function Ke(e,r,t=r){var n=es();Qr(e,"input",s=>{var i=s?e.defaultValue:e.value;i=$e(e)?Ne(i):i,t(i),n&&i!==(i=r())&&(e.value=i??"")}),(W&&e.defaultValue!==e.value||rs(r)==null&&e.value)&&t($e(e)?Ne(e.value):e.value),ts(()=>{var s=r();$e(e)&&s===Ne(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function $e(e){var r=e.type;return r==="number"||r==="range"}function Ne(e){return e===""?null:+e}function st(e,r,t){if(e.multiple)return ms(e,r);for(var n of e.options){var s=fe(n);if(ns(s,r)){n.selected=!0;return}}(!t||r!==void 0)&&(e.selectedIndex=-1)}function gs(e,r){Jr(()=>{var t=new MutationObserver(()=>{var n=e.__value;st(e,n)});return t.observe(e,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),()=>{t.disconnect()}})}function hs(e,r,t=r){var n=!0;Qr(e,"change",s=>{var i=s?"[selected]":":checked",a;if(e.multiple)a=[].map.call(e.querySelectorAll(i),fe);else{var u=e.querySelector(i)??e.querySelector("option:not([disabled])");a=u&&fe(u)}t(a)}),Jr(()=>{var s=r();if(st(e,s,n),n&&s===void 0){var i=e.querySelector(":checked");i!==null&&(s=fe(i),t(s))}e.__value=s,n=!1}),gs(e)}function ms(e,r){for(var t of e.options)t.selected=~r.indexOf(fe(t))}function fe(e){return"__value"in e?e.__value:e.value}const _s=["created","open","closed","canceled"],fs=["btc","eth","ada"],Es=["1min","3min","15min"];function Ts(e,r,t,n){if(!n||!t)return 0;const s=Math.abs(n/t-1);return ot(r/e*s,4)}function vs(e,r){return r<e?"long":"short"}function bs(e,r,t,n){if(!r||!t||!n)return 0;const s=r-n/t*r;return ot(e=="long"?s*-1:s,2)}function ws(e,r,t){const n=Math.abs(e-t),s=Math.abs(e-r),i=Math.min(n,s),a=Math.round(n/i*10)/10,u=Math.round(s/i*10)/10;return a+" / "+u}function ot(e,r){return Number(e.toFixed(r))}var ys=(e,r)=>!r()&&e.stopPropagation(),ks=Q('<option class="svelte-pz2dud"> </option>'),Ps=Q('<select class="svelte-pz2dud"></select>'),Gs=Q("<td><!></td>");function x(e,r){ve(r,!0);let t=_e(r,"value",15),n=_e(r,"disabled",3,!0),s=_e(r,"options",19,()=>[]);const i=h=>{switch(r.type){case"text":t(h.currentTarget.innerText);break;case"currency":t(Number(h.currentTarget.innerText));break;case"date":t(new Date(h.currentTarget.innerText).valueOf());break}};var a=Gs();a.__dblclick=[ys,n];var u=J(a);{var g=h=>{var v=Ie();z(()=>Pe(v,t())),$(h,v)},f=h=>{var v=je(),E=me(v);{var _=G=>{var b=Ie();z(()=>Pe(b,new Date(Number(t())).toLocaleString("en-GB",{timeZone:"UTC"}))),$(G,b)},y=G=>{var b=je(),k=me(b);{var R=F=>{var O=je(),A=me(O);{var S=D=>{var q=Ie();z(()=>Pe(q,t())),$(D,q)},N=D=>{var q=Ps();Zr(q,21,s,as,(Y,B)=>{var H=ks(),te={},X=J(H,!0);V(H),z(()=>{te!==(te=P(B))&&(H.value=(H.__value=P(B))==null?"":P(B)),Pe(X,P(B))}),$(Y,H)}),V(q),z(()=>q.disabled=n()),hs(q,t),$(D,q)};ge(A,D=>{n()?D(S):D(N,!1)})}$(F,O)};ge(k,F=>{r.type=="select"&&F(R)},!0)}$(G,b)};ge(E,G=>{r.type=="date"?G(_):G(y,!1)},!0)}$(h,v)};ge(u,h=>{r.type=="text"||r.type=="currency"?h(g):h(f,!1)})}V(a),z(()=>{Se(a,"contenteditable",n()||r.type=="select"?!1:"plaintext-only"),tt(a,`${r.type??""} svelte-pz2dud`)}),Yr("blur",a,i),$(e,a),be()}er(["dblclick"]);const Os=(e,r,t)=>{r()({...t,longShort:vs(t.entry,t.stopLoss),risk:Ts(t.account,t.amount,t.entry,t.stopLoss),riskRewardRatio:ws(t.entry,t.takeProfit,t.stopLoss),pnl:bs(t.longShort,t.amount,t.entry,t.exit)})};var Rs=(e,r,t)=>r()(t),As=Q("<tr><!><!><!><!><!><!><!><!><!><!><!><!><!><!></tr>");function Ss(e,r){ve(r,!0);let t=_e(r,"onchange",3,()=>{}),n=_e(r,"ondblclick",3,()=>{}),s=re(r.trade),i=Te(()=>s.status=="closed"||s.status=="canceled");var a=As();a.__dblclick=[Rs,n,s],a.__change=[Os,t,s];var u=J(a);x(u,{type:"select",options:_s,disabled:!1,get value(){return s.status},set value(S){s.status=S}});var g=U(u);x(g,{type:"date",get disabled(){return P(i)},get value(){return s.date},set value(S){s.date=S}});var f=U(g);x(f,{type:"select",options:fs,get disabled(){return P(i)},get value(){return s.symbol},set value(S){s.symbol=S}});var h=U(f);x(h,{type:"select",options:Es,get disabled(){return P(i)},get value(){return s.timeFrame},set value(S){s.timeFrame=S}});var v=U(h);x(v,{type:"text",get value(){return s.longShort}});var E=U(v);x(E,{type:"currency",get disabled(){return P(i)},get value(){return s.account},set value(S){s.account=S}});var _=U(E);x(_,{type:"currency",get disabled(){return P(i)},get value(){return s.amount},set value(S){s.amount=S}});var y=U(_);x(y,{type:"currency",get disabled(){return P(i)},get value(){return s.entry},set value(S){s.entry=S}});var G=U(y);x(G,{type:"currency",get disabled(){return P(i)},get value(){return s.takeProfit},set value(S){s.takeProfit=S}});var b=U(G);x(b,{type:"currency",get disabled(){return P(i)},get value(){return s.stopLoss},set value(S){s.stopLoss=S}});var k=U(b);x(k,{type:"currency",get disabled(){return P(i)},get value(){return s.exit},set value(S){s.exit=S}});var R=U(k),F=Te(()=>"%"+(s.risk*100).toFixed(2));x(R,{type:"text",get value(){return P(F)}});var O=U(R);x(O,{type:"text",get value(){return s.riskRewardRatio}});var A=U(O);x(A,{type:"currency",get value(){return s.pnl}}),V(a),z(()=>tt(a,`${s.status??""} svelte-xfwjdn`)),$(e,a),be()}er(["dblclick","change"]);var Fs=Q('<textarea placeholder="Describe how the trade went"></textarea> <input placeholder="https://www.tradingview.com/x/HEUPOgtN/"> <img alt="Chart" class="svelte-5cpl6x">',1),Cs=Q('<dialog class="svelte-5cpl6x"><div class="flex-column gap-1"><!></div></dialog>');function Us(e,r){ve(r,!0);let t=ne(void 0),n=ne(void 0),s=ne(_=>{}),i=Te(()=>P(n)==null||P(n).status=="closed"||P(n).status=="canceled"),a=ne("");Ae(()=>{var b,k;const _=(b=P(n))==null?void 0:b.report.match(new RegExp("(?<=https:\\/\\/www.tradingview.com\\/x\\/)(.*)(?=\\/)","g")),y=_==null?void 0:_[0],G=(k=y==null?void 0:y[0])==null?void 0:k.toLowerCase();Z(a,`https://s3.tradingview.com/snapshots/${G}/${y}.png`)});const u=()=>{var _;P(s)(P(n)),(_=P(t))==null||_.close()},g=(_,y)=>{var G;Z(n,re(_)),Z(s,re(y)),(G=P(t))==null||G.showModal()};var f=Cs(),h=J(f),v=J(h);{var E=_=>{var y=Fs(),G=me(y);os(G);var b=U(G,2);rt(b);var k=U(b,2);z(()=>{G.disabled=P(i),b.disabled=P(i),Se(k,"src",P(a))}),Ke(G,()=>P(n).note,R=>P(n).note=R),Ke(b,()=>P(n).report,R=>P(n).report=R),$(_,y)};ge(v,_=>{P(n)&&_(E)})}return V(h),V(f),Xr(f,_=>Z(t,_),()=>P(t)),Yr("close",f,u),$(e,f),be({show:g})}var Ds=Q("<table><thead><tr><th>STATUS</th><th>DATE</th><th>SYMBOL</th><th>TF</th><th>L / S</th><th>ACCOUNT</th><th>AMOUNT</th><th>ENTRY</th><th>TP</th><th>SL</th><th>EXIT</th><th>RISK</th><th>R/R</th><th>PNL</th></tr></thead><tbody></tbody></table>");function Ls(e,r){ve(r,!0);const t=(i,a)=>{r.onchange(r.trades.toSpliced(i,1,a))};var n=Ds(),s=U(J(n));Zr(s,23,()=>r.trades,i=>i.date,(i,a,u)=>{Ss(i,{get trade(){return P(a)},onchange:g=>t(P(u),g),get ondblclick(){return r.ondblclick}})}),V(s),V(n),$(e,n),be()}const Be="trading",He="trades.json";class Fr{static async getUser(r){try{const{data:t}=await r.rest.users.getAuthenticated();return console.log("Token is valid. Authenticated as:",t.login),t}catch(t){return console.error("An error occurred:",t),null}}static async getTrades(r,t){try{const{data:n}=await r.rest.repos.getContent({mediaType:{format:"raw"},owner:t,repo:Be,path:He});return JSON.parse(n)}catch(n){return console.error("An error occurred while fetching trades:",n),[]}}static async setTrades(r,t,n){try{const{data:s}=await r.rest.repos.getContent({owner:t,repo:Be,path:He}),i=Array.isArray(s)?s[0]:s;if("sha"in i){const a=btoa(JSON.stringify(n));await r.rest.repos.createOrUpdateFileContents({owner:t,repo:Be,path:He,message:"Trades updated",content:a,sha:i.sha}),console.log("File updated successfully!")}}catch(s){console.error("An error occurred while setting trades:",s)}}}function Fe(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function rr(e,r,t,n){if(typeof t!="function")throw new Error("method for before hook must be a function");return n||(n={}),Array.isArray(r)?r.reverse().reduce((s,i)=>rr.bind(null,e,i,s,n),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((s,i)=>i.hook.bind(null,s,n),t)():t(n))}function Is(e,r,t,n){const s=n;e.registry[t]||(e.registry[t]=[]),r==="before"&&(n=(i,a)=>Promise.resolve().then(s.bind(null,a)).then(i.bind(null,a))),r==="after"&&(n=(i,a)=>{let u;return Promise.resolve().then(i.bind(null,a)).then(g=>(u=g,s(u,a))).then(()=>u)}),r==="error"&&(n=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(u=>s(u,a))),e.registry[t].push({hook:n,orig:s})}function js(e,r,t){if(!e.registry[r])return;const n=e.registry[r].map(s=>s.orig).indexOf(t);n!==-1&&e.registry[r].splice(n,1)}const Cr=Function.bind,Ur=Cr.bind(Cr);function nt(e,r,t){const n=Ur(js,null).apply(null,t?[r,t]:[r]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(s=>{const i=t?[r,s,t]:[r,s];e[s]=e.api[s]=Ur(Is,null).apply(null,i)})}function qs(){const e=Symbol("Singular"),r={registry:{}},t=rr.bind(null,r,e);return nt(t,r,e),t}function xs(){const e={registry:{}},r=rr.bind(null,e);return nt(r,e),r}const $s={Singular:qs,Collection:xs};var Ns="0.0.0-development",Bs=`octokit-endpoint.js/${Ns} ${Fe()}`,Hs={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Bs},mediaType:{format:""}};function Ws(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function Ms(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function it(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(n=>{Ms(r[n])?n in e?t[n]=it(e[n],r[n]):Object.assign(t,{[n]:r[n]}):Object.assign(t,{[n]:r[n]})}),t}function Dr(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function Je(e,r,t){var s;if(typeof r=="string"){let[i,a]=r.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},r);t.headers=Ws(t.headers),Dr(t),Dr(t.headers);const n=it(e||{},t);return t.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(n.mediaType.previews=e.mediaType.previews.filter(i=>!n.mediaType.previews.includes(i)).concat(n.mediaType.previews)),n.mediaType.previews=(n.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),n}function Vs(e,r){const t=/\?/.test(e)?"&":"?",n=Object.keys(r);return n.length===0?e:e+t+n.map(s=>s==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(r[s])}`).join("&")}var zs=/\{[^}]+\}/g;function Ks(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Js(e){const r=e.match(zs);return r?r.map(Ks).reduce((t,n)=>t.concat(n),[]):[]}function Lr(e,r){const t={__proto__:null};for(const n of Object.keys(e))r.indexOf(n)===-1&&(t[n]=e[n]);return t}function at(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function ie(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function de(e,r,t){return r=e==="+"||e==="#"?at(r):ie(r),t?ie(t)+"="+r:r}function se(e){return e!=null}function We(e){return e===";"||e==="&"||e==="?"}function Qs(e,r,t,n){var s=e[t],i=[];if(se(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),n&&n!=="*"&&(s=s.substring(0,parseInt(n,10))),i.push(de(r,s,We(r)?t:""));else if(n==="*")Array.isArray(s)?s.filter(se).forEach(function(a){i.push(de(r,a,We(r)?t:""))}):Object.keys(s).forEach(function(a){se(s[a])&&i.push(de(r,s[a],a))});else{const a=[];Array.isArray(s)?s.filter(se).forEach(function(u){a.push(de(r,u))}):Object.keys(s).forEach(function(u){se(s[u])&&(a.push(ie(u)),a.push(de(r,s[u].toString())))}),We(r)?i.push(ie(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else r===";"?se(s)&&i.push(ie(t)):s===""&&(r==="&"||r==="?")?i.push(ie(t)+"="):s===""&&i.push("");return i}function Ys(e){return{expand:Xs.bind(null,e)}}function Xs(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(n,s,i){if(s){let u="";const g=[];if(t.indexOf(s.charAt(0))!==-1&&(u=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(f){var h=/([^:\*]*)(?::(\d+)|(\*))?/.exec(f);g.push(Qs(r,u,h[1],h[2]||h[3]))}),u&&u!=="+"){var a=",";return u==="?"?a="&":u!=="#"&&(a=u),(g.length!==0?u:"")+g.join(a)}else return g.join(",")}else return at(i)}),e==="/"?e:e.replace(/\/$/,"")}function ct(e){var h;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),n=Object.assign({},e.headers),s,i=Lr(e,["method","baseUrl","url","headers","request","mediaType"]);const a=Js(t);t=Ys(t).expand(i),/^http/.test(t)||(t=e.baseUrl+t);const u=Object.keys(e).filter(v=>a.includes(v)).concat("baseUrl"),g=Lr(i,u);if(!/application\/octet-stream/i.test(n.accept)&&(e.mediaType.format&&(n.accept=n.accept.split(/,/).map(v=>v.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(h=e.mediaType.previews)!=null&&h.length)){const v=n.accept.match(/[\w-]+(?=-preview)/g)||[];n.accept=v.concat(e.mediaType.previews).map(E=>{const _=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${E}-preview${_}`}).join(",")}return["GET","HEAD"].includes(r)?t=Vs(t,g):"data"in g?s=g.data:Object.keys(g).length&&(s=g),!n["content-type"]&&typeof s<"u"&&(n["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof s>"u"&&(s=""),Object.assign({method:r,url:t,headers:n},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function Zs(e,r,t){return ct(Je(e,r,t))}function lt(e,r){const t=Je(e,r),n=Zs.bind(null,t);return Object.assign(n,{DEFAULTS:t,defaults:lt.bind(null,t),merge:Je.bind(null,t),parse:ct})}var eo=lt(null,Hs),Ir=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ro(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var oe={},jr;function to(){if(jr)return oe;jr=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,n=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,s={type:"",parameters:new e};Object.freeze(s.parameters),Object.freeze(s);function i(u){if(typeof u!="string")throw new TypeError("argument header is required and must be a string");let g=u.indexOf(";");const f=g!==-1?u.slice(0,g).trim():u.trim();if(n.test(f)===!1)throw new TypeError("invalid media type");const h={type:f.toLowerCase(),parameters:new e};if(g===-1)return h;let v,E,_;for(r.lastIndex=g;E=r.exec(u);){if(E.index!==g)throw new TypeError("invalid parameter format");g+=E[0].length,v=E[1].toLowerCase(),_=E[2],_[0]==='"'&&(_=_.slice(1,_.length-1),t.test(_)&&(_=_.replace(t,"$1"))),h.parameters[v]=_}if(g!==u.length)throw new TypeError("invalid parameter format");return h}function a(u){if(typeof u!="string")return s;let g=u.indexOf(";");const f=g!==-1?u.slice(0,g).trim():u.trim();if(n.test(f)===!1)return s;const h={type:f.toLowerCase(),parameters:new e};if(g===-1)return h;let v,E,_;for(r.lastIndex=g;E=r.exec(u);){if(E.index!==g)return s;g+=E[0].length,v=E[1].toLowerCase(),_=E[2],_[0]==='"'&&(_=_.slice(1,_.length-1),t.test(_)&&(_=_.replace(t,"$1"))),h.parameters[v]=_}return g!==u.length?s:h}return oe.default={parse:i,safeParse:a},oe.parse=i,oe.safeParse=a,oe.defaultContentType=s,oe}var so=to();class he extends Error{constructor(t,n,s){super(t);L(this,"name");L(this,"status");L(this,"request");L(this,"response");this.name="HttpError",this.status=Number.parseInt(n),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const i=Object.assign({},s.request);s.request.headers.authorization&&(i.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var oo="0.0.0-development",no={headers:{"user-agent":`octokit-request.js/${oo} ${Fe()}`}};function io(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function qr(e){var v,E,_,y,G;const r=((v=e.request)==null?void 0:v.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((E=e.request)==null?void 0:E.log)||console,n=((_=e.request)==null?void 0:_.parseSuccessResponseBody)!==!1,s=io(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([b,k])=>[b,String(k)]));let a;try{a=await r(e.url,{method:e.method,body:s,redirect:(y=e.request)==null?void 0:y.redirect,headers:i,signal:(G=e.request)==null?void 0:G.signal,...e.body&&{duplex:"half"}})}catch(b){let k="Unknown Error";if(b instanceof Error){if(b.name==="AbortError")throw b.status=500,b;k=b.message,b.name==="TypeError"&&"cause"in b&&(b.cause instanceof Error?k=b.cause.message:typeof b.cause=="string"&&(k=b.cause))}const R=new he(k,500,{request:e});throw R.cause=b,R}const u=a.status,g=a.url,f={};for(const[b,k]of a.headers)f[b]=k;const h={url:g,status:u,headers:f,data:""};if("deprecation"in f){const b=f.link&&f.link.match(/<([^>]+)>; rel="deprecation"/),k=b&&b.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${f.sunset}${k?`. See ${k}`:""}`)}if(u===204||u===205)return h;if(e.method==="HEAD"){if(u<400)return h;throw new he(a.statusText,u,{response:h,request:e})}if(u===304)throw h.data=await Me(a),new he("Not modified",u,{response:h,request:e});if(u>=400)throw h.data=await Me(a),new he(ao(h.data),u,{response:h,request:e});return h.data=n?await Me(a):a.body,h}async function Me(e){var n;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=so.safeParse(r);if(t.type==="application/json"){let s="";try{return s=await e.text(),JSON.parse(s)}catch{return s}}else return t.type.startsWith("text/")||((n=t.parameters.charset)==null?void 0:n.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function ao(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function Qe(e,r){const t=e.defaults(r);return Object.assign(function(s,i){const a=t.merge(s,i);if(!a.request||!a.request.hook)return qr(t.parse(a));const u=(g,f)=>qr(t.parse(t.merge(g,f)));return Object.assign(u,{endpoint:t,defaults:Qe.bind(null,t)}),a.request.hook(u,a)},{endpoint:t,defaults:Qe.bind(null,t)})}var Ye=Qe(eo,no),co="0.0.0-development";function lo(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var uo=class extends Error{constructor(r,t,n){super(lo(n));L(this,"name","GraphqlResponseError");L(this,"errors");L(this,"data");this.request=r,this.headers=t,this.response=n,this.errors=n.errors,this.data=n.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},po=["method","baseUrl","url","headers","request","query","mediaType"],go=["query","method","url"],xr=/\/api\/v3\/?$/;function ho(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(go.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const n=typeof r=="string"?Object.assign({query:r},t):r,s=Object.keys(n).reduce((a,u)=>po.includes(u)?(a[u]=n[u],a):(a.variables||(a.variables={}),a.variables[u]=n[u],a),{}),i=n.baseUrl||e.endpoint.DEFAULTS.baseUrl;return xr.test(i)&&(s.url=i.replace(xr,"/api/graphql")),e(s).then(a=>{if(a.data.errors){const u={};for(const g of Object.keys(a.headers))u[g]=a.headers[g];throw new uo(s,u,a.data)}return a.data.data})}function tr(e,r){const t=e.defaults(r);return Object.assign((s,i)=>ho(t,s,i),{defaults:tr.bind(null,t),endpoint:t.endpoint})}tr(Ye,{headers:{"user-agent":`octokit-graphql.js/${co} ${Fe()}`},method:"POST",url:"/graphql"});function mo(e){return tr(e,{method:"POST",url:"/graphql"})}var _o=/^v1\./,fo=/^ghs_/,Eo=/^ghu_/;async function To(e){const r=e.split(/\./).length===3,t=_o.test(e)||fo.test(e),n=Eo.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":n?"user-to-server":"oauth"}}function vo(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function bo(e,r,t,n){const s=r.endpoint.merge(t,n);return s.headers.authorization=vo(e),r(s)}var wo=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(To.bind(null,r),{hook:bo.bind(null,r)})};const ut="6.1.2",$r=()=>{},yo=console.warn.bind(console),ko=console.error.bind(console),Nr=`octokit-core.js/${ut} ${Fe()}`;var Ge;let Po=(Ge=class{constructor(r={}){L(this,"request");L(this,"graphql");L(this,"log");L(this,"hook");L(this,"auth");const t=new $s.Collection,n={baseUrl:Ye.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(n.headers["user-agent"]=r.userAgent?`${r.userAgent} ${Nr}`:Nr,r.baseUrl&&(n.baseUrl=r.baseUrl),r.previews&&(n.mediaType.previews=r.previews),r.timeZone&&(n.headers["time-zone"]=r.timeZone),this.request=Ye.defaults(n),this.graphql=mo(this.request).defaults(n),this.log=Object.assign({debug:$r,info:$r,warn:yo,error:ko},r.log),this.hook=t,r.authStrategy){const{authStrategy:i,...a}=r,u=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",u.hook),this.auth=u}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=wo(r.auth);t.wrap("request",i.hook),this.auth=i}const s=this.constructor;for(let i=0;i<s.plugins.length;++i)Object.assign(this,s.plugins[i](this,r))}static defaults(r){return class extends this{constructor(...n){const s=n[0]||{};if(typeof r=="function"){super(r(s));return}super(Object.assign({},r,s,s.userAgent&&r.userAgent?{userAgent:`${s.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var s;const t=this.plugins;return s=class extends this{},L(s,"plugins",t.concat(r.filter(i=>!t.includes(i)))),s}},L(Ge,"VERSION",ut),L(Ge,"plugins",[]),Ge);var Go="0.0.0-development";function Oo(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,n=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof t<"u"&&(e.data.incomplete_results=t),typeof n<"u"&&(e.data.repository_selection=n),e.data.total_count=s,e}function sr(e,r,t){const n=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),s=typeof r=="function"?r:e.request,i=n.method,a=n.headers;let u=n.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!u)return{done:!0};try{const g=await s({method:i,url:u,headers:a}),f=Oo(g);return u=((f.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:f}}catch(g){if(g.status!==409)throw g;return u="",{value:{status:200,headers:{},data:[]}}}}})}}function pt(e,r,t,n){return typeof t=="function"&&(n=t,t=void 0),dt(e,[],sr(e,r,t)[Symbol.asyncIterator](),n)}function dt(e,r,t,n){return t.next().then(s=>{if(s.done)return r;let i=!1;function a(){i=!0}return r=r.concat(n?n(s.value,a):s.value.data),i?r:dt(e,r,t,n)})}Object.assign(pt,{iterator:sr});function gt(e){return{paginate:Object.assign(pt.bind(null,e),{iterator:sr.bind(null,e)})}}gt.VERSION=Go;var Ro=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,Ao=class extends Error{constructor(r,t){super(Ro(r.pathInQuery,t));L(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},So=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);L(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Fo=e=>Object.prototype.toString.call(e)==="[object Object]";function ht(e){const r=mt(e,"pageInfo");if(r.length===0)throw new So(e);return r}var mt=(e,r,t=[])=>{for(const n of Object.keys(e)){const s=[...t,n],i=e[n];if(Fo(i)){if(i.hasOwnProperty(r))return s;const a=mt(i,r,s);if(a.length>0)return a}}return[]},Ee=(e,r)=>r.reduce((t,n)=>t[n],e),Ve=(e,r,t)=>{const n=r[r.length-1],s=[...r].slice(0,-1),i=Ee(e,s);typeof t=="function"?i[n]=t(i[n]):i[n]=t},Co=e=>{const r=ht(e);return{pathInQuery:r,pageInfo:Ee(e,[...r,"pageInfo"])}},_t=e=>e.hasOwnProperty("hasNextPage"),Uo=e=>_t(e)?e.endCursor:e.startCursor,Do=e=>_t(e)?e.hasNextPage:e.hasPreviousPage,ft=e=>(r,t={})=>{let n=!0,s={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!n)return{done:!0,value:{}};const i=await e.graphql(r,s),a=Co(i),u=Uo(a.pageInfo);if(n=Do(a.pageInfo),n&&u===s.cursor)throw new Ao(a,u);return s={...s,cursor:u},{done:!1,value:i}}})}},Lo=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=ht(e),n=[...t,"nodes"],s=Ee(r,n);s&&Ve(e,n,g=>[...g,...s]);const i=[...t,"edges"],a=Ee(r,i);a&&Ve(e,i,g=>[...g,...a]);const u=[...t,"pageInfo"];return Ve(e,u,Ee(r,u)),e},Io=e=>{const r=ft(e);return async(t,n={})=>{let s={};for await(const i of r(t,n))s=Lo(s,i);return s}};function jo(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Io(e),{iterator:ft(e)})})}}const qo="13.2.6",xo={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var $o=xo;const ee=new Map;for(const[e,r]of Object.entries($o))for(const[t,n]of Object.entries(r)){const[s,i,a]=n,[u,g]=s.split(/ /),f=Object.assign({method:u,url:g},i);ee.has(e)||ee.set(e,new Map),ee.get(e).set(t,{scope:e,methodName:t,endpointDefaults:f,decorations:a})}const No={has({scope:e},r){return ee.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...ee.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},n){if(t[n])return t[n];const s=ee.get(r).get(n);if(!s)return;const{endpointDefaults:i,decorations:a}=s;return a?t[n]=Ho(e,r,n,i,a):t[n]=e.request.defaults(i),t[n]}};function Bo(e){const r={};for(const t of ee.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},No);return r}function Ho(e,r,t,n,s){const i=e.request.defaults(n);function a(...u){let g=i.endpoint.merge(...u);if(s.mapToData)return g=Object.assign({},g,{data:g[s.mapToData],[s.mapToData]:void 0}),i(g);if(s.renamed){const[f,h]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${f}.${h}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const f=i.endpoint.merge(...u);for(const[h,v]of Object.entries(s.renamedParameters))h in f&&(e.log.warn(`"${h}" parameter is deprecated for "octokit.${r}.${t}()". Use "${v}" instead`),v in f||(f[v]=f[h]),delete f[h]);return i(f)}return i(...u)}return Object.assign(a,i)}function Et(e){return{rest:Bo(e)}}Et.VERSION=qo;var Re={exports:{}},Wo=Re.exports,Br;function Mo(){return Br||(Br=1,function(e,r){(function(t,n){e.exports=n()})(Wo,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Ir<"u"?Ir:typeof self<"u"?self:{};function n(w){return w&&w.default||w}var s=function(w,c,o={}){var l,p,d;for(l in c)d=c[l],o[l]=(p=w[l])!=null?p:d;return o},i=function(w,c,o={}){var l,p;for(l in w)p=w[l],c[l]!==void 0&&(o[l]=p);return o},a={load:s,overwrite:i},u;u=class{constructor(c,o){this.incr=c,this.decr=o,this._first=null,this._last=null,this.length=0}push(c){var o;this.length++,typeof this.incr=="function"&&this.incr(),o={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=o,this._last=o):this._first=this._last=o}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,o,l;for(c=this._first,l=[];c!=null;)l.push((o=c,c=c.next,o.value));return l}forEachShift(c){var o;for(o=this.shift();o!=null;)c(o),o=this.shift()}debug(){var c,o,l,p,d;for(c=this._first,d=[];c!=null;)d.push((o=c,c=c.next,{value:o.value,prev:(l=o.prev)!=null?l.value:void 0,next:(p=o.next)!=null?p.value:void 0}));return d}};var g=u,f;f=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(o,l)=>this._addListener(o,"many",l),this.instance.once=(o,l)=>this._addListener(o,"once",l),this.instance.removeAllListeners=(o=null)=>o!=null?delete this._events[o]:this._events={}}_addListener(c,o,l){var p;return(p=this._events)[c]==null&&(p[c]=[]),this._events[c].push({cb:l,status:o}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}async trigger(c,...o){var l,p;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,o),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(d){return d.status!=="none"}),p=this._events[c].map(async d=>{var m,T;if(d.status!=="none"){d.status==="once"&&(d.status="none");try{return T=typeof d.cb=="function"?d.cb(...o):void 0,typeof(T!=null?T.then:void 0)=="function"?await T:T}catch(C){return m=C,this.trigger("error",m),null}}}),(await Promise.all(p)).find(function(d){return d!=null}))}catch(d){return l=d,this.trigger("error",l),null}}};var h=f,v,E,_;v=g,E=h,_=class{constructor(c){this.Events=new E(this),this._length=0,this._lists=(function(){var o,l,p;for(p=[],o=1,l=c;1<=l?o<=l:o>=l;1<=l?++o:--o)p.push(new v(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(o){return o.forEachShift(c)})}getFirst(c=this._lists){var o,l,p;for(o=0,l=c.length;o<l;o++)if(p=c[o],p.length>0)return p;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var y=_,G;G=class extends Error{};var b=G,k,R,F,O,A;O=10,R=5,A=a,k=b,F=class{constructor(c,o,l,p,d,m,T,C){this.task=c,this.args=o,this.rejectOnDrop=d,this.Events=m,this._states=T,this.Promise=C,this.options=A.load(l,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((I,j)=>{this._resolve=I,this._reject=j}),this.retryCount=0}_sanitizePriority(c){var o;return o=~~c!==c?R:c,o<0?0:o>O-1?O-1:o}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:o="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new k(o)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var o;if(o=this._states.jobStatus(this.options.id),!(o===c||c==="DONE"&&o===null))throw new k(`Invalid job status ${o}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,o){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:o})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(c,o,l,p){var d,m,T;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),m={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",m);try{if(T=await(c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args)),o())return this.doDone(m),await p(this.options,m),this._assertStatus("DONE"),this._resolve(T)}catch(C){return d=C,this._onFailure(d,m,o,l,p)}}doExpire(c,o,l){var p,d;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},p=new k(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,d,c,o,l)}async _onFailure(c,o,l,p,d){var m,T;if(l())return m=await this.Events.trigger("failed",c,o),m!=null?(T=~~m,this.Events.trigger("retry",`Retrying ${this.options.id} after ${T} ms`,o),this.retryCount++,p(T)):(this.doDone(o),await d(this.options,o),this._assertStatus("DONE"),this._reject(c))}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var S=F,N,D,q;q=a,N=b,D=class{constructor(c,o,l){this.instance=c,this.storeOptions=o,this.clientId=this.instance._randomIndex(),q.load(l,l,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var o,l,p,d,m;if(d=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&d>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=d,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&d>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:o,reservoirIncreaseMaximum:p,reservoir:m}=this.storeOptions,this._lastReservoirIncrease=d,l=p!=null?Math.min(o,p-m):o,l>0))return this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}async __publish__(c){return await this.yieldLoop(),this.instance.Events.trigger("message",c.toString())}async __disconnect__(c){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(c=0){return new this.Promise(function(o,l){return setTimeout(o,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}async __updateSettings__(c){return await this.yieldLoop(),q.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(c){return await this.yieldLoop(),this._nextRequest+this.timeout<c}computeCapacity(){var c,o;return{maxConcurrent:c,reservoir:o}=this.storeOptions,c!=null&&o!=null?Math.min(c-this._running,o):c!=null?c-this._running:o??null}conditionsCheck(c){var o;return o=this.computeCapacity(),o==null||c<=o}async __incrementReservoir__(c){var o;return await this.yieldLoop(),o=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),o}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(c){return this._unblockTime>=c}check(c,o){return this.conditionsCheck(c)&&this._nextRequest-o<=0}async __check__(c){var o;return await this.yieldLoop(),o=Date.now(),this.check(c,o)}async __register__(c,o,l){var p,d;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(o)?(this._running+=o,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=o),d=Math.max(this._nextRequest-p,0),this._nextRequest=p+d+this.storeOptions.minTime,{success:!0,wait:d,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(c,o){var l,p,d;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&o>this.storeOptions.maxConcurrent)throw new N(`Impossible to add a job having a weight of ${o} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),d=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(o,p),l=this.strategyIsBlock()&&(d||this.isBlocked(p)),l&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:d,blocked:l,strategy:this.storeOptions.strategy}}async __free__(c,o){return await this.yieldLoop(),this._running-=o,this._done+=o,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var Y=D,B,H;B=b,H=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var o,l;if(o=this._jobs[c],l=o+1,o!=null&&l<this.status.length)return this.counts[o]--,this.counts[l]++,this._jobs[c]++;if(o!=null)return this.counts[o]--,delete this._jobs[c]}start(c){var o;return o=0,this._jobs[c]=o,this.counts[o]++}remove(c){var o;return o=this._jobs[c],o!=null&&(this.counts[o]--,delete this._jobs[c]),o!=null}jobStatus(c){var o;return(o=this.status[this._jobs[c]])!=null?o:null}statusJobs(c){var o,l,p,d,m;if(c!=null){if(l=this.status.indexOf(c),l<0)throw new B(`status must be one of ${this.status.join(", ")}`);p=this._jobs,d=[];for(o in p)m=p[o],m===l&&d.push(o);return d}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,o,l)=>(c[this.status[l]]=o,c),{})}};var te=H,X,ce;X=g,ce=class{constructor(c,o){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=o,this._running=0,this._queue=new X}isEmpty(){return this._queue.length===0}async _tryToRun(){var c,o,l,p,d,m,T;if(this._running<1&&this._queue.length>0)return this._running++,{task:T,args:c,resolve:d,reject:p}=this._queue.shift(),o=await async function(){try{return m=await T(...c),function(){return d(m)}}catch(C){return l=C,function(){return p(l)}}}(),this._running--,this._tryToRun(),o()}schedule(c,...o){var l,p,d;return d=p=null,l=new this.Promise(function(m,T){return d=m,p=T}),this._queue.push({task:c,args:o,resolve:d,reject:p}),this._tryToRun(),l}};var we=ce,le="2.19.5",ye={version:le},yt=Object.freeze({version:le,default:ye}),nr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),ir=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),kt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),ar,cr,lr,ur,pr,ke;ke=a,ar=h,ur=nr,lr=ir,pr=kt,cr=(function(){class w{constructor(o={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=o,ke.load(this.limiterOptions,this.defaults,this),this.Events=new ar(this),this.instances={},this.Bottleneck=wr,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new ur(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new lr(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(o=""){var l;return(l=this.instances[o])!=null?l:(()=>{var p;return p=this.instances[o]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${o}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,o),p})()}async deleteKey(o=""){var l,p;return p=this.instances[o],this.connection&&(l=await this.connection.__runCommand__(["del",...pr.allKeys(`${this.id}-${o}`)])),p!=null&&(delete this.instances[o],await p.disconnect()),p!=null||l>0}limiters(){var o,l,p,d;l=this.instances,p=[];for(o in l)d=l[o],p.push({key:o,limiter:d});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var o,l,p,d,m,T,C,I,j;if(this.connection==null)return this.Promise.resolve(this.keys());for(T=[],o=null,j=`b_${this.id}-`.length,l=9;o!==0;)for([I,p]=await this.connection.__runCommand__(["scan",o??0,"match",`b_${this.id}-*_settings`,"count",1e4]),o=~~I,d=0,C=p.length;d<C;d++)m=p[d],T.push(m.slice(j,-l));return T}_startAutoCleanup(){var o;return clearInterval(this.interval),typeof(o=this.interval=setInterval(async()=>{var l,p,d,m,T,C;T=Date.now(),d=this.instances,m=[];for(p in d){C=d[p];try{await C._store.__groupCheck__(T)?m.push(this.deleteKey(p)):m.push(void 0)}catch(I){l=I,m.push(C.Events.trigger("error",l))}}return m},this.timeout/2)).unref=="function"?o.unref():void 0}updateSettings(o={}){if(ke.overwrite(o,this.defaults,this),ke.overwrite(o,o,this.limiterOptions),o.timeout!=null)return this._startAutoCleanup()}disconnect(o=!0){var l;if(!this.sharedConnection)return(l=this.connection)!=null?l.disconnect(o):void 0}}return w.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},w}).call(t);var Pt=cr,dr,gr,hr;hr=a,gr=h,dr=(function(){class w{constructor(o={}){this.options=o,hr.load(this.options,this.defaults,this),this.Events=new gr(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((o,l)=>this._resolve=o)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(o){var l;return this._arr.push(o),l=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),l}}return w.prototype.defaults={maxTime:null,maxSize:null,Promise},w}).call(t);var Gt=dr,Ot=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Rt=n(yt),mr,_r,Ce,Ue,fr,De,Er,Tr,vr,Le,M,br=[].splice;De=10,_r=5,M=a,Er=y,Ue=S,fr=Y,Tr=Ot,Ce=h,vr=te,Le=we,mr=(function(){class w{constructor(o={},...l){var p,d;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(o,l),M.load(o,this.instanceDefaults,this),this._queues=new Er(De),this._scheduled={},this._states=new vr(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new Ce(this),this._submitLock=new Le("submit",this.Promise),this._registerLock=new Le("register",this.Promise),d=M.load(o,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=M.load(o,this.redisStoreDefaults,{}),new Tr(this,d,p);if(this.datastore==="local")return p=M.load(o,this.localStoreDefaults,{}),new fr(this,d,p);throw new w.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.ref=="function"?m.ref():void 0}),this._queues.on("zero",()=>{var m;return(m=this._store.heartbeat)!=null&&typeof m.unref=="function"?m.unref():void 0})}_validateOptions(o,l){if(!(o!=null&&typeof o=="object"&&l.length===0))throw new w.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(o){return this._store.__publish__(o)}disconnect(o=!0){return this._store.__disconnect__(o)}chain(o){return this._limiter=o,this}queued(o){return this._queues.queued(o)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(o){return this._states.jobStatus(o)}jobs(o){return this._states.statusJobs(o)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(o=1){return this._store.__check__(o)}_clearGlobalState(o){return this._scheduled[o]!=null?(clearTimeout(this._scheduled[o].expiration),delete this._scheduled[o],!0):!1}async _free(o,l,p,d){var m,T;try{if({running:T}=await this._store.__free__(o,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,d),T===0&&this.empty())return this.Events.trigger("idle")}catch(C){return m=C,this.Events.trigger("error",m)}}_run(o,l,p){var d,m,T;return l.doRun(),d=this._clearGlobalState.bind(this,o),T=this._run.bind(this,o,l),m=this._free.bind(this,o,l),this._scheduled[o]={timeout:setTimeout(()=>l.doExecute(this._limiter,d,T,m),p),expiration:l.options.expiration!=null?setTimeout(function(){return l.doExpire(d,T,m)},p+l.options.expiration):void 0,job:l}}_drainOne(o){return this._registerLock.schedule(()=>{var l,p,d,m,T;return this.queued()===0?this.Promise.resolve(null):(T=this._queues.getFirst(),{options:m,args:l}=d=T.first(),o!=null&&m.weight>o?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${m.id}`,{args:l,options:m}),p=this._randomIndex(),this._store.__register__(p,m.weight,m.expiration).then(({success:C,wait:I,reservoir:j})=>{var ue;return this.Events.trigger("debug",`Drained ${m.id}`,{success:C,args:l,options:m}),C?(T.shift(),ue=this.empty(),ue&&this.Events.trigger("empty"),j===0&&this.Events.trigger("depleted",ue),this._run(p,d,I),this.Promise.resolve(m.weight)):this.Promise.resolve(null)})))})}_drainAll(o,l=0){return this._drainOne(o).then(p=>{var d;return p!=null?(d=o!=null?o-p:o,this._drainAll(d,l+p)):this.Promise.resolve(l)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(o){return this._queues.shiftAll(function(l){return l.doDrop({message:o})})}stop(o={}){var l,p;return o=M.load(o,this.stopDefaults),p=d=>{var m;return m=()=>{var T;return T=this._states.counts,T[0]+T[1]+T[2]+T[3]===d},new this.Promise((T,C)=>m()?T():this.on("done",()=>{if(m())return this.removeAllListeners("done"),T()}))},l=o.dropWaitingJobs?(this._run=function(d,m){return m.doDrop({message:o.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var d,m,T;m=this._scheduled;for(d in m)T=m[d],this.jobStatus(T.job.options.id)==="RUNNING"&&(clearTimeout(T.timeout),clearTimeout(T.expiration),T.job.doDrop({message:o.dropErrorMessage}));return this._dropAllQueued(o.dropErrorMessage),p(0)}))):this.schedule({priority:De-1,weight:0},()=>p(1)),this._receive=function(d){return d._reject(new w.prototype.BottleneckError(o.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new w.prototype.BottleneckError("stop() has already been called")),l}async _addToQueue(o){var l,p,d,m,T,C,I;({args:l,options:m}=o);try{({reachedHWM:T,blocked:p,strategy:I}=await this._store.__submit__(this.queued(),m.weight))}catch(j){return d=j,this.Events.trigger("debug",`Could not queue ${m.id}`,{args:l,options:m,error:d}),o.doDrop({error:d}),!1}return p?(o.doDrop(),!0):T&&(C=I===w.prototype.strategy.LEAK?this._queues.shiftLastFrom(m.priority):I===w.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(m.priority+1):I===w.prototype.strategy.OVERFLOW?o:void 0,C!=null&&C.doDrop(),C==null||I===w.prototype.strategy.OVERFLOW)?(C==null&&o.doDrop(),T):(o.doQueue(T,p),this._queues.push(o),await this._drainAll(),T)}_receive(o){return this._states.jobStatus(o.options.id)!=null?(o._reject(new w.prototype.BottleneckError(`A job with the same id already exists (id=${o.options.id})`)),!1):(o.doReceive(),this._submitLock.schedule(this._addToQueue,o))}submit(...o){var l,p,d,m,T,C,I;return typeof o[0]=="function"?(T=o,[p,...o]=T,[l]=br.call(o,-1),m=M.load({},this.jobDefaults)):(C=o,[m,p,...o]=C,[l]=br.call(o,-1),m=M.load(m,this.jobDefaults)),I=(...j)=>new this.Promise(function(ue,St){return p(...j,function(...yr){return(yr[0]!=null?St:ue)(yr)})}),d=new Ue(I,o,m,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),d.promise.then(function(j){return typeof l=="function"?l(...j):void 0}).catch(function(j){return Array.isArray(j)?typeof l=="function"?l(...j):void 0:typeof l=="function"?l(j):void 0}),this._receive(d)}schedule(...o){var l,p,d;return typeof o[0]=="function"?([d,...o]=o,p={}):[p,d,...o]=o,l=new Ue(d,o,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(l),l.promise}wrap(o){var l,p;return l=this.schedule.bind(this),p=function(...d){return l(o.bind(this),...d)},p.withOptions=function(d,...m){return l(d,o,...m)},p}async updateSettings(o={}){return await this._store.__updateSettings__(M.overwrite(o,this.storeDefaults)),M.overwrite(o,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(o=0){return this._store.__incrementReservoir__(o)}}return w.default=w,w.Events=Ce,w.version=w.prototype.version=Rt.version,w.strategy=w.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},w.BottleneckError=w.prototype.BottleneckError=b,w.Group=w.prototype.Group=Pt,w.RedisConnection=w.prototype.RedisConnection=nr,w.IORedisConnection=w.prototype.IORedisConnection=ir,w.Batcher=w.prototype.Batcher=Gt,w.prototype.jobDefaults={priority:_r,weight:1,expiration:null,id:"<no-id>"},w.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:w.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},w.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},w.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},w.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},w.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},w}).call(t);var wr=mr,At=wr;return At})}(Re)),Re.exports}var Vo=Mo();const Tt=ro(Vo);var zo="0.0.0-development";async function vt(e,r,t,n){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const s=n.request.retries!=null?n.request.retries:e.retries,i=Math.pow((n.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,s,i)}throw t}async function Ko(e,r,t,n){const s=new Tt;return s.on("failed",function(i,a){const u=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(n.request.retryCount=a.retryCount+1,u>a.retryCount)return g*e.retryAfterBaseValue}),s.schedule(Jo.bind(null,e,r,t),n)}async function Jo(e,r,t,n){const s=await t(t,n);if(s.data&&s.data.errors&&s.data.errors.length>0&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new he(s.data.errors[0].message,500,{request:n,response:s});return vt(e,r,i,n)}return s}function bt(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",vt.bind(null,t,e)),e.hook.wrap("request",Ko.bind(null,t,e))),{retry:{retryRequest:(n,s,i)=>(n.request.request=Object.assign({},n.request.request,{retries:s,retryAfter:i}),n)}}}bt.VERSION=zo;var Qo="0.0.0-development",ze=()=>Promise.resolve();function Yo(e,r,t){return e.retryLimiter.schedule(Xo,e,r,t)}async function Xo(e,r,t){const n=t.method!=="GET"&&t.method!=="HEAD",{pathname:s}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&s.startsWith("/search/"),a=s.startsWith("/graphql"),g=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(n||a)&&await e.write.key(e.id).schedule(g,ze),n&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(g,ze),i&&await e.search.key(e.id).schedule(g,ze);const f=e.global.key(e.id).schedule(g,r,t);if(a){const h=await f;if(h.data.errors!=null&&h.data.errors.some(v=>v.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:h,data:h.data})}return f}var Zo=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function en(e){const t=`^(?:${e.map(n=>n.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(n=>`(?:${n})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var Hr=en(Zo),wt=Hr.test.bind(Hr),ae={},rn=function(e,r){ae.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),ae.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),ae.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),ae.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function or(e,r){const{enabled:t=!0,Bottleneck:n=Tt,id:s="no-id",timeout:i=1e3*60*2,connection:a}=r.throttle||{};if(!t)return{};const u={timeout:i};typeof a<"u"&&(u.connection=a),ae.global==null&&rn(n,u);const g=Object.assign({clustering:a!=null,triggersNotification:wt,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new n,id:s,...ae},r.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const f={},h=new n.Events(f);return f.on("secondary-limit",g.onSecondaryRateLimit),f.on("rate-limit",g.onRateLimit),f.on("error",v=>e.log.warn("Error in throttling-plugin limit handler",v)),g.retryLimiter.on("failed",async function(v,E){const[_,y,G]=E.args,{pathname:b}=new URL(G.url,"http://github.test");if(!(b.startsWith("/graphql")&&v.status!==401||v.status===403||v.status===429))return;const R=~~y.retryCount;y.retryCount=R,G.request.retryCount=R;const{wantRetry:F,retryAfter:O=0}=await async function(){var A;if(/\bsecondary rate\b/i.test(v.message)){const S=Number(v.response.headers["retry-after"])||_.fallbackSecondaryRateRetryAfter;return{wantRetry:await h.trigger("secondary-limit",S,G,e,R),retryAfter:S}}if(v.response.headers!=null&&v.response.headers["x-ratelimit-remaining"]==="0"||(((A=v.response.data)==null?void 0:A.errors)??[]).some(S=>S.type==="RATE_LIMITED")){const S=new Date(~~v.response.headers["x-ratelimit-reset"]*1e3).getTime(),N=Math.max(Math.ceil((S-Date.now())/1e3)+1,0);return{wantRetry:await h.trigger("rate-limit",N,G,e,R),retryAfter:N}}return{}}();if(F)return y.retryCount++,O*_.retryAfterBaseValue}),e.hook.wrap("request",Yo.bind(null,g)),{}}or.VERSION=Qo;or.triggersNotification=wt;var tn="0.0.0-development",sn=Po.plugin(Et,gt,jo,bt,or).defaults({userAgent:`octokit.js/${tn}`,throttle:{onRateLimit:on,onSecondaryRateLimit:nn}});function on(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function nn(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function an(e){const r=new sn({auth:e}),t=re({user:null,trades:[]});return Ae(()=>{Fr.getUser(r).then(n=>{t.user=n})}),Ae(()=>{var n;t.user!=null&&Fr.getTrades(r,(n=t.user)==null?void 0:n.login).then(s=>{t.trades=s})}),t}function Wr(e,r){const t=re({value:r});return t.value=localStorage[e]?JSON.parse(localStorage[e]):r,Ae(()=>{t.value&&(localStorage[e]=JSON.stringify(t.value))}),t}const cn=()=>{};var ln=Q('<header class="flex-row align-items-center gap-1 svelte-12lw3kz"><h1 class="flexible svelte-12lw3kz">Trading journal v5</h1> <input placeholder="Git personal access token" class="svelte-12lw3kz"> <button class="svelte-12lw3kz">Add trade</button></header> <div class="containerTable overflow-auto svelte-12lw3kz"><!></div> <!>',1);function Pn(e,r){ve(r,!0);const t=Wr("personalAccessToken",""),n=Wr("trades",[]),s=Te(()=>an(t.value)),i=Te(()=>[...n.value,...P(s).trades]);let a=ne(void 0),u=ne(-1);const g=k=>{},f=k=>{var R;Z(u,re(P(i).indexOf(k))),(R=P(a))==null||R.show(k,F=>{Z(u,-1)})};is(()=>{const k=R=>{if(P(u)!=-1){if(R.code=="ArrowLeft"){const F=P(i)[P(u)-1];F&&f(F)}else if(R.code=="ArrowRight"){const F=P(i)[P(u)+1];F&&f(F)}}};window.addEventListener("keydown",k)});var h=ln(),v=me(h),E=U(J(v),2);rt(E);var _=U(E,2);_.__click=[cn],V(v);var y=U(v,2),G=J(y);Ls(G,{get trades(){return P(i)},onchange:g,ondblclick:f}),V(y);var b=U(y,2);Xr(Us(b,{}),k=>Z(a,re(k)),()=>P(a)),Ke(E,()=>t.value,k=>t.value=k),$(e,h),be()}er(["click"]);export{Pn as component};
