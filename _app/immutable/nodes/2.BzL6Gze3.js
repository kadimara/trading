var Qt=Object.defineProperty;var qr=e=>{throw TypeError(e)};var Yt=(e,r,t)=>r in e?Qt(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var j=(e,r,t)=>Yt(e,typeof r!="symbol"?r+"":r,t),jr=(e,r,t)=>r.has(e)||qr("Cannot "+t);var se=(e,r,t)=>(jr(e,r,"read from private field"),t?t.call(e):r.get(e)),be=(e,r,t)=>r.has(e)?qr("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(e):r.set(e,t),xr=(e,r,t,o)=>(jr(e,r,"write to private field"),o?o.call(e,t):r.set(e,t),t);import{a as $,t as re,c as Le,b as We}from"../chunks/disclose-version.B2YsInEj.js";import{R as nt,Q as sr,J as Xt,h as W,a as it,as as at,at as Zt,au as es,b as ct,p as lt,e as lr,f as he,U as rs,D as ts,s as Ve,aq as ut,H as ss,r as $r,c as ze,av as Ie,d as pt,G as Nr,aw as Br,ax as os,af as ns,ay as is,g as as,F as cs,an as ls,ah as us,X as ps,az as ur,aA as pr,aa as ds,L as Mr,aB as dt,aC as gs,aD as hs,al as ms,aE as fs,aF as _s,aG as Es,t as Ts,W as vs,V as gt,i as Fe,o as dr,k as Ce,x as d,N as K,l as ee,j as ne,m as Q,ae as Z,z as J,C as D,B as Y}from"../chunks/runtime.wqO5prKb.js";import{d as bs,i as ws,e as ys,f as gr,g as ks,n as Ps,j as Gs,l as ht,k as mt,r as Os,a as me}from"../chunks/store.BhhFCFwK.js";import{i as Rs,o as As,b as ft,a as ue,p as fe,r as Ss}from"../chunks/index-client.Dww3RwYt.js";import{i as _e}from"../chunks/if.5AnpVcbM.js";const Fs=[];function _t(e,r=!1){return qe(e,new Map,"",Fs)}function qe(e,r,t,o,s=null){if(typeof e=="object"&&e!==null){const a=r.get(e);if(a!==void 0)return a;if(e instanceof Map)return new Map(e);if(e instanceof Set)return new Set(e);if(nt(e)){const c=[];r.set(e,c),s!==null&&r.set(s,c);for(let g=0;g<e.length;g+=1)c.push(qe(e[g],r,t,o));return c}if(sr(e)===Xt){const c={};r.set(e,c),s!==null&&r.set(s,c);for(var i in e)c[i]=qe(e[i],r,t,o);return c}if(e instanceof Date)return structuredClone(e);if(typeof e.toJSON=="function")return qe(e.toJSON(),r,t,o,e)}if(e instanceof EventTarget)return e;try{return structuredClone(e)}catch{return e}}function Cs(e,r,t){W&&it();var o=e,s=rs,i,a=at()?Zt:es;ct(()=>{a(s,s=r())&&(i&&lt(i),i=lr(()=>t(o)))}),W&&(o=he)}function Et(e,r){return r}function Us(e,r,t,o){for(var s=[],i=r.length,a=0;a<i;a++)os(r[a].e,s,!0);var c=i>0&&s.length===0&&t!==null;if(c){var g=t.parentNode;ns(g),g.append(t),o.clear(),ie(e,r[0].prev,r[i-1].next)}is(s,()=>{for(var _=0;_<i;_++){var E=r[_];c||(o.delete(E.k),ie(e,E.prev,E.next)),as(E.e,!c)}})}function or(e,r,t,o,s,i=null){var a=e,c={flags:r,items:new Map,first:null},g=(r&dt)!==0;if(g){var _=e;a=W?Ve(cs(_)):_.appendChild(ts())}W&&it();var E=null,k=!1;ct(()=>{var v=t(),b=nt(v)?v:v==null?[]:ut(v),R=b.length;if(k&&R===0)return;k=R===0;let O=!1;if(W){var m=a.data===ss;m!==(R===0)&&(a=$r(),Ve(a),ze(!1),O=!0)}if(W){for(var T=null,A,S=0;S<R;S++){if(he.nodeType===8&&he.data===ls){a=he,O=!0,ze(!1);break}var w=b[S],P=o(w,S);A=Tt(he,c,T,null,w,P,S,s,r),c.items.set(P,A),T=A}R>0&&Ve($r())}if(!W){var U=us;Ds(b,c,a,s,r,(U.f&Ie)!==0,o)}i!==null&&(R===0?E?pt(E):E=lr(()=>i(a)):E!==null&&lt(E,()=>{E=null})),O&&ze(!0),t()}),W&&(a=he)}function Ds(e,r,t,o,s,i,a){var z,ae,oe,X;var c=(s&gs)!==0,g=(s&(ur|pr))!==0,_=e.length,E=r.items,k=r.first,v=k,b,R=null,O,m=[],T=[],A,S,w,P;if(c)for(P=0;P<_;P+=1)A=e[P],S=a(A,P),w=E.get(S),w!==void 0&&((z=w.a)==null||z.measure(),(O??(O=new Set)).add(w));for(P=0;P<_;P+=1){if(A=e[P],S=a(A,P),w=E.get(S),w===void 0){var U=v?v.e.nodes_start:t;R=Tt(U,r,R,R===null?r.first:R.next,A,S,P,o,s),E.set(S,R),m=[],T=[],v=R.next;continue}if(g&&Ls(w,A,P,s),w.e.f&Ie&&(pt(w.e),c&&((ae=w.a)==null||ae.unfix(),(O??(O=new Set)).delete(w))),w!==v){if(b!==void 0&&b.has(w)){if(m.length<T.length){var I=T[0],L;R=I.prev;var q=m[0],F=m[m.length-1];for(L=0;L<m.length;L+=1)Hr(m[L],I,t);for(L=0;L<T.length;L+=1)b.delete(T[L]);ie(r,q.prev,F.next),ie(r,R,q),ie(r,F,I),v=I,R=F,P-=1,m=[],T=[]}else b.delete(w),Hr(w,v,t),ie(r,w.prev,w.next),ie(r,w,R===null?r.first:R.next),ie(r,R,w),R=w;continue}for(m=[],T=[];v!==null&&v.k!==S;)(i||!(v.e.f&Ie))&&(b??(b=new Set)).add(v),T.push(v),v=v.next;if(v===null)continue;w=v}m.push(w),R=w,v=w.next}if(v!==null||b!==void 0){for(var x=b===void 0?[]:ut(b);v!==null;)(i||!(v.e.f&Ie))&&x.push(v),v=v.next;var V=x.length;if(V>0){var B=s&dt&&_===0?t:null;if(c){for(P=0;P<V;P+=1)(oe=x[P].a)==null||oe.measure();for(P=0;P<V;P+=1)(X=x[P].a)==null||X.fix()}Us(r,x,B,E)}}c&&ps(()=>{var ce;if(O!==void 0)for(w of O)(ce=w.a)==null||ce.apply()}),Nr.first=r.first&&r.first.e,Nr.last=R&&R.e}function Ls(e,r,t,o){o&ur&&Br(e.v,r),o&pr?Br(e.i,t):e.i=t}function Tt(e,r,t,o,s,i,a,c,g){var _=(g&ur)!==0,E=(g&hs)===0,k=_?E?ds(s):Mr(s):s,v=g&pr?Mr(a):a,b={i:v,v:k,k:i,a:null,e:null,prev:t,next:o};try{return b.e=lr(()=>c(e,k,v),W),b.e.prev=t&&t.e,b.e.next=o&&o.e,t===null?r.first=b:(t.next=b,t.e.next=b.e),o!==null&&(o.prev=b,o.e.prev=b.e),b}finally{}}function Hr(e,r,t){for(var o=e.next?e.next.e.nodes_start:t,s=r?r.e.nodes_start:t,i=e.e.nodes_start;i!==o;){var a=ms(i);s.before(i),i=a}}function ie(e,r,t){r===null?e.first=t:(r.next=t,r.e.next=t&&t.e),t!==null&&(t.prev=r,t.e.prev=r&&r.e)}function vt(e){if(W){var r=!1,t=()=>{if(!r){if(r=!0,e.hasAttribute("value")){var o=e.value;Oe(e,"value",null),e.value=o}if(e.hasAttribute("checked")){var s=e.checked;Oe(e,"checked",null),e.checked=s}}};e.__on_r=t,fs(t),bs()}}function Oe(e,r,t,o){var s=e.__attributes??(e.__attributes={});W&&(s[r]=e.getAttribute(r),r==="src"||r==="srcset"||r==="href"&&e.nodeName==="LINK")||s[r]!==(s[r]=t)&&(r==="style"&&"__styles"in e&&(e.__styles={}),r==="loading"&&(e[_s]=t),t==null?e.removeAttribute(r):typeof t!="string"&&bt(e).includes(r)?e[r]=t:e.setAttribute(r,t))}function Is(e,r,t,o,s=!1,i=!1,a=!1){var c=r||{},g=e.tagName==="OPTION";for(var _ in r)_ in t||(t[_]=null);t.class=t.class?t.class+" "+o:o;var E=bt(e),k=e.__attributes??(e.__attributes={});for(const m in t){let T=t[m];if(g&&m==="value"&&T==null){e.value=e.__value="",c[m]=T;continue}var v=c[m];if(T!==v){c[m]=T;var b=m[0]+m[1];if(b!=="$$"){if(b==="on"){const A={},S="$$"+m;let w=m.slice(2);var R=Gs(w);if(ws(w)&&(w=w.slice(0,-7),A.capture=!0),!R&&v){if(T!=null)continue;e.removeEventListener(w,c[S],A),c[S]=null}if(T!=null)if(R)e[`__${w}`]=T,gr([w]);else{let P=function(U){c[m].call(this,U)};c[S]=ys(w,e,P,A)}else R&&(e[`__${w}`]=void 0)}else if(m==="style"&&T!=null)e.style.cssText=T+"";else if(m==="autofocus")ks(e,!!T);else if(m==="__value"||m==="value"&&T!=null)e.value=e[m]=e.__value=T;else{var O=m;s||(O=Ps(O)),T==null&&!i?(k[m]=null,e.removeAttribute(m)):E.includes(O)&&(i||typeof T!="string")?e[O]=T:typeof T!="function"&&(W&&(O==="src"||O==="href"||O==="srcset")||Oe(e,O,T))}m==="style"&&"__styles"in e&&(e.__styles={})}}}return c}var Wr=new Map;function bt(e){var r=Wr.get(e.nodeName);if(r)return r;Wr.set(e.nodeName,r=[]);for(var t,o=sr(e),s=Element.prototype;s!==o;){t=Es(o);for(var i in t)t[i].set&&r.push(i);o=sr(o)}return r}function qs(e,r){var t=e.__className,o=js(r);W&&e.className===o?e.__className=o:(t!==o||W&&e.className!==o)&&(r==null?e.removeAttribute("class"):e.className=o,e.__className=o)}function js(e){return e??""}function nr(e,r,t=r){var o=at();ht(e,"input",s=>{var i=s?e.defaultValue:e.value;i=Ke(e)?Je(i):i,t(i),o&&i!==(i=r())&&(e.value=i??"")}),(W&&e.defaultValue!==e.value||Ts(r)==null&&e.value)&&t(Ke(e)?Je(e.value):e.value),vs(()=>{var s=r();Ke(e)&&s===Je(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function Ke(e){var r=e.type;return r==="number"||r==="range"}function Je(e){return e===""?null:+e}function wt(e,r,t){if(e.multiple)return Ns(e,r);for(var o of e.options){var s=ke(o);if(Rs(s,r)){o.selected=!0;return}}(!t||r!==void 0)&&(e.selectedIndex=-1)}function xs(e,r){gt(()=>{var t=new MutationObserver(()=>{var o=e.__value;wt(e,o)});return t.observe(e,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),()=>{t.disconnect()}})}function $s(e,r,t=r){var o=!0;ht(e,"change",s=>{var i=s?"[selected]":":checked",a;if(e.multiple)a=[].map.call(e.querySelectorAll(i),ke);else{var c=e.querySelector(i)??e.querySelector("option:not([disabled])");a=c&&ke(c)}t(a)}),gt(()=>{var s=r();if(wt(e,s,o),o&&s===void 0){var i=e.querySelector(":checked");i!==null&&(s=ke(i),t(s))}e.__value=s,o=!1}),xs(e)}function Ns(e,r){for(var t of e.options)t.selected=~r.indexOf(ke(t))}function ke(e){return"__value"in e?e.__value:e.value}const Bs=5e-4,Ms=["created","open","closed","canceled"],Hs=["btc","eth","ada"],Ws=["1min","3min","5min","15min"];function yt(){return{status:"created",date:Date.now(),report:"",note:"",symbol:"btc",timeFrame:"3min",longShort:"long",risk:0,riskRewardRatio:"",account:0,amount:0,entry:0,takeProfit:0,stopLoss:0,pnl:0,taker:Bs,maker:0}}function Vs(e,r,t,o){if(!o||!t)return 0;const s=Math.abs(o/t-1);return kt(r/e*s,4)}function zs(e,r){return r<e?"long":"short"}function Ks(e,r,t,o){if(!r||!t||!o)return 0;const s=r-o/t*r;return kt(e=="long"?s*-1:s,2)}function Js(e,r,t){const o=Math.abs(e-t),s=Math.abs(e-r),i=Math.min(o,s),a=Math.round(o/i*10)/10,c=Math.round(s/i*10)/10;return a+" / "+c}function kt(e,r){return parseFloat(e.toFixed(r))}class Pe{static combineChanges(r,t){const o=[...t];for(const s of r){const i=o.findIndex(a=>a.date===s.date);i!==-1?o[i]={...o[i],...s}:o.push({...yt(),...s})}return o.sort((s,i)=>i.date-s.date)}static getChanges(r,t){var i;const o=[],s=new Map;for(const a of t)s.set(a.date.toString(),a);for(const a of r){const c=s.get((i=a.date)==null?void 0:i.toString());if(c){const g={};for(const _ in a)a[_]!==c[_]&&(g.date=a.date,g[_]=a[_]);Object.keys(g).length>0&&o.push(g)}else o.push(a)}return o}static getTotalPnl(r){return parseFloat(r.reduce((t,o)=>t+o.pnl,0).toFixed(2))}static isEditable(r){return(r==null?void 0:r.status)==="created"||(r==null?void 0:r.status)==="open"}}var Qs=re('<textarea placeholder="Describe how the trade went"></textarea> <input placeholder="https://www.tradingview.com/x/HEUPOgtN/">',1),Ys=re('<p> </p> <a target="_blank">https://www.tradingview.com/x/HEUPOgtN/</a>',1),Xs=re('<!> <img alt="Chart" class="svelte-1tbyhhq">',1),Zs=re('<dialog class="svelte-1tbyhhq"><div class="flex-column gap-1"><!></div></dialog>');function eo(e,r){Fe(r,!0);let t=Z(void 0),o=Z(void 0),s=Z([]),i=J(()=>Pe.isEditable(d(o))),a=Z(m=>{}),c=J(()=>d(o)==null||d(o).status=="closed"||d(o).status=="canceled"),g=Z("");dr(()=>{var S,w;const m=(S=d(o))==null?void 0:S.report.match(new RegExp("(?<=https:\\/\\/www.tradingview.com\\/x\\/)(.*)(?=\\/)","g")),T=m==null?void 0:m[0],A=(w=T==null?void 0:T[0])==null?void 0:w.toLowerCase();K(g,`https://s3.tradingview.com/snapshots/${A}/${T}.png`)});const _=()=>{var m;d(a)(d(o)),(m=d(t))==null||m.close()},E=(m,T,A)=>{var S;K(o,ue(m)),K(s,T),K(a,ue(A)),(S=d(t))==null||S.showModal()},k=m=>{if(!d(i)&&(m.code=="ArrowLeft"||m.code=="ArrowRight")){const T=d(s).findIndex(w=>{var P;return((P=d(o))==null?void 0:P.date)==w.date}),A=m.code=="ArrowLeft"?-1:1,S=Math.min(Math.max(T+A,0),d(s).length-1);K(o,ue(d(s)[S]))}};As(()=>{var m;(m=d(t))==null||m.addEventListener("keydown",k)});var v=Zs(),b=ee(v),R=ee(b);{var O=m=>{var T=Le(),A=ne(T);Cs(A,()=>{var S;return(S=d(o))==null?void 0:S.date},S=>{var w=Xs(),P=ne(w);{var U=q=>{var F=Qs(),x=ne(F);Os(x);var V=D(x,2);vt(V),Y(()=>{x.disabled=d(c),V.disabled=d(c)}),nr(x,()=>d(o).note,B=>d(o).note=B),nr(V,()=>d(o).report,B=>d(o).report=B),$(q,F)},I=q=>{var F=Ys(),x=ne(F),V=ee(x,!0);Q(x);var B=D(x,2);Y(()=>{me(V,d(o).note),Oe(B,"href",d(o).report)}),$(q,F)};_e(P,q=>{d(i)?q(U):q(I,!1)})}var L=D(P,2);Y(()=>Oe(L,"src",d(g))),$(S,w)}),$(m,T)};_e(R,m=>{d(o)&&m(O)})}return Q(b),Q(v),ft(v,m=>K(t,m),()=>d(t)),mt("close",v,_),$(e,v),Ce({show:E})}var ro=re("<option> </option>"),to=re('<select class="svelte-1lhzzgw"></select>'),so=re("<td><!></td>");function H(e,r){Fe(r,!0);let t=fe(r,"value",15),o=fe(r,"disabled",3,!0),s=fe(r,"options",19,()=>[]),i=fe(r,"color",3,""),a=Ss(r,["$$slots","$$events","$$legacy","value","type","disabled","options","color"]);const c=O=>{const m=O.currentTarget,T=document.createRange();T.selectNodeContents(m);const A=window.getSelection();A==null||A.removeAllRanges(),A==null||A.addRange(T)},g=O=>{switch(r.type){case"text":t(O.currentTarget.innerText);break;case"currency":t(Number(O.currentTarget.innerText));break;case"date":t(new Date(O.currentTarget.innerText).valueOf());break}const m=new Event("change",{bubbles:!0});O.currentTarget.dispatchEvent(m)};var _=so(),E=O=>!o()&&O.stopPropagation();let k;var v=ee(_);{var b=O=>{var m=We();Y(()=>me(m,t())),$(O,m)},R=O=>{var m=Le(),T=ne(m);{var A=w=>{var P=We();Y(()=>me(P,new Date(Number(t())).toLocaleString("en-GB",{timeZone:"UTC"}))),$(w,P)},S=w=>{var P=Le(),U=ne(P);{var I=L=>{var q=Le(),F=ne(q);{var x=B=>{var z=We();Y(()=>me(z,t())),$(B,z)},V=B=>{var z=to();or(z,21,s,Et,(ae,oe)=>{var X=ro(),ce={},$e=ee(X,!0);Q(X),Y(()=>{ce!==(ce=d(oe))&&(X.value=(X.__value=d(oe))==null?"":d(oe)),me($e,d(oe))}),$(ae,X)}),Q(z),Y(()=>z.disabled=o()),$s(z,t),$(B,z)};_e(F,B=>{o()?B(x):B(V,!1)})}$(L,q)};_e(U,L=>{r.type=="select"&&L(I)},!0)}$(w,P)};_e(T,w=>{r.type=="date"?w(A):w(S,!1)},!0)}$(O,m)};_e(v,O=>{r.type=="text"||r.type=="currency"?O(b):O(R,!1)})}Q(_),Y(()=>k=Is(_,k,{contenteditable:o()||r.type=="select"?!1:"plaintext-only",class:`${r.type}	${i()}`,onfocus:c,onblur:g,ondblclick:E,...a},"svelte-1lhzzgw")),$(e,_),Ce()}var oo=(e,r,t)=>r()(_t(d(t))),no=re("<tr><!><!><!><!><!><!><!><!><!><!><!><!><!><!></tr>");function io(e,r){Fe(r,!0);let t=fe(r,"onchange",3,()=>{}),o=fe(r,"ondblclick",3,()=>{}),s=Z(ue(r.trade));dr(()=>{K(s,ue(r.trade))});let i=J(()=>d(s).status=="closed"||d(s).status=="canceled");const a=()=>{K(s,ue({...d(s),longShort:zs(d(s).entry,d(s).stopLoss),risk:Vs(d(s).account,d(s).amount,d(s).entry,d(s).stopLoss),riskRewardRatio:Js(d(s).entry,d(s).takeProfit,d(s).stopLoss),pnl:Ks(d(s).longShort,d(s).amount,d(s).entry,d(s).exit)})),t()(_t(d(s)))};var c=no();c.__dblclick=[oo,o,s],c.__change=a;var g=ee(c);H(g,{type:"select",options:Ms,disabled:!1,get value(){return d(s).status},set value(F){d(s).status=F}});var _=D(g);H(_,{type:"date",get value(){return d(s).date}});var E=D(_);H(E,{type:"select",options:Hs,get disabled(){return d(i)},get value(){return d(s).symbol},set value(F){d(s).symbol=F}});var k=D(E);H(k,{type:"select",options:Ws,get disabled(){return d(i)},get value(){return d(s).timeFrame},set value(F){d(s).timeFrame=F}});var v=D(k),b=J(()=>d(s).longShort=="short"?"red":"green");H(v,{type:"text",get value(){return d(s).longShort},get color(){return d(b)}});var R=D(v);H(R,{type:"currency",get disabled(){return d(i)},get value(){return d(s).account},set value(F){d(s).account=F}});var O=D(R);H(O,{type:"currency",get disabled(){return d(i)},get value(){return d(s).amount},set value(F){d(s).amount=F}});var m=D(O);H(m,{type:"currency",get disabled(){return d(i)},get value(){return d(s).entry},set value(F){d(s).entry=F}});var T=D(m);H(T,{type:"currency",get disabled(){return d(i)},get value(){return d(s).takeProfit},set value(F){d(s).takeProfit=F}});var A=D(T);H(A,{type:"currency",get disabled(){return d(i)},get value(){return d(s).stopLoss},set value(F){d(s).stopLoss=F}});var S=D(A);H(S,{type:"currency",get disabled(){return d(i)},get value(){return d(s).exit},set value(F){d(s).exit=F}});var w=D(S),P=J(()=>"%"+(d(s).risk*100).toFixed(2));H(w,{type:"text",get value(){return d(P)}});var U=D(w);H(U,{type:"text",get value(){return d(s).riskRewardRatio}});var I=D(U),L=J(()=>d(s).pnl.toFixed(2)),q=J(()=>d(s).pnl==0?"":d(s).pnl<0?"red":"green");H(I,{type:"currency",get value(){return d(L)},get color(){return d(q)}}),Q(c),Y(()=>qs(c,`${d(s).status??""} svelte-1x45f01`)),mt("blur",c,a),$(e,c),Ce()}gr(["dblclick","change"]);var ao=re('<tr class="summary svelte-90fhec"><td colspan="13"> </td><!></tr> <!>',1),co=re("<table><thead><tr><th>STATUS</th><th>DATE</th><th>SYMBOL</th><th>TF</th><th>L / S</th><th>ACCOUNT</th><th>AMOUNT</th><th>ENTRY</th><th>TP</th><th>SL</th><th>EXIT</th><th>RISK</th><th>R/R</th><th>PNL</th></tr></thead><tbody></tbody></table>");function lo(e,r){Fe(r,!0);const t=(c,g)=>{r.onchange(r.trades.toSpliced(c,1,g))},o=J(()=>{const c=new Map;return r.trades.forEach(g=>{var E;const _=new Date(g.date).toLocaleString("default",{month:"long"});c.has(_)||c.set(_,[]),(E=c.get(_))==null||E.push(g)}),c});var s=co(),i=D(ee(s));or(i,21,()=>d(o),Et,(c,g)=>{let _=()=>d(g)[0],E=()=>d(g)[1];var k=ao();const v=J(()=>Pe.getTotalPnl(E()));var b=ne(k),R=ee(b),O=ee(R);Y(()=>me(O,`${_().toUpperCase()??""} (${E().length??""})`)),Q(R);var m=D(R),T=J(()=>d(v)>0?"green":"red");H(m,{type:"currency",get value(){return d(v)},get color(){return d(T)}}),Q(b);var A=D(b,2);or(A,19,E,S=>S.date,(S,w,P)=>{io(S,{get trade(){return d(w)},onchange:U=>t(d(P),U),get ondblclick(){return r.ondblclick}})}),$(c,k)}),Q(i),Q(s),$(e,s),Ce()}const Qe="trading",Ye="trades.json";class Xe{static async getUser(r){try{const{data:t}=await r.rest.users.getAuthenticated();return console.log("Token is valid. Authenticated as:",t.login),t}catch(t){return console.error("An error occurred:",t),null}}static async getTrades(r,t){try{const{data:o}=await r.rest.repos.getContent({mediaType:{format:"raw"},owner:t||"",repo:Qe,path:Ye});return JSON.parse(o)}catch(o){return console.error("An error occurred while fetching trades:",o),[]}}static async setTrades(r,t,o){try{const{data:s}=await r.rest.repos.getContent({owner:t,repo:Qe,path:Ye}),i=Array.isArray(s)?s[0]:s;if("sha"in i){const a=btoa(JSON.stringify(o));return await r.rest.repos.createOrUpdateFileContents({owner:t,repo:Qe,path:Ye,message:"Trades synced",content:a,sha:i.sha}),console.log("File updated successfully!"),!0}}catch(s){console.error("An error occurred while setting trades:",s)}return!1}}function xe(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function hr(e,r,t,o){if(typeof t!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce((s,i)=>hr.bind(null,e,i,s,o),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((s,i)=>i.hook.bind(null,s,o),t)():t(o))}function uo(e,r,t,o){const s=o;e.registry[t]||(e.registry[t]=[]),r==="before"&&(o=(i,a)=>Promise.resolve().then(s.bind(null,a)).then(i.bind(null,a))),r==="after"&&(o=(i,a)=>{let c;return Promise.resolve().then(i.bind(null,a)).then(g=>(c=g,s(c,a))).then(()=>c)}),r==="error"&&(o=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(c=>s(c,a))),e.registry[t].push({hook:o,orig:s})}function po(e,r,t){if(!e.registry[r])return;const o=e.registry[r].map(s=>s.orig).indexOf(t);o!==-1&&e.registry[r].splice(o,1)}const Vr=Function.bind,zr=Vr.bind(Vr);function Pt(e,r,t){const o=zr(po,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(s=>{const i=t?[r,s,t]:[r,s];e[s]=e.api[s]=zr(uo,null).apply(null,i)})}function go(){const e=Symbol("Singular"),r={registry:{}},t=hr.bind(null,r,e);return Pt(t,r,e),t}function ho(){const e={registry:{}},r=hr.bind(null,e);return Pt(r,e),r}const mo={Singular:go,Collection:ho};var fo="0.0.0-development",_o=`octokit-endpoint.js/${fo} ${xe()}`,Eo={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":_o},mediaType:{format:""}};function To(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function vo(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function Gt(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{vo(r[o])?o in e?t[o]=Gt(e[o],r[o]):Object.assign(t,{[o]:r[o]}):Object.assign(t,{[o]:r[o]})}),t}function Kr(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function ir(e,r,t){var s;if(typeof r=="string"){let[i,a]=r.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},r);t.headers=To(t.headers),Kr(t),Kr(t.headers);const o=Gt(e||{},t);return t.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function bo(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return o.length===0?e:e+t+o.map(s=>s==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(r[s])}`).join("&")}var wo=/\{[^}]+\}/g;function yo(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function ko(e){const r=e.match(wo);return r?r.map(yo).reduce((t,o)=>t.concat(o),[]):[]}function Jr(e,r){const t={__proto__:null};for(const o of Object.keys(e))r.indexOf(o)===-1&&(t[o]=e[o]);return t}function Ot(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function Ee(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function we(e,r,t){return r=e==="+"||e==="#"?Ot(r):Ee(r),t?Ee(t)+"="+r:r}function de(e){return e!=null}function Ze(e){return e===";"||e==="&"||e==="?"}function Po(e,r,t,o){var s=e[t],i=[];if(de(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(we(r,s,Ze(r)?t:""));else if(o==="*")Array.isArray(s)?s.filter(de).forEach(function(a){i.push(we(r,a,Ze(r)?t:""))}):Object.keys(s).forEach(function(a){de(s[a])&&i.push(we(r,s[a],a))});else{const a=[];Array.isArray(s)?s.filter(de).forEach(function(c){a.push(we(r,c))}):Object.keys(s).forEach(function(c){de(s[c])&&(a.push(Ee(c)),a.push(we(r,s[c].toString())))}),Ze(r)?i.push(Ee(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else r===";"?de(s)&&i.push(Ee(t)):s===""&&(r==="&"||r==="?")?i.push(Ee(t)+"="):s===""&&i.push("");return i}function Go(e){return{expand:Oo.bind(null,e)}}function Oo(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let c="";const g=[];if(t.indexOf(s.charAt(0))!==-1&&(c=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(_){var E=/([^:\*]*)(?::(\d+)|(\*))?/.exec(_);g.push(Po(r,c,E[1],E[2]||E[3]))}),c&&c!=="+"){var a=",";return c==="?"?a="&":c!=="#"&&(a=c),(g.length!==0?c:"")+g.join(a)}else return g.join(",")}else return Ot(i)}),e==="/"?e:e.replace(/\/$/,"")}function Rt(e){var E;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=Jr(e,["method","baseUrl","url","headers","request","mediaType"]);const a=ko(t);t=Go(t).expand(i),/^http/.test(t)||(t=e.baseUrl+t);const c=Object.keys(e).filter(k=>a.includes(k)).concat("baseUrl"),g=Jr(i,c);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(k=>k.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(E=e.mediaType.previews)!=null&&E.length)){const k=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=k.concat(e.mediaType.previews).map(v=>{const b=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${v}-preview${b}`}).join(",")}return["GET","HEAD"].includes(r)?t=bo(t,g):"data"in g?s=g.data:Object.keys(g).length&&(s=g),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof s>"u"&&(s=""),Object.assign({method:r,url:t,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function Ro(e,r,t){return Rt(ir(e,r,t))}function At(e,r){const t=ir(e,r),o=Ro.bind(null,t);return Object.assign(o,{DEFAULTS:t,defaults:At.bind(null,t),merge:ir.bind(null,t),parse:Rt})}var Ao=At(null,Eo),Qr=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function So(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var ge={},Yr;function Fo(){if(Yr)return ge;Yr=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,o=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,s={type:"",parameters:new e};Object.freeze(s.parameters),Object.freeze(s);function i(c){if(typeof c!="string")throw new TypeError("argument header is required and must be a string");let g=c.indexOf(";");const _=g!==-1?c.slice(0,g).trim():c.trim();if(o.test(_)===!1)throw new TypeError("invalid media type");const E={type:_.toLowerCase(),parameters:new e};if(g===-1)return E;let k,v,b;for(r.lastIndex=g;v=r.exec(c);){if(v.index!==g)throw new TypeError("invalid parameter format");g+=v[0].length,k=v[1].toLowerCase(),b=v[2],b[0]==='"'&&(b=b.slice(1,b.length-1),t.test(b)&&(b=b.replace(t,"$1"))),E.parameters[k]=b}if(g!==c.length)throw new TypeError("invalid parameter format");return E}function a(c){if(typeof c!="string")return s;let g=c.indexOf(";");const _=g!==-1?c.slice(0,g).trim():c.trim();if(o.test(_)===!1)return s;const E={type:_.toLowerCase(),parameters:new e};if(g===-1)return E;let k,v,b;for(r.lastIndex=g;v=r.exec(c);){if(v.index!==g)return s;g+=v[0].length,k=v[1].toLowerCase(),b=v[2],b[0]==='"'&&(b=b.slice(1,b.length-1),t.test(b)&&(b=b.replace(t,"$1"))),E.parameters[k]=b}return g!==c.length?s:E}return ge.default={parse:i,safeParse:a},ge.parse=i,ge.safeParse=a,ge.defaultContentType=s,ge}var Co=Fo();class ye extends Error{constructor(t,o,s){super(t);j(this,"name");j(this,"status");j(this,"request");j(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const i=Object.assign({},s.request);s.request.headers.authorization&&(i.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var Uo="0.0.0-development",Do={headers:{"user-agent":`octokit-request.js/${Uo} ${xe()}`}};function Lo(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function Xr(e){var k,v,b,R,O;const r=((k=e.request)==null?void 0:k.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((v=e.request)==null?void 0:v.log)||console,o=((b=e.request)==null?void 0:b.parseSuccessResponseBody)!==!1,s=Lo(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([m,T])=>[m,String(T)]));let a;try{a=await r(e.url,{method:e.method,body:s,redirect:(R=e.request)==null?void 0:R.redirect,headers:i,signal:(O=e.request)==null?void 0:O.signal,...e.body&&{duplex:"half"}})}catch(m){let T="Unknown Error";if(m instanceof Error){if(m.name==="AbortError")throw m.status=500,m;T=m.message,m.name==="TypeError"&&"cause"in m&&(m.cause instanceof Error?T=m.cause.message:typeof m.cause=="string"&&(T=m.cause))}const A=new ye(T,500,{request:e});throw A.cause=m,A}const c=a.status,g=a.url,_={};for(const[m,T]of a.headers)_[m]=T;const E={url:g,status:c,headers:_,data:""};if("deprecation"in _){const m=_.link&&_.link.match(/<([^>]+)>; rel="deprecation"/),T=m&&m.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${_.sunset}${T?`. See ${T}`:""}`)}if(c===204||c===205)return E;if(e.method==="HEAD"){if(c<400)return E;throw new ye(a.statusText,c,{response:E,request:e})}if(c===304)throw E.data=await er(a),new ye("Not modified",c,{response:E,request:e});if(c>=400)throw E.data=await er(a),new ye(Io(E.data),c,{response:E,request:e});return E.data=o?await er(a):a.body,E}async function er(e){var o;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=Co.safeParse(r);if(t.type==="application/json"){let s="";try{return s=await e.text(),JSON.parse(s)}catch{return s}}else return t.type.startsWith("text/")||((o=t.parameters.charset)==null?void 0:o.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function Io(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function ar(e,r){const t=e.defaults(r);return Object.assign(function(s,i){const a=t.merge(s,i);if(!a.request||!a.request.hook)return Xr(t.parse(a));const c=(g,_)=>Xr(t.parse(t.merge(g,_)));return Object.assign(c,{endpoint:t,defaults:ar.bind(null,t)}),a.request.hook(c,a)},{endpoint:t,defaults:ar.bind(null,t)})}var cr=ar(Ao,Do),qo="0.0.0-development";function jo(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var xo=class extends Error{constructor(r,t,o){super(jo(o));j(this,"name","GraphqlResponseError");j(this,"errors");j(this,"data");this.request=r,this.headers=t,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},$o=["method","baseUrl","url","headers","request","query","mediaType"],No=["query","method","url"],Zr=/\/api\/v3\/?$/;function Bo(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(No.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const o=typeof r=="string"?Object.assign({query:r},t):r,s=Object.keys(o).reduce((a,c)=>$o.includes(c)?(a[c]=o[c],a):(a.variables||(a.variables={}),a.variables[c]=o[c],a),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Zr.test(i)&&(s.url=i.replace(Zr,"/api/graphql")),e(s).then(a=>{if(a.data.errors){const c={};for(const g of Object.keys(a.headers))c[g]=a.headers[g];throw new xo(s,c,a.data)}return a.data.data})}function mr(e,r){const t=e.defaults(r);return Object.assign((s,i)=>Bo(t,s,i),{defaults:mr.bind(null,t),endpoint:t.endpoint})}mr(cr,{headers:{"user-agent":`octokit-graphql.js/${qo} ${xe()}`},method:"POST",url:"/graphql"});function Mo(e){return mr(e,{method:"POST",url:"/graphql"})}var Ho=/^v1\./,Wo=/^ghs_/,Vo=/^ghu_/;async function zo(e){const r=e.split(/\./).length===3,t=Ho.test(e)||Wo.test(e),o=Vo.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}function Ko(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Jo(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=Ko(e),r(s)}var Qo=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(zo.bind(null,r),{hook:Jo.bind(null,r)})};const St="6.1.2",et=()=>{},Yo=console.warn.bind(console),Xo=console.error.bind(console),rt=`octokit-core.js/${St} ${xe()}`;var De;let Zo=(De=class{constructor(r={}){j(this,"request");j(this,"graphql");j(this,"log");j(this,"hook");j(this,"auth");const t=new mo.Collection,o={baseUrl:cr.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=r.userAgent?`${r.userAgent} ${rt}`:rt,r.baseUrl&&(o.baseUrl=r.baseUrl),r.previews&&(o.mediaType.previews=r.previews),r.timeZone&&(o.headers["time-zone"]=r.timeZone),this.request=cr.defaults(o),this.graphql=Mo(this.request).defaults(o),this.log=Object.assign({debug:et,info:et,warn:Yo,error:Xo},r.log),this.hook=t,r.authStrategy){const{authStrategy:i,...a}=r,c=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",c.hook),this.auth=c}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=Qo(r.auth);t.wrap("request",i.hook),this.auth=i}const s=this.constructor;for(let i=0;i<s.plugins.length;++i)Object.assign(this,s.plugins[i](this,r))}static defaults(r){return class extends this{constructor(...o){const s=o[0]||{};if(typeof r=="function"){super(r(s));return}super(Object.assign({},r,s,s.userAgent&&r.userAgent?{userAgent:`${s.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var s;const t=this.plugins;return s=class extends this{},j(s,"plugins",t.concat(r.filter(i=>!t.includes(i)))),s}},j(De,"VERSION",St),j(De,"plugins",[]),De);var en="0.0.0-development";function rn(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof t<"u"&&(e.data.incomplete_results=t),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function fr(e,r,t){const o=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),s=typeof r=="function"?r:e.request,i=o.method,a=o.headers;let c=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!c)return{done:!0};try{const g=await s({method:i,url:c,headers:a}),_=rn(g);return c=((_.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:_}}catch(g){if(g.status!==409)throw g;return c="",{value:{status:200,headers:{},data:[]}}}}})}}function Ft(e,r,t,o){return typeof t=="function"&&(o=t,t=void 0),Ct(e,[],fr(e,r,t)[Symbol.asyncIterator](),o)}function Ct(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let i=!1;function a(){i=!0}return r=r.concat(o?o(s.value,a):s.value.data),i?r:Ct(e,r,t,o)})}Object.assign(Ft,{iterator:fr});function Ut(e){return{paginate:Object.assign(Ft.bind(null,e),{iterator:fr.bind(null,e)})}}Ut.VERSION=en;var tn=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,sn=class extends Error{constructor(r,t){super(tn(r.pathInQuery,t));j(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},on=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);j(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},nn=e=>Object.prototype.toString.call(e)==="[object Object]";function Dt(e){const r=Lt(e,"pageInfo");if(r.length===0)throw new on(e);return r}var Lt=(e,r,t=[])=>{for(const o of Object.keys(e)){const s=[...t,o],i=e[o];if(nn(i)){if(i.hasOwnProperty(r))return s;const a=Lt(i,r,s);if(a.length>0)return a}}return[]},Ge=(e,r)=>r.reduce((t,o)=>t[o],e),rr=(e,r,t)=>{const o=r[r.length-1],s=[...r].slice(0,-1),i=Ge(e,s);typeof t=="function"?i[o]=t(i[o]):i[o]=t},an=e=>{const r=Dt(e);return{pathInQuery:r,pageInfo:Ge(e,[...r,"pageInfo"])}},It=e=>e.hasOwnProperty("hasNextPage"),cn=e=>It(e)?e.endCursor:e.startCursor,ln=e=>It(e)?e.hasNextPage:e.hasPreviousPage,qt=e=>(r,t={})=>{let o=!0,s={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(r,s),a=an(i),c=cn(a.pageInfo);if(o=ln(a.pageInfo),o&&c===s.cursor)throw new sn(a,c);return s={...s,cursor:c},{done:!1,value:i}}})}},un=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=Dt(e),o=[...t,"nodes"],s=Ge(r,o);s&&rr(e,o,g=>[...g,...s]);const i=[...t,"edges"],a=Ge(r,i);a&&rr(e,i,g=>[...g,...a]);const c=[...t,"pageInfo"];return rr(e,c,Ge(r,c)),e},pn=e=>{const r=qt(e);return async(t,o={})=>{let s={};for await(const i of r(t,o))s=un(s,i);return s}};function dn(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(pn(e),{iterator:qt(e)})})}}const gn="13.2.6",hn={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var mn=hn;const pe=new Map;for(const[e,r]of Object.entries(mn))for(const[t,o]of Object.entries(r)){const[s,i,a]=o,[c,g]=s.split(/ /),_=Object.assign({method:c,url:g},i);pe.has(e)||pe.set(e,new Map),pe.get(e).set(t,{scope:e,methodName:t,endpointDefaults:_,decorations:a})}const fn={has({scope:e},r){return pe.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...pe.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},o){if(t[o])return t[o];const s=pe.get(r).get(o);if(!s)return;const{endpointDefaults:i,decorations:a}=s;return a?t[o]=En(e,r,o,i,a):t[o]=e.request.defaults(i),t[o]}};function _n(e){const r={};for(const t of pe.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},fn);return r}function En(e,r,t,o,s){const i=e.request.defaults(o);function a(...c){let g=i.endpoint.merge(...c);if(s.mapToData)return g=Object.assign({},g,{data:g[s.mapToData],[s.mapToData]:void 0}),i(g);if(s.renamed){const[_,E]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${_}.${E}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const _=i.endpoint.merge(...c);for(const[E,k]of Object.entries(s.renamedParameters))E in _&&(e.log.warn(`"${E}" parameter is deprecated for "octokit.${r}.${t}()". Use "${k}" instead`),k in _||(_[k]=_[E]),delete _[E]);return i(_)}return i(...c)}return Object.assign(a,i)}function jt(e){return{rest:_n(e)}}jt.VERSION=gn;var je={exports:{}},Tn=je.exports,tt;function vn(){return tt||(tt=1,function(e,r){(function(t,o){e.exports=o()})(Tn,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Qr<"u"?Qr:typeof self<"u"?self:{};function o(G){return G&&G.default||G}var s=function(G,l,n={}){var u,p,h;for(u in l)h=l[u],n[u]=(p=G[u])!=null?p:h;return n},i=function(G,l,n={}){var u,p;for(u in G)p=G[u],l[u]!==void 0&&(n[u]=p);return n},a={load:s,overwrite:i},c;c=class{constructor(l,n){this.incr=l,this.decr=n,this._first=null,this._last=null,this.length=0}push(l){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:l,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var l;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),l=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,l}first(){if(this._first!=null)return this._first.value}getArray(){var l,n,u;for(l=this._first,u=[];l!=null;)u.push((n=l,l=l.next,n.value));return u}forEachShift(l){var n;for(n=this.shift();n!=null;)l(n),n=this.shift()}debug(){var l,n,u,p,h;for(l=this._first,h=[];l!=null;)h.push((n=l,l=l.next,{value:n.value,prev:(u=n.prev)!=null?u.value:void 0,next:(p=n.next)!=null?p.value:void 0}));return h}};var g=c,_;_=class{constructor(l){if(this.instance=l,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,u)=>this._addListener(n,"many",u),this.instance.once=(n,u)=>this._addListener(n,"once",u),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(l,n,u){var p;return(p=this._events)[l]==null&&(p[l]=[]),this._events[l].push({cb:u,status:n}),this.instance}listenerCount(l){return this._events[l]!=null?this._events[l].length:0}async trigger(l,...n){var u,p;try{return l!=="debug"&&this.trigger("debug",`Event triggered: ${l}`,n),this._events[l]==null?void 0:(this._events[l]=this._events[l].filter(function(h){return h.status!=="none"}),p=this._events[l].map(async h=>{var f,y;if(h.status!=="none"){h.status==="once"&&(h.status="none");try{return y=typeof h.cb=="function"?h.cb(...n):void 0,typeof(y!=null?y.then:void 0)=="function"?await y:y}catch(C){return f=C,this.trigger("error",f),null}}}),(await Promise.all(p)).find(function(h){return h!=null}))}catch(h){return u=h,this.trigger("error",u),null}}};var E=_,k,v,b;k=g,v=E,b=class{constructor(l){this.Events=new v(this),this._length=0,this._lists=(function(){var n,u,p;for(p=[],n=1,u=l;1<=u?n<=u:n>=u;1<=u?++n:--n)p.push(new k(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(l){return this._lists[l.options.priority].push(l)}queued(l){return l!=null?this._lists[l].length:this._length}shiftAll(l){return this._lists.forEach(function(n){return n.forEachShift(l)})}getFirst(l=this._lists){var n,u,p;for(n=0,u=l.length;n<u;n++)if(p=l[n],p.length>0)return p;return[]}shiftLastFrom(l){return this.getFirst(this._lists.slice(l).reverse()).shift()}};var R=b,O;O=class extends Error{};var m=O,T,A,S,w,P;w=10,A=5,P=a,T=m,S=class{constructor(l,n,u,p,h,f,y,C){this.task=l,this.args=n,this.rejectOnDrop=h,this.Events=f,this._states=y,this.Promise=C,this.options=P.load(u,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((N,M)=>{this._resolve=N,this._reject=M}),this.retryCount=0}_sanitizePriority(l){var n;return n=~~l!==l?A:l,n<0?0:n>w-1?w-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:l,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(l??new T(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(l){var n;if(n=this._states.jobStatus(this.options.id),!(n===l||l==="DONE"&&n===null))throw new T(`Invalid job status ${n}, expected ${l}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(l,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:l,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(l,n,u,p){var h,f,y;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),f={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",f);try{if(y=await(l!=null?l.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(f),await p(this.options,f),this._assertStatus("DONE"),this._resolve(y)}catch(C){return h=C,this._onFailure(h,f,n,u,p)}}doExpire(l,n,u){var p,h;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),h={args:this.args,options:this.options,retryCount:this.retryCount},p=new T(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,h,l,n,u)}async _onFailure(l,n,u,p,h){var f,y;if(u())return f=await this.Events.trigger("failed",l,n),f!=null?(y=~~f,this.Events.trigger("retry",`Retrying ${this.options.id} after ${y} ms`,n),this.retryCount++,p(y)):(this.doDone(n),await h(this.options,n),this._assertStatus("DONE"),this._reject(l))}doDone(l){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",l)}};var U=S,I,L,q;q=a,I=m,L=class{constructor(l,n,u){this.instance=l,this.storeOptions=n,this.clientId=this.instance._randomIndex(),q.load(u,u,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var l;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(l=this.heartbeat=setInterval(()=>{var n,u,p,h,f;if(h=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&h>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=h,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&h>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:p,reservoir:f}=this.storeOptions,this._lastReservoirIncrease=h,u=p!=null?Math.min(n,p-f):n,u>0))return this.storeOptions.reservoir+=u,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?l.unref():void 0:clearInterval(this.heartbeat)}async __publish__(l){return await this.yieldLoop(),this.instance.Events.trigger("message",l.toString())}async __disconnect__(l){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(l=0){return new this.Promise(function(n,u){return setTimeout(n,l)})}computePenalty(){var l;return(l=this.storeOptions.penalty)!=null?l:15*this.storeOptions.minTime||5e3}async __updateSettings__(l){return await this.yieldLoop(),q.overwrite(l,l,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(l){return await this.yieldLoop(),this._nextRequest+this.timeout<l}computeCapacity(){var l,n;return{maxConcurrent:l,reservoir:n}=this.storeOptions,l!=null&&n!=null?Math.min(l-this._running,n):l!=null?l-this._running:n??null}conditionsCheck(l){var n;return n=this.computeCapacity(),n==null||l<=n}async __incrementReservoir__(l){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(l){return this._unblockTime>=l}check(l,n){return this.conditionsCheck(l)&&this._nextRequest-n<=0}async __check__(l){var n;return await this.yieldLoop(),n=Date.now(),this.check(l,n)}async __register__(l,n,u){var p,h;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),h=Math.max(this._nextRequest-p,0),this._nextRequest=p+h+this.storeOptions.minTime,{success:!0,wait:h,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(l,n){var u,p,h;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new I(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),h=this.storeOptions.highWater!=null&&l===this.storeOptions.highWater&&!this.check(n,p),u=this.strategyIsBlock()&&(h||this.isBlocked(p)),u&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:h,blocked:u,strategy:this.storeOptions.strategy}}async __free__(l,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var F=L,x,V;x=m,V=class{constructor(l){this.status=l,this._jobs={},this.counts=this.status.map(function(){return 0})}next(l){var n,u;if(n=this._jobs[l],u=n+1,n!=null&&u<this.status.length)return this.counts[n]--,this.counts[u]++,this._jobs[l]++;if(n!=null)return this.counts[n]--,delete this._jobs[l]}start(l){var n;return n=0,this._jobs[l]=n,this.counts[n]++}remove(l){var n;return n=this._jobs[l],n!=null&&(this.counts[n]--,delete this._jobs[l]),n!=null}jobStatus(l){var n;return(n=this.status[this._jobs[l]])!=null?n:null}statusJobs(l){var n,u,p,h,f;if(l!=null){if(u=this.status.indexOf(l),u<0)throw new x(`status must be one of ${this.status.join(", ")}`);p=this._jobs,h=[];for(n in p)f=p[n],f===u&&h.push(n);return h}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((l,n,u)=>(l[this.status[u]]=n,l),{})}};var B=V,z,ae;z=g,ae=class{constructor(l,n){this.schedule=this.schedule.bind(this),this.name=l,this.Promise=n,this._running=0,this._queue=new z}isEmpty(){return this._queue.length===0}async _tryToRun(){var l,n,u,p,h,f,y;if(this._running<1&&this._queue.length>0)return this._running++,{task:y,args:l,resolve:h,reject:p}=this._queue.shift(),n=await async function(){try{return f=await y(...l),function(){return h(f)}}catch(C){return u=C,function(){return p(u)}}}(),this._running--,this._tryToRun(),n()}schedule(l,...n){var u,p,h;return h=p=null,u=new this.Promise(function(f,y){return h=f,p=y}),this._queue.push({task:l,args:n,resolve:h,reject:p}),this._tryToRun(),u}};var oe=ae,X="2.19.5",ce={version:X},$e=Object.freeze({version:X,default:ce}),Er=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Tr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Mt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),vr,br,wr,yr,kr,Ue;Ue=a,vr=E,yr=Er,wr=Tr,kr=Mt,br=(function(){class G{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,Ue.load(this.limiterOptions,this.defaults,this),this.Events=new vr(this),this.instances={},this.Bottleneck=Lr,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new yr(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new wr(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var u;return(u=this.instances[n])!=null?u:(()=>{var p;return p=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,n),p})()}async deleteKey(n=""){var u,p;return p=this.instances[n],this.connection&&(u=await this.connection.__runCommand__(["del",...kr.allKeys(`${this.id}-${n}`)])),p!=null&&(delete this.instances[n],await p.disconnect()),p!=null||u>0}limiters(){var n,u,p,h;u=this.instances,p=[];for(n in u)h=u[n],p.push({key:n,limiter:h});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,u,p,h,f,y,C,N,M;if(this.connection==null)return this.Promise.resolve(this.keys());for(y=[],n=null,M=`b_${this.id}-`.length,u=9;n!==0;)for([N,p]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~N,h=0,C=p.length;h<C;h++)f=p[h],y.push(f.slice(M,-u));return y}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var u,p,h,f,y,C;y=Date.now(),h=this.instances,f=[];for(p in h){C=h[p];try{await C._store.__groupCheck__(y)?f.push(this.deleteKey(p)):f.push(void 0)}catch(N){u=N,f.push(C.Events.trigger("error",u))}}return f},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(Ue.overwrite(n,this.defaults,this),Ue.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var u;if(!this.sharedConnection)return(u=this.connection)!=null?u.disconnect(n):void 0}}return G.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},G}).call(t);var Ht=br,Pr,Gr,Or;Or=a,Gr=E,Pr=(function(){class G{constructor(n={}){this.options=n,Or.load(this.options,this.defaults,this),this.Events=new Gr(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,u)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var u;return this._arr.push(n),u=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),u}}return G.prototype.defaults={maxTime:null,maxSize:null,Promise},G}).call(t);var Wt=Pr,Vt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),zt=o($e),Rr,Ar,Ne,Be,Sr,Me,Fr,Cr,Ur,He,te,Dr=[].splice;Me=10,Ar=5,te=a,Fr=R,Be=U,Sr=F,Cr=Vt,Ne=E,Ur=B,He=oe,Rr=(function(){class G{constructor(n={},...u){var p,h;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,u),te.load(n,this.instanceDefaults,this),this._queues=new Fr(Me),this._scheduled={},this._states=new Ur(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new Ne(this),this._submitLock=new He("submit",this.Promise),this._registerLock=new He("register",this.Promise),h=te.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=te.load(n,this.redisStoreDefaults,{}),new Cr(this,h,p);if(this.datastore==="local")return p=te.load(n,this.localStoreDefaults,{}),new Sr(this,h,p);throw new G.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.ref=="function"?f.ref():void 0}),this._queues.on("zero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.unref=="function"?f.unref():void 0})}_validateOptions(n,u){if(!(n!=null&&typeof n=="object"&&u.length===0))throw new G.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,u,p,h){var f,y;try{if({running:y}=await this._store.__free__(n,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,h),y===0&&this.empty())return this.Events.trigger("idle")}catch(C){return f=C,this.Events.trigger("error",f)}}_run(n,u,p){var h,f,y;return u.doRun(),h=this._clearGlobalState.bind(this,n),y=this._run.bind(this,n,u),f=this._free.bind(this,n,u),this._scheduled[n]={timeout:setTimeout(()=>u.doExecute(this._limiter,h,y,f),p),expiration:u.options.expiration!=null?setTimeout(function(){return u.doExpire(h,y,f)},p+u.options.expiration):void 0,job:u}}_drainOne(n){return this._registerLock.schedule(()=>{var u,p,h,f,y;return this.queued()===0?this.Promise.resolve(null):(y=this._queues.getFirst(),{options:f,args:u}=h=y.first(),n!=null&&f.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${f.id}`,{args:u,options:f}),p=this._randomIndex(),this._store.__register__(p,f.weight,f.expiration).then(({success:C,wait:N,reservoir:M})=>{var ve;return this.Events.trigger("debug",`Drained ${f.id}`,{success:C,args:u,options:f}),C?(y.shift(),ve=this.empty(),ve&&this.Events.trigger("empty"),M===0&&this.Events.trigger("depleted",ve),this._run(p,h,N),this.Promise.resolve(f.weight)):this.Promise.resolve(null)})))})}_drainAll(n,u=0){return this._drainOne(n).then(p=>{var h;return p!=null?(h=n!=null?n-p:n,this._drainAll(h,u+p)):this.Promise.resolve(u)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(n){return this._queues.shiftAll(function(u){return u.doDrop({message:n})})}stop(n={}){var u,p;return n=te.load(n,this.stopDefaults),p=h=>{var f;return f=()=>{var y;return y=this._states.counts,y[0]+y[1]+y[2]+y[3]===h},new this.Promise((y,C)=>f()?y():this.on("done",()=>{if(f())return this.removeAllListeners("done"),y()}))},u=n.dropWaitingJobs?(this._run=function(h,f){return f.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var h,f,y;f=this._scheduled;for(h in f)y=f[h],this.jobStatus(y.job.options.id)==="RUNNING"&&(clearTimeout(y.timeout),clearTimeout(y.expiration),y.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),p(0)}))):this.schedule({priority:Me-1,weight:0},()=>p(1)),this._receive=function(h){return h._reject(new G.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new G.prototype.BottleneckError("stop() has already been called")),u}async _addToQueue(n){var u,p,h,f,y,C,N;({args:u,options:f}=n);try{({reachedHWM:y,blocked:p,strategy:N}=await this._store.__submit__(this.queued(),f.weight))}catch(M){return h=M,this.Events.trigger("debug",`Could not queue ${f.id}`,{args:u,options:f,error:h}),n.doDrop({error:h}),!1}return p?(n.doDrop(),!0):y&&(C=N===G.prototype.strategy.LEAK?this._queues.shiftLastFrom(f.priority):N===G.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(f.priority+1):N===G.prototype.strategy.OVERFLOW?n:void 0,C!=null&&C.doDrop(),C==null||N===G.prototype.strategy.OVERFLOW)?(C==null&&n.doDrop(),y):(n.doQueue(y,p),this._queues.push(n),await this._drainAll(),y)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new G.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var u,p,h,f,y,C,N;return typeof n[0]=="function"?(y=n,[p,...n]=y,[u]=Dr.call(n,-1),f=te.load({},this.jobDefaults)):(C=n,[f,p,...n]=C,[u]=Dr.call(n,-1),f=te.load(f,this.jobDefaults)),N=(...M)=>new this.Promise(function(ve,Jt){return p(...M,function(...Ir){return(Ir[0]!=null?Jt:ve)(Ir)})}),h=new Be(N,n,f,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),h.promise.then(function(M){return typeof u=="function"?u(...M):void 0}).catch(function(M){return Array.isArray(M)?typeof u=="function"?u(...M):void 0:typeof u=="function"?u(M):void 0}),this._receive(h)}schedule(...n){var u,p,h;return typeof n[0]=="function"?([h,...n]=n,p={}):[p,h,...n]=n,u=new Be(h,n,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(u),u.promise}wrap(n){var u,p;return u=this.schedule.bind(this),p=function(...h){return u(n.bind(this),...h)},p.withOptions=function(h,...f){return u(h,n,...f)},p}async updateSettings(n={}){return await this._store.__updateSettings__(te.overwrite(n,this.storeDefaults)),te.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return G.default=G,G.Events=Ne,G.version=G.prototype.version=zt.version,G.strategy=G.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},G.BottleneckError=G.prototype.BottleneckError=m,G.Group=G.prototype.Group=Ht,G.RedisConnection=G.prototype.RedisConnection=Er,G.IORedisConnection=G.prototype.IORedisConnection=Tr,G.Batcher=G.prototype.Batcher=Wt,G.prototype.jobDefaults={priority:Ar,weight:1,expiration:null,id:"<no-id>"},G.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:G.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},G.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},G.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},G.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},G.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},G}).call(t);var Lr=Rr,Kt=Lr;return Kt})}(je)),je.exports}var bn=vn();const xt=So(bn);var wn="0.0.0-development";async function $t(e,r,t,o){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,s,i)}throw t}async function yn(e,r,t,o){const s=new xt;return s.on("failed",function(i,a){const c=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(o.request.retryCount=a.retryCount+1,c>a.retryCount)return g*e.retryAfterBaseValue}),s.schedule(kn.bind(null,e,r,t),o)}async function kn(e,r,t,o){const s=await t(t,o);if(s.data&&s.data.errors&&s.data.errors.length>0&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new ye(s.data.errors[0].message,500,{request:o,response:s});return $t(e,r,i,o)}return s}function Nt(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",$t.bind(null,t,e)),e.hook.wrap("request",yn.bind(null,t,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}Nt.VERSION=wn;var Pn="0.0.0-development",tr=()=>Promise.resolve();function Gn(e,r,t){return e.retryLimiter.schedule(On,e,r,t)}async function On(e,r,t){const o=t.method!=="GET"&&t.method!=="HEAD",{pathname:s}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&s.startsWith("/search/"),a=s.startsWith("/graphql"),g=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(o||a)&&await e.write.key(e.id).schedule(g,tr),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(g,tr),i&&await e.search.key(e.id).schedule(g,tr);const _=e.global.key(e.id).schedule(g,r,t);if(a){const E=await _;if(E.data.errors!=null&&E.data.errors.some(k=>k.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:E,data:E.data})}return _}var Rn=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function An(e){const t=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var st=An(Rn),Bt=st.test.bind(st),Te={},Sn=function(e,r){Te.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),Te.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),Te.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),Te.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function _r(e,r){const{enabled:t=!0,Bottleneck:o=xt,id:s="no-id",timeout:i=1e3*60*2,connection:a}=r.throttle||{};if(!t)return{};const c={timeout:i};typeof a<"u"&&(c.connection=a),Te.global==null&&Sn(o,c);const g=Object.assign({clustering:a!=null,triggersNotification:Bt,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...Te},r.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const _={},E=new o.Events(_);return _.on("secondary-limit",g.onSecondaryRateLimit),_.on("rate-limit",g.onRateLimit),_.on("error",k=>e.log.warn("Error in throttling-plugin limit handler",k)),g.retryLimiter.on("failed",async function(k,v){const[b,R,O]=v.args,{pathname:m}=new URL(O.url,"http://github.test");if(!(m.startsWith("/graphql")&&k.status!==401||k.status===403||k.status===429))return;const A=~~R.retryCount;R.retryCount=A,O.request.retryCount=A;const{wantRetry:S,retryAfter:w=0}=await async function(){var P;if(/\bsecondary rate\b/i.test(k.message)){const U=Number(k.response.headers["retry-after"])||b.fallbackSecondaryRateRetryAfter;return{wantRetry:await E.trigger("secondary-limit",U,O,e,A),retryAfter:U}}if(k.response.headers!=null&&k.response.headers["x-ratelimit-remaining"]==="0"||(((P=k.response.data)==null?void 0:P.errors)??[]).some(U=>U.type==="RATE_LIMITED")){const U=new Date(~~k.response.headers["x-ratelimit-reset"]*1e3).getTime(),I=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await E.trigger("rate-limit",I,O,e,A),retryAfter:I}}return{}}();if(S)return R.retryCount++,w*b.retryAfterBaseValue}),e.hook.wrap("request",Gn.bind(null,g)),{}}_r.VERSION=Pn;_r.triggersNotification=Bt;var Fn="0.0.0-development",Cn=Zo.plugin(jt,Ut,dn,Nt,_r).defaults({userAgent:`octokit.js/${Fn}`,throttle:{onRateLimit:Un,onSecondaryRateLimit:Dn}});function Un(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function Dn(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}var le,Re,Ae;class Ln{constructor(r){j(this,"auth","");be(this,le);be(this,Re,Z(null));be(this,Ae,Z([]));this.auth=r,xr(this,le,new Cn({auth:r})),Xe.getUser(se(this,le)).then(t=>{var o;this.user=t,Xe.getTrades(se(this,le),(o=this.user)==null?void 0:o.login).then(s=>{this.trades=s})})}get user(){return d(se(this,Re))}set user(r){K(se(this,Re),r)}get trades(){return d(se(this,Ae))}set trades(r){K(se(this,Ae),r)}async set(r){var t;return this.user&&await Xe.setTrades(se(this,le),(t=this.user)==null?void 0:t.login,r)?(this.trades=r,!0):!1}}le=new WeakMap,Re=new WeakMap,Ae=new WeakMap;function In(e){return new Ln(e)}var Se;class qn{constructor(r,t){j(this,"key","");be(this,Se,Z());this.key=r,this.value=t,this.value=localStorage[r]?JSON.parse(localStorage[r]):t,dr(()=>{this.value&&(localStorage[r]=JSON.stringify(this.value))})}get value(){return d(se(this,Se))}set value(r){K(se(this,Se),r)}}Se=new WeakMap;function ot(e,r){return new qn(e,r)}var jn=re('<header class="flex-row align-items-center gap-1 svelte-wxr5oq"><h1 class="flexible">Trading journal v5</h1> <input placeholder="Git personal access token"> <button>Add</button> <button>Sync</button></header> <div class="containerTable overflow-auto svelte-wxr5oq"><!></div> <!>',1);function ei(e,r){Fe(r,!0);const t=ot("personalAccessToken",""),o=ot("trades",[]),s=J(()=>In(t.value)),i=J(()=>Pe.combineChanges(o.value,d(s).trades)),a=J(()=>o.value.length>0&&!!d(s).user);let c=Z(void 0),g=Z(!1);const _=P=>{o.value=Pe.getChanges(P,d(s).trades)},E=P=>{var U;(U=d(c))==null||U.show(P,d(i),I=>{if(Pe.isEditable(I)){const L=d(i).findIndex(q=>P.date==q.date);_(d(i).toSpliced(L,1,I))}})},k=()=>{o.value=[yt(),...o.value]},v=async()=>{K(g,!0),await d(s).set(d(i))&&(o.value=[]),K(g,!1)};var b=jn(),R=ne(b),O=D(ee(R),2);vt(O);var m=D(O,2);m.__click=k;var T=D(m,2);T.__click=v,Q(R);var A=D(R,2),S=ee(A);lo(S,{get trades(){return d(i)},onchange:_,ondblclick:E}),Q(A);var w=D(A,2);ft(eo(w,{}),P=>K(c,ue(P)),()=>d(c)),Y(()=>T.disabled=!d(a)||d(g)),nr(O,()=>t.value,P=>t.value=P),$(e,b),Ce()}gr(["click"]);export{ei as component};
