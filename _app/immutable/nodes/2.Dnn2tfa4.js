var Bt=Object.defineProperty;var Cr=e=>{throw TypeError(e)};var Ht=(e,r,t)=>r in e?Bt(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var I=(e,r,t)=>Ht(e,typeof r!="symbol"?r+"":r,t),Ur=(e,r,t)=>r.has(e)||Cr("Cannot "+t);var J=(e,r,t)=>(Ur(e,r,"read from private field"),t?t.call(e):r.get(e)),ge=(e,r,t)=>r.has(e)?Cr("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(e):r.set(e,t),Dr=(e,r,t,o)=>(Ur(e,r,"write to private field"),o?o.call(e,t):r.set(e,t),t);import{a as B,t as te,b as Ne,c as Be}from"../chunks/disclose-version.DqP73NPj.js";import{B as Mt,b as Wt,h as M,s as He,a as Vt,R as zt,aq as tt,H as Kt,r as Lr,c as Me,f as he,as as Ue,d as st,e as ot,p as Jt,D as Ir,at as jr,au as Qt,af as Yt,av as Xt,I as Zt,C as es,an as rs,ah as ts,aa as ss,L as xr,aw as or,ax as nr,ay as os,al as ns,az as nt,X as is,aA as as,aB as cs,aC as ls,Q as qr,aD as us,aE as ps,j as ds,W as gs,V as it,t as Ge,y as re,z as Q,m as y,N as H,w as X,x as Oe,ae as V,v as Ee,A as L,o as ue,g as at}from"../chunks/runtime.Bas2-fRA.js";import{d as hs,l as ct,e as ir,f as ar,a as Fe,r as ms}from"../chunks/store.Byoh2nn8.js";import{i as _s,p as Te,b as cr,a as we,o as fs}from"../chunks/index-client.Cgohhbib.js";import{i as _e}from"../chunks/if.Dj4KubjC.js";function Es(e,r){return r}function Ts(e,r,t,o){for(var s=[],i=r.length,a=0;a<i;a++)Qt(r[a].e,s,!0);var u=i>0&&s.length===0&&t!==null;if(u){var g=t.parentNode;Yt(g),g.append(t),o.clear(),ee(e,r[0].prev,r[i-1].next)}Xt(s,()=>{for(var _=0;_<i;_++){var f=r[_];u||(o.delete(f.k),ee(e,f.prev,f.next)),Zt(f.e,!u)}})}function lt(e,r,t,o,s,i=null){var a=e,u={flags:r,items:new Map,first:null},g=(r&nt)!==0;if(g){var _=e;a=M?He(es(_)):_.appendChild(Mt())}M&&Vt();var f=null,T=!1;Wt(()=>{var E=t(),m=zt(E)?E:E==null?[]:tt(E),k=m.length;if(T&&k===0)return;T=k===0;let O=!1;if(M){var v=a.data===Kt;v!==(k===0)&&(a=Lr(),He(a),Me(!1),O=!0)}if(M){for(var P=null,S,U=0;U<k;U++){if(he.nodeType===8&&he.data===rs){a=he,O=!0,Me(!1);break}var G=m[U],R=o(G,U);S=ut(he,u,P,null,G,R,U,s,r),u.items.set(R,S),P=S}k>0&&He(Lr())}if(!M){var F=ts;vs(m,u,a,s,r,(F.f&Ue)!==0,o)}i!==null&&(k===0?f?st(f):f=ot(()=>i(a)):f!==null&&Jt(f,()=>{f=null})),O&&Me(!0),t()}),M&&(a=he)}function vs(e,r,t,o,s,i,a){var Z,se,Re,pe;var u=(s&as)!==0,g=(s&(nr|or))!==0,_=e.length,f=r.items,T=r.first,E=T,m,k=null,O,v=[],P=[],S,U,G,R;if(u)for(R=0;R<_;R+=1)S=e[R],U=a(S,R),G=f.get(U),G!==void 0&&((Z=G.a)==null||Z.measure(),(O??(O=new Set)).add(G));for(R=0;R<_;R+=1){if(S=e[R],U=a(S,R),G=f.get(U),G===void 0){var F=E?E.e.nodes_start:t;k=ut(F,r,k,k===null?r.first:k.next,S,U,R,o,s),f.set(U,k),v=[],P=[],E=k.next;continue}if(g&&bs(G,S,R,s),G.e.f&Ue&&(st(G.e),u&&((se=G.a)==null||se.unfix(),(O??(O=new Set)).delete(G))),G!==E){if(m!==void 0&&m.has(G)){if(v.length<P.length){var A=P[0],D;k=A.prev;var $=v[0],x=v[v.length-1];for(D=0;D<v.length;D+=1)$r(v[D],A,t);for(D=0;D<P.length;D+=1)m.delete(P[D]);ee(r,$.prev,x.next),ee(r,k,$),ee(r,x,A),E=A,k=x,R-=1,v=[],P=[]}else m.delete(G),$r(G,E,t),ee(r,G.prev,G.next),ee(r,G,k===null?r.first:k.next),ee(r,k,G),k=G;continue}for(v=[],P=[];E!==null&&E.k!==U;)(i||!(E.e.f&Ue))&&(m??(m=new Set)).add(E),P.push(E),E=E.next;if(E===null)continue;G=E}v.push(G),k=G,E=G.next}if(E!==null||m!==void 0){for(var z=m===void 0?[]:tt(m);E!==null;)(i||!(E.e.f&Ue))&&z.push(E),E=E.next;var W=z.length;if(W>0){var Y=s&nt&&_===0?t:null;if(u){for(R=0;R<W;R+=1)(Re=z[R].a)==null||Re.measure();for(R=0;R<W;R+=1)(pe=z[R].a)==null||pe.fix()}Ts(r,z,Y,f)}}u&&is(()=>{var Ae;if(O!==void 0)for(G of O)(Ae=G.a)==null||Ae.apply()}),Ir.first=r.first&&r.first.e,Ir.last=k&&k.e}function bs(e,r,t,o){o&nr&&jr(e.v,r),o&or?jr(e.i,t):e.i=t}function ut(e,r,t,o,s,i,a,u,g){var _=(g&nr)!==0,f=(g&os)===0,T=_?f?ss(s):xr(s):s,E=g&or?xr(a):a,m={i:E,v:T,k:i,a:null,e:null,prev:t,next:o};try{return m.e=ot(()=>u(e,T,E),M),m.e.prev=t&&t.e,m.e.next=o&&o.e,t===null?r.first=m:(t.next=m,t.e.next=m.e),o!==null&&(o.prev=m,o.e.prev=m.e),m}finally{}}function $r(e,r,t){for(var o=e.next?e.next.e.nodes_start:t,s=r?r.e.nodes_start:t,i=e.e.nodes_start;i!==o;){var a=ns(i);s.before(i),i=a}}function ee(e,r,t){r===null?e.first=t:(r.next=t,r.e.next=t&&t.e),t!==null&&(t.prev=r,t.e.prev=r&&r.e)}function pt(e){if(M){var r=!1,t=()=>{if(!r){if(r=!0,e.hasAttribute("value")){var o=e.value;Le(e,"value",null),e.value=o}if(e.hasAttribute("checked")){var s=e.checked;Le(e,"checked",null),e.checked=s}}};e.__on_r=t,cs(t),hs()}}function Le(e,r,t,o){var s=e.__attributes??(e.__attributes={});M&&(s[r]=e.getAttribute(r),r==="src"||r==="srcset"||r==="href"&&e.nodeName==="LINK")||s[r]!==(s[r]=t)&&(r==="style"&&"__styles"in e&&(e.__styles={}),r==="loading"&&(e[ls]=t),t==null?e.removeAttribute(r):typeof t!="string"&&ws(e).includes(r)?e[r]=t:e.setAttribute(r,t))}var Nr=new Map;function ws(e){var r=Nr.get(e.nodeName);if(r)return r;Nr.set(e.nodeName,r=[]);for(var t,o=qr(e),s=Element.prototype;s!==o;){t=us(o);for(var i in t)t[i].set&&r.push(i);o=qr(o)}return r}function dt(e,r){var t=e.__className,o=ys(r);M&&e.className===o?e.__className=o:(t!==o||M&&e.className!==o)&&(r==null?e.removeAttribute("class"):e.className=o,e.__className=o)}function ys(e){return e??""}function er(e,r,t=r){var o=ps();ct(e,"input",s=>{var i=s?e.defaultValue:e.value;i=We(e)?Ve(i):i,t(i),o&&i!==(i=r())&&(e.value=i??"")}),(M&&e.defaultValue!==e.value||ds(r)==null&&e.value)&&t(We(e)?Ve(e.value):e.value),gs(()=>{var s=r();We(e)&&s===Ve(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function We(e){var r=e.type;return r==="number"||r==="range"}function Ve(e){return e===""?null:+e}function gt(e,r,t){if(e.multiple)return Gs(e,r);for(var o of e.options){var s=ve(o);if(_s(s,r)){o.selected=!0;return}}(!t||r!==void 0)&&(e.selectedIndex=-1)}function ks(e,r){it(()=>{var t=new MutationObserver(()=>{var o=e.__value;gt(e,o)});return t.observe(e,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),()=>{t.disconnect()}})}function Ps(e,r,t=r){var o=!0;ct(e,"change",s=>{var i=s?"[selected]":":checked",a;if(e.multiple)a=[].map.call(e.querySelectorAll(i),ve);else{var u=e.querySelector(i)??e.querySelector("option:not([disabled])");a=u&&ve(u)}t(a)}),it(()=>{var s=r();if(gt(e,s,o),o&&s===void 0){var i=e.querySelector(":checked");i!==null&&(s=ve(i),t(s))}e.__value=s,o=!1}),ks(e)}function Gs(e,r){for(var t of e.options)t.selected=~r.indexOf(ve(t))}function ve(e){return"__value"in e?e.__value:e.value}const Os=5e-4,Rs=["created","open","closed","canceled"],As=["btc","eth","ada"],Ss=["1min","3min","15min"];function ht(){return{status:"created",date:Date.now(),report:"",note:"",symbol:"btc",timeFrame:"3min",longShort:"long",risk:0,riskRewardRatio:"",account:0,amount:0,entry:0,takeProfit:0,stopLoss:0,pnl:0,taker:Os,maker:0}}function Fs(e,r,t,o){if(!o||!t)return 0;const s=Math.abs(o/t-1);return mt(r/e*s,4)}function Cs(e,r){return r<e?"long":"short"}function Us(e,r,t,o){if(!r||!t||!o)return 0;const s=r-o/t*r;return mt(e=="long"?s*-1:s,2)}function Ds(e,r,t){const o=Math.abs(e-t),s=Math.abs(e-r),i=Math.min(o,s),a=Math.round(o/i*10)/10,u=Math.round(s/i*10)/10;return a+" / "+u}function mt(e,r){return Number(e.toFixed(r))}var Ls=(e,r)=>!r()&&e.stopPropagation(),Is=te('<option class="svelte-pz2dud"> </option>'),js=te('<select class="svelte-pz2dud"></select>'),xs=te("<td><!></td>");function N(e,r){Ge(r,!0);let t=V(void 0),o=Te(r,"value",15),s=Te(r,"disabled",3,!0),i=Te(r,"options",19,()=>[]);const a=T=>{var m;switch(r.type){case"text":o(T.currentTarget.innerText);break;case"currency":o(Number(T.currentTarget.innerText));break;case"date":o(new Date(T.currentTarget.innerText).valueOf());break}const E=new Event("change",{bubbles:!0});(m=y(t))==null||m.dispatchEvent(E)};var u=xs();u.__dblclick=[Ls,s];var g=re(u);{var _=T=>{var E=Ne();X(()=>Fe(E,o())),B(T,E)},f=T=>{var E=Be(),m=Ee(E);{var k=v=>{var P=Ne();X(()=>Fe(P,new Date(Number(o())).toLocaleString("en-GB",{timeZone:"UTC"}))),B(v,P)},O=v=>{var P=Be(),S=Ee(P);{var U=G=>{var R=Be(),F=Ee(R);{var A=$=>{var x=Ne();X(()=>Fe(x,o())),B($,x)},D=$=>{var x=js();lt(x,21,i,Es,(z,W)=>{var Y=Is(),Z={},se=re(Y,!0);Q(Y),X(()=>{Z!==(Z=y(W))&&(Y.value=(Y.__value=y(W))==null?"":y(W)),Fe(se,y(W))}),B(z,Y)}),Q(x),X(()=>x.disabled=s()),Ps(x,o),B($,x)};_e(F,$=>{s()?$(A):$(D,!1)})}B(G,R)};_e(S,G=>{r.type=="select"&&G(U)},!0)}B(v,P)};_e(m,v=>{r.type=="date"?v(k):v(O,!1)},!0)}B(T,E)};_e(g,T=>{r.type=="text"||r.type=="currency"?T(_):T(f,!1)})}Q(u),cr(u,T=>H(t,T),()=>y(t)),X(()=>{Le(u,"contenteditable",s()||r.type=="select"?!1:"plaintext-only"),dt(u,`${r.type??""} svelte-pz2dud`)}),ar("blur",u,a),B(e,u),Oe()}ir(["dblclick"]);var qs=(e,r,t)=>r()(t),$s=te("<tr><!><!><!><!><!><!><!><!><!><!><!><!><!><!></tr>");function Ns(e,r){Ge(r,!0);let t=Te(r,"onchange",3,()=>{}),o=Te(r,"ondblclick",3,()=>{}),s=we(r.trade),i=ue(()=>s.status=="closed"||s.status=="canceled");const a=()=>{console.log("handle change trade row"),t()({...s,longShort:Cs(s.entry,s.stopLoss),risk:Fs(s.account,s.amount,s.entry,s.stopLoss),riskRewardRatio:Ds(s.entry,s.takeProfit,s.stopLoss),pnl:Us(s.longShort,s.amount,s.entry,s.exit)})};var u=$s();u.__dblclick=[qs,o,s],u.__change=a;var g=re(u);N(g,{type:"select",options:Rs,disabled:!1,get value(){return s.status},set value(A){s.status=A}});var _=L(g);N(_,{type:"date",get value(){return s.date}});var f=L(_);N(f,{type:"select",options:As,get disabled(){return y(i)},get value(){return s.symbol},set value(A){s.symbol=A}});var T=L(f);N(T,{type:"select",options:Ss,get disabled(){return y(i)},get value(){return s.timeFrame},set value(A){s.timeFrame=A}});var E=L(T);N(E,{type:"text",get value(){return s.longShort}});var m=L(E);N(m,{type:"currency",get disabled(){return y(i)},get value(){return s.account},set value(A){s.account=A}});var k=L(m);N(k,{type:"currency",get disabled(){return y(i)},get value(){return s.amount},set value(A){s.amount=A}});var O=L(k);N(O,{type:"currency",get disabled(){return y(i)},get value(){return s.entry},set value(A){s.entry=A}});var v=L(O);N(v,{type:"currency",get disabled(){return y(i)},get value(){return s.takeProfit},set value(A){s.takeProfit=A}});var P=L(v);N(P,{type:"currency",get disabled(){return y(i)},get value(){return s.stopLoss},set value(A){s.stopLoss=A}});var S=L(P);N(S,{type:"currency",get disabled(){return y(i)},get value(){return s.exit},set value(A){s.exit=A}});var U=L(S),G=ue(()=>"%"+(s.risk*100).toFixed(2));N(U,{type:"text",get value(){return y(G)}});var R=L(U);N(R,{type:"text",get value(){return s.riskRewardRatio}});var F=L(R);N(F,{type:"currency",get value(){return s.pnl}}),Q(u),X(()=>dt(u,`${s.status??""} svelte-xfwjdn`)),ar("blur",u,a),B(e,u),Oe()}ir(["dblclick","change"]);var Bs=te('<textarea placeholder="Describe how the trade went"></textarea> <input placeholder="https://www.tradingview.com/x/HEUPOgtN/"> <img alt="Chart" class="svelte-5cpl6x">',1),Hs=te('<dialog class="svelte-5cpl6x"><div class="flex-column gap-1"><!></div></dialog>');function Ms(e,r){Ge(r,!0);let t=V(void 0),o=V(void 0),s=V(m=>{}),i=ue(()=>y(o)==null||y(o).status=="closed"||y(o).status=="canceled"),a=V("");at(()=>{var v,P;const m=(v=y(o))==null?void 0:v.report.match(new RegExp("(?<=https:\\/\\/www.tradingview.com\\/x\\/)(.*)(?=\\/)","g")),k=m==null?void 0:m[0],O=(P=k==null?void 0:k[0])==null?void 0:P.toLowerCase();H(a,`https://s3.tradingview.com/snapshots/${O}/${k}.png`)});const u=()=>{var m;y(s)(y(o)),(m=y(t))==null||m.close()},g=(m,k)=>{var O;H(o,we(m)),H(s,we(k)),(O=y(t))==null||O.showModal()};var _=Hs(),f=re(_),T=re(f);{var E=m=>{var k=Bs(),O=Ee(k);ms(O);var v=L(O,2);pt(v);var P=L(v,2);X(()=>{O.disabled=y(i),v.disabled=y(i),Le(P,"src",y(a))}),er(O,()=>y(o).note,S=>y(o).note=S),er(v,()=>y(o).report,S=>y(o).report=S),B(m,k)};_e(T,m=>{y(o)&&m(E)})}return Q(f),Q(_),cr(_,m=>H(t,m),()=>y(t)),ar("close",_,u),B(e,_),Oe({show:g})}var Ws=te("<table><thead><tr><th>STATUS</th><th>DATE</th><th>SYMBOL</th><th>TF</th><th>L / S</th><th>ACCOUNT</th><th>AMOUNT</th><th>ENTRY</th><th>TP</th><th>SL</th><th>EXIT</th><th>RISK</th><th>R/R</th><th>PNL</th></tr></thead><tbody></tbody></table>");function Vs(e,r){Ge(r,!0);const t=(i,a)=>{r.onchange(r.trades.toSpliced(i,1,a))};var o=Ws(),s=L(re(o));lt(s,23,()=>r.trades,i=>i.date,(i,a,u)=>{Ns(i,{get trade(){return y(a)},onchange:g=>t(y(u),g),get ondblclick(){return r.ondblclick}})}),Q(s),Q(o),B(e,o),Oe()}const ze="trading",Ke="trades.json";class Je{static async getUser(r){try{const{data:t}=await r.rest.users.getAuthenticated();return console.log("Token is valid. Authenticated as:",t.login),t}catch(t){return console.error("An error occurred:",t),null}}static async getTrades(r,t){try{const{data:o}=await r.rest.repos.getContent({mediaType:{format:"raw"},owner:t||"",repo:ze,path:Ke});return JSON.parse(o)}catch(o){return console.error("An error occurred while fetching trades:",o),[]}}static async setTrades(r,t,o){try{const{data:s}=await r.rest.repos.getContent({owner:t,repo:ze,path:Ke}),i=Array.isArray(s)?s[0]:s;if("sha"in i){const a=btoa(JSON.stringify(o));return await r.rest.repos.createOrUpdateFileContents({owner:t,repo:ze,path:Ke,message:"Trades synced",content:a,sha:i.sha}),console.log("File updated successfully!"),!0}}catch(s){console.error("An error occurred while setting trades:",s)}return!1}}function Ie(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function lr(e,r,t,o){if(typeof t!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce((s,i)=>lr.bind(null,e,i,s,o),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((s,i)=>i.hook.bind(null,s,o),t)():t(o))}function zs(e,r,t,o){const s=o;e.registry[t]||(e.registry[t]=[]),r==="before"&&(o=(i,a)=>Promise.resolve().then(s.bind(null,a)).then(i.bind(null,a))),r==="after"&&(o=(i,a)=>{let u;return Promise.resolve().then(i.bind(null,a)).then(g=>(u=g,s(u,a))).then(()=>u)}),r==="error"&&(o=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(u=>s(u,a))),e.registry[t].push({hook:o,orig:s})}function Ks(e,r,t){if(!e.registry[r])return;const o=e.registry[r].map(s=>s.orig).indexOf(t);o!==-1&&e.registry[r].splice(o,1)}const Br=Function.bind,Hr=Br.bind(Br);function _t(e,r,t){const o=Hr(Ks,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(s=>{const i=t?[r,s,t]:[r,s];e[s]=e.api[s]=Hr(zs,null).apply(null,i)})}function Js(){const e=Symbol("Singular"),r={registry:{}},t=lr.bind(null,r,e);return _t(t,r,e),t}function Qs(){const e={registry:{}},r=lr.bind(null,e);return _t(r,e),r}const Ys={Singular:Js,Collection:Qs};var Xs="0.0.0-development",Zs=`octokit-endpoint.js/${Xs} ${Ie()}`,eo={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Zs},mediaType:{format:""}};function ro(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function to(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function ft(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{to(r[o])?o in e?t[o]=ft(e[o],r[o]):Object.assign(t,{[o]:r[o]}):Object.assign(t,{[o]:r[o]})}),t}function Mr(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function rr(e,r,t){var s;if(typeof r=="string"){let[i,a]=r.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},r);t.headers=ro(t.headers),Mr(t),Mr(t.headers);const o=ft(e||{},t);return t.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function so(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return o.length===0?e:e+t+o.map(s=>s==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(r[s])}`).join("&")}var oo=/\{[^}]+\}/g;function no(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function io(e){const r=e.match(oo);return r?r.map(no).reduce((t,o)=>t.concat(o),[]):[]}function Wr(e,r){const t={__proto__:null};for(const o of Object.keys(e))r.indexOf(o)===-1&&(t[o]=e[o]);return t}function Et(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function ce(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function me(e,r,t){return r=e==="+"||e==="#"?Et(r):ce(r),t?ce(t)+"="+r:r}function ie(e){return e!=null}function Qe(e){return e===";"||e==="&"||e==="?"}function ao(e,r,t,o){var s=e[t],i=[];if(ie(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(me(r,s,Qe(r)?t:""));else if(o==="*")Array.isArray(s)?s.filter(ie).forEach(function(a){i.push(me(r,a,Qe(r)?t:""))}):Object.keys(s).forEach(function(a){ie(s[a])&&i.push(me(r,s[a],a))});else{const a=[];Array.isArray(s)?s.filter(ie).forEach(function(u){a.push(me(r,u))}):Object.keys(s).forEach(function(u){ie(s[u])&&(a.push(ce(u)),a.push(me(r,s[u].toString())))}),Qe(r)?i.push(ce(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else r===";"?ie(s)&&i.push(ce(t)):s===""&&(r==="&"||r==="?")?i.push(ce(t)+"="):s===""&&i.push("");return i}function co(e){return{expand:lo.bind(null,e)}}function lo(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let u="";const g=[];if(t.indexOf(s.charAt(0))!==-1&&(u=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(_){var f=/([^:\*]*)(?::(\d+)|(\*))?/.exec(_);g.push(ao(r,u,f[1],f[2]||f[3]))}),u&&u!=="+"){var a=",";return u==="?"?a="&":u!=="#"&&(a=u),(g.length!==0?u:"")+g.join(a)}else return g.join(",")}else return Et(i)}),e==="/"?e:e.replace(/\/$/,"")}function Tt(e){var f;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=Wr(e,["method","baseUrl","url","headers","request","mediaType"]);const a=io(t);t=co(t).expand(i),/^http/.test(t)||(t=e.baseUrl+t);const u=Object.keys(e).filter(T=>a.includes(T)).concat("baseUrl"),g=Wr(i,u);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(T=>T.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(f=e.mediaType.previews)!=null&&f.length)){const T=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=T.concat(e.mediaType.previews).map(E=>{const m=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${E}-preview${m}`}).join(",")}return["GET","HEAD"].includes(r)?t=so(t,g):"data"in g?s=g.data:Object.keys(g).length&&(s=g),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof s>"u"&&(s=""),Object.assign({method:r,url:t,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function uo(e,r,t){return Tt(rr(e,r,t))}function vt(e,r){const t=rr(e,r),o=uo.bind(null,t);return Object.assign(o,{DEFAULTS:t,defaults:vt.bind(null,t),merge:rr.bind(null,t),parse:Tt})}var po=vt(null,eo),Vr=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function go(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var ae={},zr;function ho(){if(zr)return ae;zr=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,o=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,s={type:"",parameters:new e};Object.freeze(s.parameters),Object.freeze(s);function i(u){if(typeof u!="string")throw new TypeError("argument header is required and must be a string");let g=u.indexOf(";");const _=g!==-1?u.slice(0,g).trim():u.trim();if(o.test(_)===!1)throw new TypeError("invalid media type");const f={type:_.toLowerCase(),parameters:new e};if(g===-1)return f;let T,E,m;for(r.lastIndex=g;E=r.exec(u);){if(E.index!==g)throw new TypeError("invalid parameter format");g+=E[0].length,T=E[1].toLowerCase(),m=E[2],m[0]==='"'&&(m=m.slice(1,m.length-1),t.test(m)&&(m=m.replace(t,"$1"))),f.parameters[T]=m}if(g!==u.length)throw new TypeError("invalid parameter format");return f}function a(u){if(typeof u!="string")return s;let g=u.indexOf(";");const _=g!==-1?u.slice(0,g).trim():u.trim();if(o.test(_)===!1)return s;const f={type:_.toLowerCase(),parameters:new e};if(g===-1)return f;let T,E,m;for(r.lastIndex=g;E=r.exec(u);){if(E.index!==g)return s;g+=E[0].length,T=E[1].toLowerCase(),m=E[2],m[0]==='"'&&(m=m.slice(1,m.length-1),t.test(m)&&(m=m.replace(t,"$1"))),f.parameters[T]=m}return g!==u.length?s:f}return ae.default={parse:i,safeParse:a},ae.parse=i,ae.safeParse=a,ae.defaultContentType=s,ae}var mo=ho();class fe extends Error{constructor(t,o,s){super(t);I(this,"name");I(this,"status");I(this,"request");I(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const i=Object.assign({},s.request);s.request.headers.authorization&&(i.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var _o="0.0.0-development",fo={headers:{"user-agent":`octokit-request.js/${_o} ${Ie()}`}};function Eo(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function Kr(e){var T,E,m,k,O;const r=((T=e.request)==null?void 0:T.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((E=e.request)==null?void 0:E.log)||console,o=((m=e.request)==null?void 0:m.parseSuccessResponseBody)!==!1,s=Eo(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([v,P])=>[v,String(P)]));let a;try{a=await r(e.url,{method:e.method,body:s,redirect:(k=e.request)==null?void 0:k.redirect,headers:i,signal:(O=e.request)==null?void 0:O.signal,...e.body&&{duplex:"half"}})}catch(v){let P="Unknown Error";if(v instanceof Error){if(v.name==="AbortError")throw v.status=500,v;P=v.message,v.name==="TypeError"&&"cause"in v&&(v.cause instanceof Error?P=v.cause.message:typeof v.cause=="string"&&(P=v.cause))}const S=new fe(P,500,{request:e});throw S.cause=v,S}const u=a.status,g=a.url,_={};for(const[v,P]of a.headers)_[v]=P;const f={url:g,status:u,headers:_,data:""};if("deprecation"in _){const v=_.link&&_.link.match(/<([^>]+)>; rel="deprecation"/),P=v&&v.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${_.sunset}${P?`. See ${P}`:""}`)}if(u===204||u===205)return f;if(e.method==="HEAD"){if(u<400)return f;throw new fe(a.statusText,u,{response:f,request:e})}if(u===304)throw f.data=await Ye(a),new fe("Not modified",u,{response:f,request:e});if(u>=400)throw f.data=await Ye(a),new fe(To(f.data),u,{response:f,request:e});return f.data=o?await Ye(a):a.body,f}async function Ye(e){var o;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=mo.safeParse(r);if(t.type==="application/json"){let s="";try{return s=await e.text(),JSON.parse(s)}catch{return s}}else return t.type.startsWith("text/")||((o=t.parameters.charset)==null?void 0:o.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function To(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function tr(e,r){const t=e.defaults(r);return Object.assign(function(s,i){const a=t.merge(s,i);if(!a.request||!a.request.hook)return Kr(t.parse(a));const u=(g,_)=>Kr(t.parse(t.merge(g,_)));return Object.assign(u,{endpoint:t,defaults:tr.bind(null,t)}),a.request.hook(u,a)},{endpoint:t,defaults:tr.bind(null,t)})}var sr=tr(po,fo),vo="0.0.0-development";function bo(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var wo=class extends Error{constructor(r,t,o){super(bo(o));I(this,"name","GraphqlResponseError");I(this,"errors");I(this,"data");this.request=r,this.headers=t,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},yo=["method","baseUrl","url","headers","request","query","mediaType"],ko=["query","method","url"],Jr=/\/api\/v3\/?$/;function Po(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(ko.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const o=typeof r=="string"?Object.assign({query:r},t):r,s=Object.keys(o).reduce((a,u)=>yo.includes(u)?(a[u]=o[u],a):(a.variables||(a.variables={}),a.variables[u]=o[u],a),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Jr.test(i)&&(s.url=i.replace(Jr,"/api/graphql")),e(s).then(a=>{if(a.data.errors){const u={};for(const g of Object.keys(a.headers))u[g]=a.headers[g];throw new wo(s,u,a.data)}return a.data.data})}function ur(e,r){const t=e.defaults(r);return Object.assign((s,i)=>Po(t,s,i),{defaults:ur.bind(null,t),endpoint:t.endpoint})}ur(sr,{headers:{"user-agent":`octokit-graphql.js/${vo} ${Ie()}`},method:"POST",url:"/graphql"});function Go(e){return ur(e,{method:"POST",url:"/graphql"})}var Oo=/^v1\./,Ro=/^ghs_/,Ao=/^ghu_/;async function So(e){const r=e.split(/\./).length===3,t=Oo.test(e)||Ro.test(e),o=Ao.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}function Fo(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Co(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=Fo(e),r(s)}var Uo=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(So.bind(null,r),{hook:Co.bind(null,r)})};const bt="6.1.2",Qr=()=>{},Do=console.warn.bind(console),Lo=console.error.bind(console),Yr=`octokit-core.js/${bt} ${Ie()}`;var Ce;let Io=(Ce=class{constructor(r={}){I(this,"request");I(this,"graphql");I(this,"log");I(this,"hook");I(this,"auth");const t=new Ys.Collection,o={baseUrl:sr.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=r.userAgent?`${r.userAgent} ${Yr}`:Yr,r.baseUrl&&(o.baseUrl=r.baseUrl),r.previews&&(o.mediaType.previews=r.previews),r.timeZone&&(o.headers["time-zone"]=r.timeZone),this.request=sr.defaults(o),this.graphql=Go(this.request).defaults(o),this.log=Object.assign({debug:Qr,info:Qr,warn:Do,error:Lo},r.log),this.hook=t,r.authStrategy){const{authStrategy:i,...a}=r,u=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",u.hook),this.auth=u}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=Uo(r.auth);t.wrap("request",i.hook),this.auth=i}const s=this.constructor;for(let i=0;i<s.plugins.length;++i)Object.assign(this,s.plugins[i](this,r))}static defaults(r){return class extends this{constructor(...o){const s=o[0]||{};if(typeof r=="function"){super(r(s));return}super(Object.assign({},r,s,s.userAgent&&r.userAgent?{userAgent:`${s.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var s;const t=this.plugins;return s=class extends this{},I(s,"plugins",t.concat(r.filter(i=>!t.includes(i)))),s}},I(Ce,"VERSION",bt),I(Ce,"plugins",[]),Ce);var jo="0.0.0-development";function xo(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof t<"u"&&(e.data.incomplete_results=t),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function pr(e,r,t){const o=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),s=typeof r=="function"?r:e.request,i=o.method,a=o.headers;let u=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!u)return{done:!0};try{const g=await s({method:i,url:u,headers:a}),_=xo(g);return u=((_.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:_}}catch(g){if(g.status!==409)throw g;return u="",{value:{status:200,headers:{},data:[]}}}}})}}function wt(e,r,t,o){return typeof t=="function"&&(o=t,t=void 0),yt(e,[],pr(e,r,t)[Symbol.asyncIterator](),o)}function yt(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let i=!1;function a(){i=!0}return r=r.concat(o?o(s.value,a):s.value.data),i?r:yt(e,r,t,o)})}Object.assign(wt,{iterator:pr});function kt(e){return{paginate:Object.assign(wt.bind(null,e),{iterator:pr.bind(null,e)})}}kt.VERSION=jo;var qo=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,$o=class extends Error{constructor(r,t){super(qo(r.pathInQuery,t));I(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},No=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);I(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Bo=e=>Object.prototype.toString.call(e)==="[object Object]";function Pt(e){const r=Gt(e,"pageInfo");if(r.length===0)throw new No(e);return r}var Gt=(e,r,t=[])=>{for(const o of Object.keys(e)){const s=[...t,o],i=e[o];if(Bo(i)){if(i.hasOwnProperty(r))return s;const a=Gt(i,r,s);if(a.length>0)return a}}return[]},be=(e,r)=>r.reduce((t,o)=>t[o],e),Xe=(e,r,t)=>{const o=r[r.length-1],s=[...r].slice(0,-1),i=be(e,s);typeof t=="function"?i[o]=t(i[o]):i[o]=t},Ho=e=>{const r=Pt(e);return{pathInQuery:r,pageInfo:be(e,[...r,"pageInfo"])}},Ot=e=>e.hasOwnProperty("hasNextPage"),Mo=e=>Ot(e)?e.endCursor:e.startCursor,Wo=e=>Ot(e)?e.hasNextPage:e.hasPreviousPage,Rt=e=>(r,t={})=>{let o=!0,s={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(r,s),a=Ho(i),u=Mo(a.pageInfo);if(o=Wo(a.pageInfo),o&&u===s.cursor)throw new $o(a,u);return s={...s,cursor:u},{done:!1,value:i}}})}},Vo=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=Pt(e),o=[...t,"nodes"],s=be(r,o);s&&Xe(e,o,g=>[...g,...s]);const i=[...t,"edges"],a=be(r,i);a&&Xe(e,i,g=>[...g,...a]);const u=[...t,"pageInfo"];return Xe(e,u,be(r,u)),e},zo=e=>{const r=Rt(e);return async(t,o={})=>{let s={};for await(const i of r(t,o))s=Vo(s,i);return s}};function Ko(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(zo(e),{iterator:Rt(e)})})}}const Jo="13.2.6",Qo={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var Yo=Qo;const ne=new Map;for(const[e,r]of Object.entries(Yo))for(const[t,o]of Object.entries(r)){const[s,i,a]=o,[u,g]=s.split(/ /),_=Object.assign({method:u,url:g},i);ne.has(e)||ne.set(e,new Map),ne.get(e).set(t,{scope:e,methodName:t,endpointDefaults:_,decorations:a})}const Xo={has({scope:e},r){return ne.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...ne.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},o){if(t[o])return t[o];const s=ne.get(r).get(o);if(!s)return;const{endpointDefaults:i,decorations:a}=s;return a?t[o]=en(e,r,o,i,a):t[o]=e.request.defaults(i),t[o]}};function Zo(e){const r={};for(const t of ne.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},Xo);return r}function en(e,r,t,o,s){const i=e.request.defaults(o);function a(...u){let g=i.endpoint.merge(...u);if(s.mapToData)return g=Object.assign({},g,{data:g[s.mapToData],[s.mapToData]:void 0}),i(g);if(s.renamed){const[_,f]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${_}.${f}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const _=i.endpoint.merge(...u);for(const[f,T]of Object.entries(s.renamedParameters))f in _&&(e.log.warn(`"${f}" parameter is deprecated for "octokit.${r}.${t}()". Use "${T}" instead`),T in _||(_[T]=_[f]),delete _[f]);return i(_)}return i(...u)}return Object.assign(a,i)}function At(e){return{rest:Zo(e)}}At.VERSION=Jo;var De={exports:{}},rn=De.exports,Xr;function tn(){return Xr||(Xr=1,function(e,r){(function(t,o){e.exports=o()})(rn,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Vr<"u"?Vr:typeof self<"u"?self:{};function o(w){return w&&w.default||w}var s=function(w,c,n={}){var l,p,d;for(l in c)d=c[l],n[l]=(p=w[l])!=null?p:d;return n},i=function(w,c,n={}){var l,p;for(l in w)p=w[l],c[l]!==void 0&&(n[l]=p);return n},a={load:s,overwrite:i},u;u=class{constructor(c,n){this.incr=c,this.decr=n,this._first=null,this._last=null,this.length=0}push(c){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,n,l;for(c=this._first,l=[];c!=null;)l.push((n=c,c=c.next,n.value));return l}forEachShift(c){var n;for(n=this.shift();n!=null;)c(n),n=this.shift()}debug(){var c,n,l,p,d;for(c=this._first,d=[];c!=null;)d.push((n=c,c=c.next,{value:n.value,prev:(l=n.prev)!=null?l.value:void 0,next:(p=n.next)!=null?p.value:void 0}));return d}};var g=u,_;_=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,l)=>this._addListener(n,"many",l),this.instance.once=(n,l)=>this._addListener(n,"once",l),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(c,n,l){var p;return(p=this._events)[c]==null&&(p[c]=[]),this._events[c].push({cb:l,status:n}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}async trigger(c,...n){var l,p;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,n),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(d){return d.status!=="none"}),p=this._events[c].map(async d=>{var h,b;if(d.status!=="none"){d.status==="once"&&(d.status="none");try{return b=typeof d.cb=="function"?d.cb(...n):void 0,typeof(b!=null?b.then:void 0)=="function"?await b:b}catch(C){return h=C,this.trigger("error",h),null}}}),(await Promise.all(p)).find(function(d){return d!=null}))}catch(d){return l=d,this.trigger("error",l),null}}};var f=_,T,E,m;T=g,E=f,m=class{constructor(c){this.Events=new E(this),this._length=0,this._lists=(function(){var n,l,p;for(p=[],n=1,l=c;1<=l?n<=l:n>=l;1<=l?++n:--n)p.push(new T(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(n){return n.forEachShift(c)})}getFirst(c=this._lists){var n,l,p;for(n=0,l=c.length;n<l;n++)if(p=c[n],p.length>0)return p;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var k=m,O;O=class extends Error{};var v=O,P,S,U,G,R;G=10,S=5,R=a,P=v,U=class{constructor(c,n,l,p,d,h,b,C){this.task=c,this.args=n,this.rejectOnDrop=d,this.Events=h,this._states=b,this.Promise=C,this.options=R.load(l,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((j,q)=>{this._resolve=j,this._reject=q}),this.retryCount=0}_sanitizePriority(c){var n;return n=~~c!==c?S:c,n<0?0:n>G-1?G-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new P(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var n;if(n=this._states.jobStatus(this.options.id),!(n===c||c==="DONE"&&n===null))throw new P(`Invalid job status ${n}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(c,n,l,p){var d,h,b;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),h={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",h);try{if(b=await(c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(h),await p(this.options,h),this._assertStatus("DONE"),this._resolve(b)}catch(C){return d=C,this._onFailure(d,h,n,l,p)}}doExpire(c,n,l){var p,d;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},p=new P(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,d,c,n,l)}async _onFailure(c,n,l,p,d){var h,b;if(l())return h=await this.Events.trigger("failed",c,n),h!=null?(b=~~h,this.Events.trigger("retry",`Retrying ${this.options.id} after ${b} ms`,n),this.retryCount++,p(b)):(this.doDone(n),await d(this.options,n),this._assertStatus("DONE"),this._reject(c))}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var F=U,A,D,$;$=a,A=v,D=class{constructor(c,n,l){this.instance=c,this.storeOptions=n,this.clientId=this.instance._randomIndex(),$.load(l,l,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var n,l,p,d,h;if(d=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&d>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=d,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&d>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:p,reservoir:h}=this.storeOptions,this._lastReservoirIncrease=d,l=p!=null?Math.min(n,p-h):n,l>0))return this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}async __publish__(c){return await this.yieldLoop(),this.instance.Events.trigger("message",c.toString())}async __disconnect__(c){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(c=0){return new this.Promise(function(n,l){return setTimeout(n,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}async __updateSettings__(c){return await this.yieldLoop(),$.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(c){return await this.yieldLoop(),this._nextRequest+this.timeout<c}computeCapacity(){var c,n;return{maxConcurrent:c,reservoir:n}=this.storeOptions,c!=null&&n!=null?Math.min(c-this._running,n):c!=null?c-this._running:n??null}conditionsCheck(c){var n;return n=this.computeCapacity(),n==null||c<=n}async __incrementReservoir__(c){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(c){return this._unblockTime>=c}check(c,n){return this.conditionsCheck(c)&&this._nextRequest-n<=0}async __check__(c){var n;return await this.yieldLoop(),n=Date.now(),this.check(c,n)}async __register__(c,n,l){var p,d;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),d=Math.max(this._nextRequest-p,0),this._nextRequest=p+d+this.storeOptions.minTime,{success:!0,wait:d,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(c,n){var l,p,d;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new A(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),d=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(n,p),l=this.strategyIsBlock()&&(d||this.isBlocked(p)),l&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:d,blocked:l,strategy:this.storeOptions.strategy}}async __free__(c,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var x=D,z,W;z=v,W=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var n,l;if(n=this._jobs[c],l=n+1,n!=null&&l<this.status.length)return this.counts[n]--,this.counts[l]++,this._jobs[c]++;if(n!=null)return this.counts[n]--,delete this._jobs[c]}start(c){var n;return n=0,this._jobs[c]=n,this.counts[n]++}remove(c){var n;return n=this._jobs[c],n!=null&&(this.counts[n]--,delete this._jobs[c]),n!=null}jobStatus(c){var n;return(n=this.status[this._jobs[c]])!=null?n:null}statusJobs(c){var n,l,p,d,h;if(c!=null){if(l=this.status.indexOf(c),l<0)throw new z(`status must be one of ${this.status.join(", ")}`);p=this._jobs,d=[];for(n in p)h=p[n],h===l&&d.push(n);return d}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,n,l)=>(c[this.status[l]]=n,c),{})}};var Y=W,Z,se;Z=g,se=class{constructor(c,n){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=n,this._running=0,this._queue=new Z}isEmpty(){return this._queue.length===0}async _tryToRun(){var c,n,l,p,d,h,b;if(this._running<1&&this._queue.length>0)return this._running++,{task:b,args:c,resolve:d,reject:p}=this._queue.shift(),n=await async function(){try{return h=await b(...c),function(){return d(h)}}catch(C){return l=C,function(){return p(l)}}}(),this._running--,this._tryToRun(),n()}schedule(c,...n){var l,p,d;return d=p=null,l=new this.Promise(function(h,b){return d=h,p=b}),this._queue.push({task:c,args:n,resolve:d,reject:p}),this._tryToRun(),l}};var Re=se,pe="2.19.5",Ae={version:pe},Dt=Object.freeze({version:pe,default:Ae}),gr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),hr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Lt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),mr,_r,fr,Er,Tr,Se;Se=a,mr=f,Er=gr,fr=hr,Tr=Lt,_r=(function(){class w{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,Se.load(this.limiterOptions,this.defaults,this),this.Events=new mr(this),this.instances={},this.Bottleneck=Sr,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Er(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new fr(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var l;return(l=this.instances[n])!=null?l:(()=>{var p;return p=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,n),p})()}async deleteKey(n=""){var l,p;return p=this.instances[n],this.connection&&(l=await this.connection.__runCommand__(["del",...Tr.allKeys(`${this.id}-${n}`)])),p!=null&&(delete this.instances[n],await p.disconnect()),p!=null||l>0}limiters(){var n,l,p,d;l=this.instances,p=[];for(n in l)d=l[n],p.push({key:n,limiter:d});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,l,p,d,h,b,C,j,q;if(this.connection==null)return this.Promise.resolve(this.keys());for(b=[],n=null,q=`b_${this.id}-`.length,l=9;n!==0;)for([j,p]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~j,d=0,C=p.length;d<C;d++)h=p[d],b.push(h.slice(q,-l));return b}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var l,p,d,h,b,C;b=Date.now(),d=this.instances,h=[];for(p in d){C=d[p];try{await C._store.__groupCheck__(b)?h.push(this.deleteKey(p)):h.push(void 0)}catch(j){l=j,h.push(C.Events.trigger("error",l))}}return h},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(Se.overwrite(n,this.defaults,this),Se.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var l;if(!this.sharedConnection)return(l=this.connection)!=null?l.disconnect(n):void 0}}return w.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},w}).call(t);var It=_r,vr,br,wr;wr=a,br=f,vr=(function(){class w{constructor(n={}){this.options=n,wr.load(this.options,this.defaults,this),this.Events=new br(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,l)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var l;return this._arr.push(n),l=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),l}}return w.prototype.defaults={maxTime:null,maxSize:null,Promise},w}).call(t);var jt=vr,xt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),qt=o(Dt),yr,kr,je,xe,Pr,qe,Gr,Or,Rr,$e,K,Ar=[].splice;qe=10,kr=5,K=a,Gr=k,xe=F,Pr=x,Or=xt,je=f,Rr=Y,$e=Re,yr=(function(){class w{constructor(n={},...l){var p,d;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,l),K.load(n,this.instanceDefaults,this),this._queues=new Gr(qe),this._scheduled={},this._states=new Rr(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new je(this),this._submitLock=new $e("submit",this.Promise),this._registerLock=new $e("register",this.Promise),d=K.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=K.load(n,this.redisStoreDefaults,{}),new Or(this,d,p);if(this.datastore==="local")return p=K.load(n,this.localStoreDefaults,{}),new Pr(this,d,p);throw new w.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var h;return(h=this._store.heartbeat)!=null&&typeof h.ref=="function"?h.ref():void 0}),this._queues.on("zero",()=>{var h;return(h=this._store.heartbeat)!=null&&typeof h.unref=="function"?h.unref():void 0})}_validateOptions(n,l){if(!(n!=null&&typeof n=="object"&&l.length===0))throw new w.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,l,p,d){var h,b;try{if({running:b}=await this._store.__free__(n,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,d),b===0&&this.empty())return this.Events.trigger("idle")}catch(C){return h=C,this.Events.trigger("error",h)}}_run(n,l,p){var d,h,b;return l.doRun(),d=this._clearGlobalState.bind(this,n),b=this._run.bind(this,n,l),h=this._free.bind(this,n,l),this._scheduled[n]={timeout:setTimeout(()=>l.doExecute(this._limiter,d,b,h),p),expiration:l.options.expiration!=null?setTimeout(function(){return l.doExpire(d,b,h)},p+l.options.expiration):void 0,job:l}}_drainOne(n){return this._registerLock.schedule(()=>{var l,p,d,h,b;return this.queued()===0?this.Promise.resolve(null):(b=this._queues.getFirst(),{options:h,args:l}=d=b.first(),n!=null&&h.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${h.id}`,{args:l,options:h}),p=this._randomIndex(),this._store.__register__(p,h.weight,h.expiration).then(({success:C,wait:j,reservoir:q})=>{var de;return this.Events.trigger("debug",`Drained ${h.id}`,{success:C,args:l,options:h}),C?(b.shift(),de=this.empty(),de&&this.Events.trigger("empty"),q===0&&this.Events.trigger("depleted",de),this._run(p,d,j),this.Promise.resolve(h.weight)):this.Promise.resolve(null)})))})}_drainAll(n,l=0){return this._drainOne(n).then(p=>{var d;return p!=null?(d=n!=null?n-p:n,this._drainAll(d,l+p)):this.Promise.resolve(l)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(n){return this._queues.shiftAll(function(l){return l.doDrop({message:n})})}stop(n={}){var l,p;return n=K.load(n,this.stopDefaults),p=d=>{var h;return h=()=>{var b;return b=this._states.counts,b[0]+b[1]+b[2]+b[3]===d},new this.Promise((b,C)=>h()?b():this.on("done",()=>{if(h())return this.removeAllListeners("done"),b()}))},l=n.dropWaitingJobs?(this._run=function(d,h){return h.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var d,h,b;h=this._scheduled;for(d in h)b=h[d],this.jobStatus(b.job.options.id)==="RUNNING"&&(clearTimeout(b.timeout),clearTimeout(b.expiration),b.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),p(0)}))):this.schedule({priority:qe-1,weight:0},()=>p(1)),this._receive=function(d){return d._reject(new w.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new w.prototype.BottleneckError("stop() has already been called")),l}async _addToQueue(n){var l,p,d,h,b,C,j;({args:l,options:h}=n);try{({reachedHWM:b,blocked:p,strategy:j}=await this._store.__submit__(this.queued(),h.weight))}catch(q){return d=q,this.Events.trigger("debug",`Could not queue ${h.id}`,{args:l,options:h,error:d}),n.doDrop({error:d}),!1}return p?(n.doDrop(),!0):b&&(C=j===w.prototype.strategy.LEAK?this._queues.shiftLastFrom(h.priority):j===w.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(h.priority+1):j===w.prototype.strategy.OVERFLOW?n:void 0,C!=null&&C.doDrop(),C==null||j===w.prototype.strategy.OVERFLOW)?(C==null&&n.doDrop(),b):(n.doQueue(b,p),this._queues.push(n),await this._drainAll(),b)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new w.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var l,p,d,h,b,C,j;return typeof n[0]=="function"?(b=n,[p,...n]=b,[l]=Ar.call(n,-1),h=K.load({},this.jobDefaults)):(C=n,[h,p,...n]=C,[l]=Ar.call(n,-1),h=K.load(h,this.jobDefaults)),j=(...q)=>new this.Promise(function(de,Nt){return p(...q,function(...Fr){return(Fr[0]!=null?Nt:de)(Fr)})}),d=new xe(j,n,h,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),d.promise.then(function(q){return typeof l=="function"?l(...q):void 0}).catch(function(q){return Array.isArray(q)?typeof l=="function"?l(...q):void 0:typeof l=="function"?l(q):void 0}),this._receive(d)}schedule(...n){var l,p,d;return typeof n[0]=="function"?([d,...n]=n,p={}):[p,d,...n]=n,l=new xe(d,n,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(l),l.promise}wrap(n){var l,p;return l=this.schedule.bind(this),p=function(...d){return l(n.bind(this),...d)},p.withOptions=function(d,...h){return l(d,n,...h)},p}async updateSettings(n={}){return await this._store.__updateSettings__(K.overwrite(n,this.storeDefaults)),K.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return w.default=w,w.Events=je,w.version=w.prototype.version=qt.version,w.strategy=w.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},w.BottleneckError=w.prototype.BottleneckError=v,w.Group=w.prototype.Group=It,w.RedisConnection=w.prototype.RedisConnection=gr,w.IORedisConnection=w.prototype.IORedisConnection=hr,w.Batcher=w.prototype.Batcher=jt,w.prototype.jobDefaults={priority:kr,weight:1,expiration:null,id:"<no-id>"},w.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:w.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},w.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},w.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},w.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},w.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},w}).call(t);var Sr=yr,$t=Sr;return $t})}(De)),De.exports}var sn=tn();const St=go(sn);var on="0.0.0-development";async function Ft(e,r,t,o){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,s,i)}throw t}async function nn(e,r,t,o){const s=new St;return s.on("failed",function(i,a){const u=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(o.request.retryCount=a.retryCount+1,u>a.retryCount)return g*e.retryAfterBaseValue}),s.schedule(an.bind(null,e,r,t),o)}async function an(e,r,t,o){const s=await t(t,o);if(s.data&&s.data.errors&&s.data.errors.length>0&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new fe(s.data.errors[0].message,500,{request:o,response:s});return Ft(e,r,i,o)}return s}function Ct(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",Ft.bind(null,t,e)),e.hook.wrap("request",nn.bind(null,t,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}Ct.VERSION=on;var cn="0.0.0-development",Ze=()=>Promise.resolve();function ln(e,r,t){return e.retryLimiter.schedule(un,e,r,t)}async function un(e,r,t){const o=t.method!=="GET"&&t.method!=="HEAD",{pathname:s}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&s.startsWith("/search/"),a=s.startsWith("/graphql"),g=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(o||a)&&await e.write.key(e.id).schedule(g,Ze),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(g,Ze),i&&await e.search.key(e.id).schedule(g,Ze);const _=e.global.key(e.id).schedule(g,r,t);if(a){const f=await _;if(f.data.errors!=null&&f.data.errors.some(T=>T.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:f,data:f.data})}return _}var pn=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function dn(e){const t=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var Zr=dn(pn),Ut=Zr.test.bind(Zr),le={},gn=function(e,r){le.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),le.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),le.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),le.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function dr(e,r){const{enabled:t=!0,Bottleneck:o=St,id:s="no-id",timeout:i=1e3*60*2,connection:a}=r.throttle||{};if(!t)return{};const u={timeout:i};typeof a<"u"&&(u.connection=a),le.global==null&&gn(o,u);const g=Object.assign({clustering:a!=null,triggersNotification:Ut,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...le},r.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const _={},f=new o.Events(_);return _.on("secondary-limit",g.onSecondaryRateLimit),_.on("rate-limit",g.onRateLimit),_.on("error",T=>e.log.warn("Error in throttling-plugin limit handler",T)),g.retryLimiter.on("failed",async function(T,E){const[m,k,O]=E.args,{pathname:v}=new URL(O.url,"http://github.test");if(!(v.startsWith("/graphql")&&T.status!==401||T.status===403||T.status===429))return;const S=~~k.retryCount;k.retryCount=S,O.request.retryCount=S;const{wantRetry:U,retryAfter:G=0}=await async function(){var R;if(/\bsecondary rate\b/i.test(T.message)){const F=Number(T.response.headers["retry-after"])||m.fallbackSecondaryRateRetryAfter;return{wantRetry:await f.trigger("secondary-limit",F,O,e,S),retryAfter:F}}if(T.response.headers!=null&&T.response.headers["x-ratelimit-remaining"]==="0"||(((R=T.response.data)==null?void 0:R.errors)??[]).some(F=>F.type==="RATE_LIMITED")){const F=new Date(~~T.response.headers["x-ratelimit-reset"]*1e3).getTime(),A=Math.max(Math.ceil((F-Date.now())/1e3)+1,0);return{wantRetry:await f.trigger("rate-limit",A,O,e,S),retryAfter:A}}return{}}();if(U)return k.retryCount++,G*m.retryAfterBaseValue}),e.hook.wrap("request",ln.bind(null,g)),{}}dr.VERSION=cn;dr.triggersNotification=Ut;var hn="0.0.0-development",mn=Io.plugin(At,kt,Ko,Ct,dr).defaults({userAgent:`octokit.js/${hn}`,throttle:{onRateLimit:_n,onSecondaryRateLimit:fn}});function _n(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function fn(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}var oe,ye,ke;class En{constructor(r){I(this,"auth","");ge(this,oe);ge(this,ye,V(null));ge(this,ke,V([]));this.auth=r,Dr(this,oe,new mn({auth:r})),Je.getUser(J(this,oe)).then(t=>{var o;this.user=t,Je.getTrades(J(this,oe),(o=this.user)==null?void 0:o.login).then(s=>{this.trades=s})})}get user(){return y(J(this,ye))}set user(r){H(J(this,ye),r)}get trades(){return y(J(this,ke))}set trades(r){H(J(this,ke),r)}async set(r){var t;return this.user&&await Je.setTrades(J(this,oe),(t=this.user)==null?void 0:t.login,r)?(this.trades=r,!0):!1}}oe=new WeakMap,ye=new WeakMap,ke=new WeakMap;function Tn(e){return new En(e)}var Pe;class vn{constructor(r,t){I(this,"key","");ge(this,Pe,V());this.key=r,this.value=t,this.value=localStorage[r]?JSON.parse(localStorage[r]):t,at(()=>{this.value&&(localStorage[r]=JSON.stringify(this.value))})}get value(){return y(J(this,Pe))}set value(r){H(J(this,Pe),r)}}Pe=new WeakMap;function et(e,r){return new vn(e,r)}class rt{static combineChanges(r,t){const o=[...t];for(const s of r){const i=o.findIndex(a=>a.date===s.date);i!==-1?o[i]={...o[i],...s}:o.push({...ht(),...s})}return o.sort((s,i)=>i.date-s.date)}static getChanges(r,t){var i;const o=[],s=new Map;for(const a of t)s.set(a.date.toString(),a);for(const a of r){const u=s.get((i=a.date)==null?void 0:i.toString());if(u){const g={};for(const _ in a)a[_]!==u[_]&&(g.date=a.date,g[_]=a[_]);Object.keys(g).length>0&&o.push(g)}else o.push(a)}return o}}var bn=te('<header class="flex-row align-items-center gap-1 svelte-12lw3kz"><h1 class="flexible svelte-12lw3kz">Trading journal v5</h1> <input placeholder="Git personal access token" class="svelte-12lw3kz"> <button class="svelte-12lw3kz">Add</button> <button class="svelte-12lw3kz">Sync</button></header> <div class="containerTable overflow-auto svelte-12lw3kz"><!></div> <!>',1);function jn(e,r){Ge(r,!0);const t=et("personalAccessToken",""),o=et("trades",[]),s=ue(()=>Tn(t.value)),i=ue(()=>rt.combineChanges(o.value,y(s).trades)),a=ue(()=>o.value.length>0&&!!y(s).user);let u=V(void 0),g=V(-1),_=V(!1);const f=F=>{o.value=rt.getChanges(F,y(s).trades)},T=F=>{var A;H(g,we(y(i).indexOf(F))),(A=y(u))==null||A.show(F,D=>{const $=y(i).findIndex(x=>F.date==x.date);f(y(i).toSpliced($,1,D)),H(g,-1)})},E=()=>{o.value=[ht(),...o.value]},m=async()=>{H(_,!0),await y(s).set(y(i))&&(o.value=[]),H(_,!1)};fs(()=>{const F=A=>{if(y(g)!=-1){if(A.code=="ArrowLeft"){const D=y(i)[y(g)-1];D&&T(D)}else if(A.code=="ArrowRight"){const D=y(i)[y(g)+1];D&&T(D)}}};window.addEventListener("keydown",F)});var k=bn(),O=Ee(k),v=L(re(O),2);pt(v);var P=L(v,2);P.__click=E;var S=L(P,2);S.__click=m,Q(O);var U=L(O,2),G=re(U);Vs(G,{get trades(){return y(i)},onchange:f,ondblclick:T}),Q(U);var R=L(U,2);cr(Ms(R,{}),F=>H(u,we(F)),()=>y(u)),X(()=>S.disabled=!y(a)||y(_)),er(v,()=>t.value,F=>t.value=F),B(e,k),Oe()}ir(["click"]);export{jn as component};
