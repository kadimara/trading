var Qt=Object.defineProperty;var qr=e=>{throw TypeError(e)};var Yt=(e,r,t)=>r in e?Qt(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var q=(e,r,t)=>Yt(e,typeof r!="symbol"?r+"":r,t),jr=(e,r,t)=>r.has(e)||qr("Cannot "+t);var re=(e,r,t)=>(jr(e,r,"read from private field"),t?t.call(e):r.get(e)),ve=(e,r,t)=>r.has(e)?qr("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(e):r.set(e,t),xr=(e,r,t,o)=>(jr(e,r,"write to private field"),o?o.call(e,t):r.set(e,t),t);import{a as $,t as se,c as Ue,d as He}from"../chunks/disclose-version.D9PgiAbT.js";import{u as nt,t as tr,o as Xt,h as B,a as it,as as at,at as Zt,au as es,b as ct,p as lt,e as lr,f as he,U as rs,a7 as ts,s as We,an as ut,H as ss,r as $r,c as Ve,av as De,d as pt,n as Nr,aw as Br,ax as os,ab as ns,ay as is,T as as,a8 as cs,ak as ls,ad as us,y as ps,az as ur,aA as pr,O as ds,i as Mr,aB as dt,aC as gs,aD as hs,ai as ms,aE as fs,aF as _s,aG as Es,x as Ts,w as vs,v as gt,V as Ae,$ as dr,X as Se,m as h,k as H,Y as Q,W as le,Z as W,ar as Y,a6 as L,a5 as J,K as V}from"../chunks/runtime.BzOh1dSu.js";import{d as bs,i as ws,e as ys,f as gr,g as ks,n as Ps,j as Gs,l as ht,k as mt,r as Os,a as me}from"../chunks/store.C7meQTq2.js";import{i as Rs,b as ft,a as ue,p as fe,r as As}from"../chunks/props.D6VMdW7h.js";import{i as we}from"../chunks/if.Wm0xCyqo.js";const Ss=[];function _t(e,r=!1){return Le(e,new Map,"",Ss)}function Le(e,r,t,o,s=null){if(typeof e=="object"&&e!==null){const a=r.get(e);if(a!==void 0)return a;if(e instanceof Map)return new Map(e);if(e instanceof Set)return new Set(e);if(nt(e)){const c=[];r.set(e,c),s!==null&&r.set(s,c);for(let d=0;d<e.length;d+=1)c.push(Le(e[d],r,t,o));return c}if(tr(e)===Xt){const c={};r.set(e,c),s!==null&&r.set(s,c);for(var i in e)c[i]=Le(e[i],r,t,o);return c}if(e instanceof Date)return structuredClone(e);if(typeof e.toJSON=="function")return Le(e.toJSON(),r,t,o,e)}if(e instanceof EventTarget)return e;try{return structuredClone(e)}catch{return e}}function Fs(e,r,t){B&&it();var o=e,s=rs,i,a=at()?Zt:es;ct(()=>{a(s,s=r())&&(i&&lt(i),i=lr(()=>t(o)))}),B&&(o=he)}function Et(e,r){return r}function Cs(e,r,t,o){for(var s=[],i=r.length,a=0;a<i;a++)os(r[a].e,s,!0);var c=i>0&&s.length===0&&t!==null;if(c){var d=t.parentNode;ns(d),d.append(t),o.clear(),ne(e,r[0].prev,r[i-1].next)}is(s,()=>{for(var m=0;m<i;m++){var _=r[m];c||(o.delete(_.k),ne(e,_.prev,_.next)),as(_.e,!c)}})}function sr(e,r,t,o,s,i=null){var a=e,c={flags:r,items:new Map,first:null},d=(r&dt)!==0;if(d){var m=e;a=B?We(cs(m)):m.appendChild(ts())}B&&it();var _=null,P=!1;ct(()=>{var v=t(),T=nt(v)?v:v==null?[]:ut(v),G=T.length;if(P&&G===0)return;P=G===0;let w=!1;if(B){var f=a.data===ss;f!==(G===0)&&(a=$r(),We(a),Ve(!1),w=!0)}if(B){for(var b=null,A,S=0;S<G;S++){if(he.nodeType===8&&he.data===ls){a=he,w=!0,Ve(!1);break}var y=T[S],R=o(y,S);A=Tt(he,c,b,null,y,R,S,s,r),c.items.set(R,A),b=A}G>0&&We($r())}if(!B){var F=us;Us(T,c,a,s,r,(F.f&De)!==0,o)}i!==null&&(G===0?_?pt(_):_=lr(()=>i(a)):_!==null&&lt(_,()=>{_=null})),w&&Ve(!0),t()}),B&&(a=he)}function Us(e,r,t,o,s,i,a){var M,ie,te,K;var c=(s&gs)!==0,d=(s&(ur|pr))!==0,m=e.length,_=r.items,P=r.first,v=P,T,G=null,w,f=[],b=[],A,S,y,R;if(c)for(R=0;R<m;R+=1)A=e[R],S=a(A,R),y=_.get(S),y!==void 0&&((M=y.a)==null||M.measure(),(w??(w=new Set)).add(y));for(R=0;R<m;R+=1){if(A=e[R],S=a(A,R),y=_.get(S),y===void 0){var F=v?v.e.nodes_start:t;G=Tt(F,r,G,G===null?r.first:G.next,A,S,R,o,s),_.set(S,G),f=[],b=[],v=G.next;continue}if(d&&Ds(y,A,R,s),y.e.f&De&&(pt(y.e),c&&((ie=y.a)==null||ie.unfix(),(w??(w=new Set)).delete(y))),y!==v){if(T!==void 0&&T.has(y)){if(f.length<b.length){var I=b[0],D;G=I.prev;var z=f[0],U=f[f.length-1];for(D=0;D<f.length;D+=1)Hr(f[D],I,t);for(D=0;D<b.length;D+=1)T.delete(b[D]);ne(r,z.prev,U.next),ne(r,G,z),ne(r,U,I),v=I,G=U,R-=1,f=[],b=[]}else T.delete(y),Hr(y,v,t),ne(r,y.prev,y.next),ne(r,y,G===null?r.first:G.next),ne(r,G,y),G=y;continue}for(f=[],b=[];v!==null&&v.k!==S;)(i||!(v.e.f&De))&&(T??(T=new Set)).add(v),b.push(v),v=v.next;if(v===null)continue;y=v}f.push(y),G=y,v=y.next}if(v!==null||T!==void 0){for(var X=T===void 0?[]:ut(T);v!==null;)(i||!(v.e.f&De))&&X.push(v),v=v.next;var oe=X.length;if(oe>0){var Z=s&dt&&m===0?t:null;if(c){for(R=0;R<oe;R+=1)(te=X[R].a)==null||te.measure();for(R=0;R<oe;R+=1)(K=X[R].a)==null||K.fix()}Cs(r,X,Z,_)}}c&&ps(()=>{var ae;if(w!==void 0)for(y of w)(ae=y.a)==null||ae.apply()}),Nr.first=r.first&&r.first.e,Nr.last=G&&G.e}function Ds(e,r,t,o){o&ur&&Br(e.v,r),o&pr?Br(e.i,t):e.i=t}function Tt(e,r,t,o,s,i,a,c,d){var m=(d&ur)!==0,_=(d&hs)===0,P=m?_?ds(s):Mr(s):s,v=d&pr?Mr(a):a,T={i:v,v:P,k:i,a:null,e:null,prev:t,next:o};try{return T.e=lr(()=>c(e,P,v),B),T.e.prev=t&&t.e,T.e.next=o&&o.e,t===null?r.first=T:(t.next=T,t.e.next=T.e),o!==null&&(o.prev=T,o.e.prev=T.e),T}finally{}}function Hr(e,r,t){for(var o=e.next?e.next.e.nodes_start:t,s=r?r.e.nodes_start:t,i=e.e.nodes_start;i!==o;){var a=ms(i);s.before(i),i=a}}function ne(e,r,t){r===null?e.first=t:(r.next=t,r.e.next=t&&t.e),t!==null&&(t.prev=r,t.e.prev=r&&r.e)}function vt(e){if(B){var r=!1,t=()=>{if(!r){if(r=!0,e.hasAttribute("value")){var o=e.value;qe(e,"value",null),e.value=o}if(e.hasAttribute("checked")){var s=e.checked;qe(e,"checked",null),e.checked=s}}};e.__on_r=t,fs(t),bs()}}function qe(e,r,t,o){var s=e.__attributes??(e.__attributes={});B&&(s[r]=e.getAttribute(r),r==="src"||r==="srcset"||r==="href"&&e.nodeName==="LINK")||s[r]!==(s[r]=t)&&(r==="style"&&"__styles"in e&&(e.__styles={}),r==="loading"&&(e[_s]=t),t==null?e.removeAttribute(r):typeof t!="string"&&bt(e).includes(r)?e[r]=t:e.setAttribute(r,t))}function Ls(e,r,t,o,s=!1,i=!1,a=!1){var c=r||{},d=e.tagName==="OPTION";for(var m in r)m in t||(t[m]=null);t.class=t.class?t.class+" "+o:o;var _=bt(e),P=e.__attributes??(e.__attributes={});for(const f in t){let b=t[f];if(d&&f==="value"&&b==null){e.value=e.__value="",c[f]=b;continue}var v=c[f];if(b!==v){c[f]=b;var T=f[0]+f[1];if(T!=="$$"){if(T==="on"){const A={},S="$$"+f;let y=f.slice(2);var G=Gs(y);if(ws(y)&&(y=y.slice(0,-7),A.capture=!0),!G&&v){if(b!=null)continue;e.removeEventListener(y,c[S],A),c[S]=null}if(b!=null)if(G)e[`__${y}`]=b,gr([y]);else{let R=function(F){c[f].call(this,F)};c[S]=ys(y,e,R,A)}else G&&(e[`__${y}`]=void 0)}else if(f==="style"&&b!=null)e.style.cssText=b+"";else if(f==="autofocus")ks(e,!!b);else if(f==="__value"||f==="value"&&b!=null)e.value=e[f]=e.__value=b;else{var w=f;s||(w=Ps(w)),b==null&&!i?(P[f]=null,e.removeAttribute(f)):_.includes(w)&&(i||typeof b!="string")?e[w]=b:typeof b!="function"&&(B&&(w==="src"||w==="href"||w==="srcset")||qe(e,w,b))}f==="style"&&"__styles"in e&&(e.__styles={})}}}return c}var Wr=new Map;function bt(e){var r=Wr.get(e.nodeName);if(r)return r;Wr.set(e.nodeName,r=[]);for(var t,o=tr(e),s=Element.prototype;s!==o;){t=Es(o);for(var i in t)t[i].set&&r.push(i);o=tr(o)}return r}function Is(e,r){var t=e.__className,o=qs(r);B&&e.className===o?e.__className=o:(t!==o||B&&e.className!==o)&&(r==null?e.removeAttribute("class"):e.className=o,e.__className=o)}function qs(e){return e??""}function or(e,r,t=r){var o=at();ht(e,"input",s=>{var i=s?e.defaultValue:e.value;i=ze(e)?Ke(i):i,t(i),o&&i!==(i=r())&&(e.value=i??"")}),(B&&e.defaultValue!==e.value||Ts(r)==null&&e.value)&&t(ze(e)?Ke(e.value):e.value),vs(()=>{var s=r();ze(e)&&s===Ke(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function ze(e){var r=e.type;return r==="number"||r==="range"}function Ke(e){return e===""?null:+e}function wt(e,r,t){if(e.multiple)return $s(e,r);for(var o of e.options){var s=ke(o);if(Rs(s,r)){o.selected=!0;return}}(!t||r!==void 0)&&(e.selectedIndex=-1)}function js(e,r){gt(()=>{var t=new MutationObserver(()=>{var o=e.__value;wt(e,o)});return t.observe(e,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["value"]}),()=>{t.disconnect()}})}function xs(e,r,t=r){var o=!0;ht(e,"change",s=>{var i=s?"[selected]":":checked",a;if(e.multiple)a=[].map.call(e.querySelectorAll(i),ke);else{var c=e.querySelector(i)??e.querySelector("option:not([disabled])");a=c&&ke(c)}t(a)}),gt(()=>{var s=r();if(wt(e,s,o),o&&s===void 0){var i=e.querySelector(":checked");i!==null&&(s=ke(i),t(s))}e.__value=s,o=!1}),js(e)}function $s(e,r){for(var t of e.options)t.selected=~r.indexOf(ke(t))}function ke(e){return"__value"in e?e.__value:e.value}var Ns=se('<textarea placeholder="Describe how the trade went"></textarea> <input placeholder="https://www.tradingview.com/x/HEUPOgtN/"> <img alt="Chart" class="svelte-1tbyhhq">',1),Bs=se('<dialog class="svelte-1tbyhhq"><div class="flex-column gap-1"><!></div></dialog>');function Ms(e,r){Ae(r,!0);let t=Y(void 0),o=Y(void 0),s=Y(T=>{}),i=V(()=>h(o)==null||h(o).status=="closed"||h(o).status=="canceled"),a=Y("");dr(()=>{var f,b;const T=(f=h(o))==null?void 0:f.report.match(new RegExp("(?<=https:\\/\\/www.tradingview.com\\/x\\/)(.*)(?=\\/)","g")),G=T==null?void 0:T[0],w=(b=G==null?void 0:G[0])==null?void 0:b.toLowerCase();H(a,`https://s3.tradingview.com/snapshots/${w}/${G}.png`)});const c=()=>{var T;h(s)(h(o)),(T=h(t))==null||T.close()},d=(T,G)=>{var w;H(o,ue(T)),H(s,ue(G)),(w=h(t))==null||w.showModal()};var m=Bs(),_=Q(m),P=Q(_);{var v=T=>{var G=Ue(),w=le(G);Fs(w,()=>{var f;return(f=h(o))==null?void 0:f.date},f=>{var b=Ns(),A=le(b);Os(A);var S=L(A,2);vt(S);var y=L(S,2);J(()=>{A.disabled=h(i),S.disabled=h(i),qe(y,"src",h(a))}),or(A,()=>h(o).note,R=>h(o).note=R),or(S,()=>h(o).report,R=>h(o).report=R),$(f,b)}),$(T,G)};we(P,T=>{h(o)&&T(v)})}return W(_),W(m),ft(m,T=>H(t,T),()=>h(t)),mt("close",m,c),$(e,m),Se({show:d})}const Hs=5e-4,Ws=["created","open","closed","canceled"],Vs=["btc","eth","ada"],zs=["1min","3min","15min"];function yt(){return{status:"created",date:Date.now(),report:"",note:"",symbol:"btc",timeFrame:"3min",longShort:"long",risk:0,riskRewardRatio:"",account:0,amount:0,entry:0,takeProfit:0,stopLoss:0,pnl:0,taker:Hs,maker:0}}function Ks(e,r,t,o){if(!o||!t)return 0;const s=Math.abs(o/t-1);return kt(r/e*s,4)}function Js(e,r){return r<e?"long":"short"}function Qs(e,r,t,o){if(!r||!t||!o)return 0;const s=r-o/t*r;return kt(e=="long"?s*-1:s,2)}function Ys(e,r,t){const o=Math.abs(e-t),s=Math.abs(e-r),i=Math.min(o,s),a=Math.round(o/i*10)/10,c=Math.round(s/i*10)/10;return a+" / "+c}function kt(e,r){return parseFloat(e.toFixed(r))}class nr{static combineChanges(r,t){const o=[...t];for(const s of r){const i=o.findIndex(a=>a.date===s.date);i!==-1?o[i]={...o[i],...s}:o.push({...yt(),...s})}return o.sort((s,i)=>i.date-s.date)}static getChanges(r,t){var i;const o=[],s=new Map;for(const a of t)s.set(a.date.toString(),a);for(const a of r){const c=s.get((i=a.date)==null?void 0:i.toString());if(c){const d={};for(const m in a)a[m]!==c[m]&&(d.date=a.date,d[m]=a[m]);Object.keys(d).length>0&&o.push(d)}else o.push(a)}return o}static getTotalPnl(r){return parseFloat(r.reduce((t,o)=>t+o.pnl,0).toFixed(2))}}var Xs=se("<option> </option>"),Zs=se('<select class="svelte-1lhzzgw"></select>'),eo=se("<td><!></td>");function N(e,r){Ae(r,!0);let t=fe(r,"value",15),o=fe(r,"disabled",3,!0),s=fe(r,"options",19,()=>[]),i=fe(r,"color",3,""),a=As(r,["$$slots","$$events","$$legacy","value","type","disabled","options","color"]);const c=w=>{const f=w.currentTarget,b=document.createRange();b.selectNodeContents(f);const A=window.getSelection();A==null||A.removeAllRanges(),A==null||A.addRange(b)},d=w=>{switch(r.type){case"text":t(w.currentTarget.innerText);break;case"currency":t(Number(w.currentTarget.innerText));break;case"date":t(new Date(w.currentTarget.innerText).valueOf());break}const f=new Event("change",{bubbles:!0});w.currentTarget.dispatchEvent(f)};var m=eo(),_=w=>!o()&&w.stopPropagation();let P;var v=Q(m);{var T=w=>{var f=He();J(()=>me(f,t())),$(w,f)},G=w=>{var f=Ue(),b=le(f);{var A=y=>{var R=He();J(()=>me(R,new Date(Number(t())).toLocaleString("en-GB",{timeZone:"UTC"}))),$(y,R)},S=y=>{var R=Ue(),F=le(R);{var I=D=>{var z=Ue(),U=le(z);{var X=Z=>{var M=He();J(()=>me(M,t())),$(Z,M)},oe=Z=>{var M=Zs();sr(M,21,s,Et,(ie,te)=>{var K=Xs(),ae={},xe=Q(K,!0);W(K),J(()=>{ae!==(ae=h(te))&&(K.value=(K.__value=h(te))==null?"":h(te)),me(xe,h(te))}),$(ie,K)}),W(M),J(()=>M.disabled=o()),xs(M,t),$(Z,M)};we(U,Z=>{o()?Z(X):Z(oe,!1)})}$(D,z)};we(F,D=>{r.type=="select"&&D(I)},!0)}$(y,R)};we(b,y=>{r.type=="date"?y(A):y(S,!1)},!0)}$(w,f)};we(v,w=>{r.type=="text"||r.type=="currency"?w(T):w(G,!1)})}W(m),J(()=>P=Ls(m,P,{contenteditable:o()||r.type=="select"?!1:"plaintext-only",class:`${r.type}	${i()}`,onfocus:c,onblur:d,ondblclick:_,...a},"svelte-1lhzzgw")),$(e,m),Se()}var ro=(e,r,t)=>r()(_t(h(t))),to=se("<tr><!><!><!><!><!><!><!><!><!><!><!><!><!><!></tr>");function so(e,r){Ae(r,!0);let t=fe(r,"onchange",3,()=>{}),o=fe(r,"ondblclick",3,()=>{}),s=Y(ue(r.trade));dr(()=>{H(s,ue(r.trade))});let i=V(()=>h(s).status=="closed"||h(s).status=="canceled");const a=()=>{H(s,ue({...h(s),longShort:Js(h(s).entry,h(s).stopLoss),risk:Ks(h(s).account,h(s).amount,h(s).entry,h(s).stopLoss),riskRewardRatio:Ys(h(s).entry,h(s).takeProfit,h(s).stopLoss),pnl:Qs(h(s).longShort,h(s).amount,h(s).entry,h(s).exit)})),t()(_t(h(s)))};var c=to();c.__dblclick=[ro,o,s],c.__change=a;var d=Q(c);N(d,{type:"select",options:Ws,disabled:!1,get value(){return h(s).status},set value(U){h(s).status=U}});var m=L(d);N(m,{type:"date",get value(){return h(s).date}});var _=L(m);N(_,{type:"select",options:Vs,get disabled(){return h(i)},get value(){return h(s).symbol},set value(U){h(s).symbol=U}});var P=L(_);N(P,{type:"select",options:zs,get disabled(){return h(i)},get value(){return h(s).timeFrame},set value(U){h(s).timeFrame=U}});var v=L(P),T=V(()=>h(s).longShort=="short"?"red":"green");N(v,{type:"text",get value(){return h(s).longShort},get color(){return h(T)}});var G=L(v);N(G,{type:"currency",get disabled(){return h(i)},get value(){return h(s).account},set value(U){h(s).account=U}});var w=L(G);N(w,{type:"currency",get disabled(){return h(i)},get value(){return h(s).amount},set value(U){h(s).amount=U}});var f=L(w);N(f,{type:"currency",get disabled(){return h(i)},get value(){return h(s).entry},set value(U){h(s).entry=U}});var b=L(f);N(b,{type:"currency",get disabled(){return h(i)},get value(){return h(s).takeProfit},set value(U){h(s).takeProfit=U}});var A=L(b);N(A,{type:"currency",get disabled(){return h(i)},get value(){return h(s).stopLoss},set value(U){h(s).stopLoss=U}});var S=L(A);N(S,{type:"currency",get disabled(){return h(i)},get value(){return h(s).exit},set value(U){h(s).exit=U}});var y=L(S),R=V(()=>"%"+(h(s).risk*100).toFixed(2));N(y,{type:"text",get value(){return h(R)}});var F=L(y);N(F,{type:"text",get value(){return h(s).riskRewardRatio}});var I=L(F),D=V(()=>h(s).pnl.toFixed(2)),z=V(()=>h(s).pnl==0?"":h(s).pnl<0?"red":"green");N(I,{type:"currency",get value(){return h(D)},get color(){return h(z)}}),W(c),J(()=>Is(c,`${h(s).status??""} svelte-1x45f01`)),mt("blur",c,a),$(e,c),Se()}gr(["dblclick","change"]);var oo=se('<tr class="summary svelte-90fhec"><td colspan="13"> <span style="color: gray"> </span></td><!></tr> <!>',1),no=se("<table><thead><tr><th>STATUS</th><th>DATE</th><th>SYMBOL</th><th>TF</th><th>L / S</th><th>ACCOUNT</th><th>AMOUNT</th><th>ENTRY</th><th>TP</th><th>SL</th><th>EXIT</th><th>RISK</th><th>R/R</th><th>PNL</th></tr></thead><tbody></tbody></table>");function io(e,r){Ae(r,!0);const t=(c,d)=>{r.onchange(r.trades.toSpliced(c,1,d))},o=V(()=>{const c=new Map;return r.trades.forEach(d=>{var _;const m=new Date(d.date).toLocaleString("default",{month:"long"});c.has(m)||c.set(m,[]),(_=c.get(m))==null||_.push(d)}),c});var s=no(),i=L(Q(s));sr(i,21,()=>h(o),Et,(c,d)=>{let m=()=>h(d)[0],_=()=>h(d)[1];var P=oo();const v=V(()=>nr.getTotalPnl(_()));var T=le(P),G=Q(T),w=Q(G);J(()=>me(w,`${m().toUpperCase()??""}   `));var f=L(w),b=Q(f);W(f),W(G);var A=L(G),S=V(()=>h(v)>0?"green":"red");N(A,{colspan:14,type:"currency",get value(){return h(v)},get color(){return h(S)}}),W(T);var y=L(T,2);sr(y,19,_,R=>R.date,(R,F,I)=>{so(R,{get trade(){return h(F)},onchange:D=>t(h(I),D),get ondblclick(){return r.ondblclick}})}),J(()=>me(b,`trades: ${_().length??""}`)),$(c,P)}),W(i),W(s),$(e,s),Se()}const Je="trading",Qe="trades.json";class Ye{static async getUser(r){try{const{data:t}=await r.rest.users.getAuthenticated();return console.log("Token is valid. Authenticated as:",t.login),t}catch(t){return console.error("An error occurred:",t),null}}static async getTrades(r,t){try{const{data:o}=await r.rest.repos.getContent({mediaType:{format:"raw"},owner:t||"",repo:Je,path:Qe});return JSON.parse(o)}catch(o){return console.error("An error occurred while fetching trades:",o),[]}}static async setTrades(r,t,o){try{const{data:s}=await r.rest.repos.getContent({owner:t,repo:Je,path:Qe}),i=Array.isArray(s)?s[0]:s;if("sha"in i){const a=btoa(JSON.stringify(o));return await r.rest.repos.createOrUpdateFileContents({owner:t,repo:Je,path:Qe,message:"Trades synced",content:a,sha:i.sha}),console.log("File updated successfully!"),!0}}catch(s){console.error("An error occurred while setting trades:",s)}return!1}}function je(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function hr(e,r,t,o){if(typeof t!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce((s,i)=>hr.bind(null,e,i,s,o),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((s,i)=>i.hook.bind(null,s,o),t)():t(o))}function ao(e,r,t,o){const s=o;e.registry[t]||(e.registry[t]=[]),r==="before"&&(o=(i,a)=>Promise.resolve().then(s.bind(null,a)).then(i.bind(null,a))),r==="after"&&(o=(i,a)=>{let c;return Promise.resolve().then(i.bind(null,a)).then(d=>(c=d,s(c,a))).then(()=>c)}),r==="error"&&(o=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(c=>s(c,a))),e.registry[t].push({hook:o,orig:s})}function co(e,r,t){if(!e.registry[r])return;const o=e.registry[r].map(s=>s.orig).indexOf(t);o!==-1&&e.registry[r].splice(o,1)}const Vr=Function.bind,zr=Vr.bind(Vr);function Pt(e,r,t){const o=zr(co,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(s=>{const i=t?[r,s,t]:[r,s];e[s]=e.api[s]=zr(ao,null).apply(null,i)})}function lo(){const e=Symbol("Singular"),r={registry:{}},t=hr.bind(null,r,e);return Pt(t,r,e),t}function uo(){const e={registry:{}},r=hr.bind(null,e);return Pt(r,e),r}const po={Singular:lo,Collection:uo};var go="0.0.0-development",ho=`octokit-endpoint.js/${go} ${je()}`,mo={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":ho},mediaType:{format:""}};function fo(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function _o(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function Gt(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{_o(r[o])?o in e?t[o]=Gt(e[o],r[o]):Object.assign(t,{[o]:r[o]}):Object.assign(t,{[o]:r[o]})}),t}function Kr(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function ir(e,r,t){var s;if(typeof r=="string"){let[i,a]=r.split(" ");t=Object.assign(a?{method:i,url:a}:{url:i},t)}else t=Object.assign({},r);t.headers=fo(t.headers),Kr(t),Kr(t.headers);const o=Gt(e||{},t);return t.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function Eo(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return o.length===0?e:e+t+o.map(s=>s==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(r[s])}`).join("&")}var To=/\{[^}]+\}/g;function vo(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function bo(e){const r=e.match(To);return r?r.map(vo).reduce((t,o)=>t.concat(o),[]):[]}function Jr(e,r){const t={__proto__:null};for(const o of Object.keys(e))r.indexOf(o)===-1&&(t[o]=e[o]);return t}function Ot(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function _e(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function be(e,r,t){return r=e==="+"||e==="#"?Ot(r):_e(r),t?_e(t)+"="+r:r}function de(e){return e!=null}function Xe(e){return e===";"||e==="&"||e==="?"}function wo(e,r,t,o){var s=e[t],i=[];if(de(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(be(r,s,Xe(r)?t:""));else if(o==="*")Array.isArray(s)?s.filter(de).forEach(function(a){i.push(be(r,a,Xe(r)?t:""))}):Object.keys(s).forEach(function(a){de(s[a])&&i.push(be(r,s[a],a))});else{const a=[];Array.isArray(s)?s.filter(de).forEach(function(c){a.push(be(r,c))}):Object.keys(s).forEach(function(c){de(s[c])&&(a.push(_e(c)),a.push(be(r,s[c].toString())))}),Xe(r)?i.push(_e(t)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else r===";"?de(s)&&i.push(_e(t)):s===""&&(r==="&"||r==="?")?i.push(_e(t)+"="):s===""&&i.push("");return i}function yo(e){return{expand:ko.bind(null,e)}}function ko(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let c="";const d=[];if(t.indexOf(s.charAt(0))!==-1&&(c=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(m){var _=/([^:\*]*)(?::(\d+)|(\*))?/.exec(m);d.push(wo(r,c,_[1],_[2]||_[3]))}),c&&c!=="+"){var a=",";return c==="?"?a="&":c!=="#"&&(a=c),(d.length!==0?c:"")+d.join(a)}else return d.join(",")}else return Ot(i)}),e==="/"?e:e.replace(/\/$/,"")}function Rt(e){var _;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=Jr(e,["method","baseUrl","url","headers","request","mediaType"]);const a=bo(t);t=yo(t).expand(i),/^http/.test(t)||(t=e.baseUrl+t);const c=Object.keys(e).filter(P=>a.includes(P)).concat("baseUrl"),d=Jr(i,c);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(P=>P.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(_=e.mediaType.previews)!=null&&_.length)){const P=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=P.concat(e.mediaType.previews).map(v=>{const T=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${v}-preview${T}`}).join(",")}return["GET","HEAD"].includes(r)?t=Eo(t,d):"data"in d?s=d.data:Object.keys(d).length&&(s=d),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof s>"u"&&(s=""),Object.assign({method:r,url:t,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function Po(e,r,t){return Rt(ir(e,r,t))}function At(e,r){const t=ir(e,r),o=Po.bind(null,t);return Object.assign(o,{DEFAULTS:t,defaults:At.bind(null,t),merge:ir.bind(null,t),parse:Rt})}var Go=At(null,mo),Qr=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Oo(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var ge={},Yr;function Ro(){if(Yr)return ge;Yr=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,o=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,s={type:"",parameters:new e};Object.freeze(s.parameters),Object.freeze(s);function i(c){if(typeof c!="string")throw new TypeError("argument header is required and must be a string");let d=c.indexOf(";");const m=d!==-1?c.slice(0,d).trim():c.trim();if(o.test(m)===!1)throw new TypeError("invalid media type");const _={type:m.toLowerCase(),parameters:new e};if(d===-1)return _;let P,v,T;for(r.lastIndex=d;v=r.exec(c);){if(v.index!==d)throw new TypeError("invalid parameter format");d+=v[0].length,P=v[1].toLowerCase(),T=v[2],T[0]==='"'&&(T=T.slice(1,T.length-1),t.test(T)&&(T=T.replace(t,"$1"))),_.parameters[P]=T}if(d!==c.length)throw new TypeError("invalid parameter format");return _}function a(c){if(typeof c!="string")return s;let d=c.indexOf(";");const m=d!==-1?c.slice(0,d).trim():c.trim();if(o.test(m)===!1)return s;const _={type:m.toLowerCase(),parameters:new e};if(d===-1)return _;let P,v,T;for(r.lastIndex=d;v=r.exec(c);){if(v.index!==d)return s;d+=v[0].length,P=v[1].toLowerCase(),T=v[2],T[0]==='"'&&(T=T.slice(1,T.length-1),t.test(T)&&(T=T.replace(t,"$1"))),_.parameters[P]=T}return d!==c.length?s:_}return ge.default={parse:i,safeParse:a},ge.parse=i,ge.safeParse=a,ge.defaultContentType=s,ge}var Ao=Ro();class ye extends Error{constructor(t,o,s){super(t);q(this,"name");q(this,"status");q(this,"request");q(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const i=Object.assign({},s.request);s.request.headers.authorization&&(i.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var So="0.0.0-development",Fo={headers:{"user-agent":`octokit-request.js/${So} ${je()}`}};function Co(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function Xr(e){var P,v,T,G,w;const r=((P=e.request)==null?void 0:P.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((v=e.request)==null?void 0:v.log)||console,o=((T=e.request)==null?void 0:T.parseSuccessResponseBody)!==!1,s=Co(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([f,b])=>[f,String(b)]));let a;try{a=await r(e.url,{method:e.method,body:s,redirect:(G=e.request)==null?void 0:G.redirect,headers:i,signal:(w=e.request)==null?void 0:w.signal,...e.body&&{duplex:"half"}})}catch(f){let b="Unknown Error";if(f instanceof Error){if(f.name==="AbortError")throw f.status=500,f;b=f.message,f.name==="TypeError"&&"cause"in f&&(f.cause instanceof Error?b=f.cause.message:typeof f.cause=="string"&&(b=f.cause))}const A=new ye(b,500,{request:e});throw A.cause=f,A}const c=a.status,d=a.url,m={};for(const[f,b]of a.headers)m[f]=b;const _={url:d,status:c,headers:m,data:""};if("deprecation"in m){const f=m.link&&m.link.match(/<([^>]+)>; rel="deprecation"/),b=f&&f.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${m.sunset}${b?`. See ${b}`:""}`)}if(c===204||c===205)return _;if(e.method==="HEAD"){if(c<400)return _;throw new ye(a.statusText,c,{response:_,request:e})}if(c===304)throw _.data=await Ze(a),new ye("Not modified",c,{response:_,request:e});if(c>=400)throw _.data=await Ze(a),new ye(Uo(_.data),c,{response:_,request:e});return _.data=o?await Ze(a):a.body,_}async function Ze(e){var o;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=Ao.safeParse(r);if(t.type==="application/json"){let s="";try{return s=await e.text(),JSON.parse(s)}catch{return s}}else return t.type.startsWith("text/")||((o=t.parameters.charset)==null?void 0:o.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function Uo(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function ar(e,r){const t=e.defaults(r);return Object.assign(function(s,i){const a=t.merge(s,i);if(!a.request||!a.request.hook)return Xr(t.parse(a));const c=(d,m)=>Xr(t.parse(t.merge(d,m)));return Object.assign(c,{endpoint:t,defaults:ar.bind(null,t)}),a.request.hook(c,a)},{endpoint:t,defaults:ar.bind(null,t)})}var cr=ar(Go,Fo),Do="0.0.0-development";function Lo(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var Io=class extends Error{constructor(r,t,o){super(Lo(o));q(this,"name","GraphqlResponseError");q(this,"errors");q(this,"data");this.request=r,this.headers=t,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},qo=["method","baseUrl","url","headers","request","query","mediaType"],jo=["query","method","url"],Zr=/\/api\/v3\/?$/;function xo(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(jo.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const o=typeof r=="string"?Object.assign({query:r},t):r,s=Object.keys(o).reduce((a,c)=>qo.includes(c)?(a[c]=o[c],a):(a.variables||(a.variables={}),a.variables[c]=o[c],a),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Zr.test(i)&&(s.url=i.replace(Zr,"/api/graphql")),e(s).then(a=>{if(a.data.errors){const c={};for(const d of Object.keys(a.headers))c[d]=a.headers[d];throw new Io(s,c,a.data)}return a.data.data})}function mr(e,r){const t=e.defaults(r);return Object.assign((s,i)=>xo(t,s,i),{defaults:mr.bind(null,t),endpoint:t.endpoint})}mr(cr,{headers:{"user-agent":`octokit-graphql.js/${Do} ${je()}`},method:"POST",url:"/graphql"});function $o(e){return mr(e,{method:"POST",url:"/graphql"})}var No=/^v1\./,Bo=/^ghs_/,Mo=/^ghu_/;async function Ho(e){const r=e.split(/\./).length===3,t=No.test(e)||Bo.test(e),o=Mo.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}function Wo(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Vo(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=Wo(e),r(s)}var zo=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(Ho.bind(null,r),{hook:Vo.bind(null,r)})};const St="6.1.2",et=()=>{},Ko=console.warn.bind(console),Jo=console.error.bind(console),rt=`octokit-core.js/${St} ${je()}`;var Ce;let Qo=(Ce=class{constructor(r={}){q(this,"request");q(this,"graphql");q(this,"log");q(this,"hook");q(this,"auth");const t=new po.Collection,o={baseUrl:cr.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=r.userAgent?`${r.userAgent} ${rt}`:rt,r.baseUrl&&(o.baseUrl=r.baseUrl),r.previews&&(o.mediaType.previews=r.previews),r.timeZone&&(o.headers["time-zone"]=r.timeZone),this.request=cr.defaults(o),this.graphql=$o(this.request).defaults(o),this.log=Object.assign({debug:et,info:et,warn:Ko,error:Jo},r.log),this.hook=t,r.authStrategy){const{authStrategy:i,...a}=r,c=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",c.hook),this.auth=c}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=zo(r.auth);t.wrap("request",i.hook),this.auth=i}const s=this.constructor;for(let i=0;i<s.plugins.length;++i)Object.assign(this,s.plugins[i](this,r))}static defaults(r){return class extends this{constructor(...o){const s=o[0]||{};if(typeof r=="function"){super(r(s));return}super(Object.assign({},r,s,s.userAgent&&r.userAgent?{userAgent:`${s.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var s;const t=this.plugins;return s=class extends this{},q(s,"plugins",t.concat(r.filter(i=>!t.includes(i)))),s}},q(Ce,"VERSION",St),q(Ce,"plugins",[]),Ce);var Yo="0.0.0-development";function Xo(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof t<"u"&&(e.data.incomplete_results=t),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function fr(e,r,t){const o=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),s=typeof r=="function"?r:e.request,i=o.method,a=o.headers;let c=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!c)return{done:!0};try{const d=await s({method:i,url:c,headers:a}),m=Xo(d);return c=((m.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:m}}catch(d){if(d.status!==409)throw d;return c="",{value:{status:200,headers:{},data:[]}}}}})}}function Ft(e,r,t,o){return typeof t=="function"&&(o=t,t=void 0),Ct(e,[],fr(e,r,t)[Symbol.asyncIterator](),o)}function Ct(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let i=!1;function a(){i=!0}return r=r.concat(o?o(s.value,a):s.value.data),i?r:Ct(e,r,t,o)})}Object.assign(Ft,{iterator:fr});function Ut(e){return{paginate:Object.assign(Ft.bind(null,e),{iterator:fr.bind(null,e)})}}Ut.VERSION=Yo;var Zo=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,en=class extends Error{constructor(r,t){super(Zo(r.pathInQuery,t));q(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},rn=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);q(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},tn=e=>Object.prototype.toString.call(e)==="[object Object]";function Dt(e){const r=Lt(e,"pageInfo");if(r.length===0)throw new rn(e);return r}var Lt=(e,r,t=[])=>{for(const o of Object.keys(e)){const s=[...t,o],i=e[o];if(tn(i)){if(i.hasOwnProperty(r))return s;const a=Lt(i,r,s);if(a.length>0)return a}}return[]},Pe=(e,r)=>r.reduce((t,o)=>t[o],e),er=(e,r,t)=>{const o=r[r.length-1],s=[...r].slice(0,-1),i=Pe(e,s);typeof t=="function"?i[o]=t(i[o]):i[o]=t},sn=e=>{const r=Dt(e);return{pathInQuery:r,pageInfo:Pe(e,[...r,"pageInfo"])}},It=e=>e.hasOwnProperty("hasNextPage"),on=e=>It(e)?e.endCursor:e.startCursor,nn=e=>It(e)?e.hasNextPage:e.hasPreviousPage,qt=e=>(r,t={})=>{let o=!0,s={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(r,s),a=sn(i),c=on(a.pageInfo);if(o=nn(a.pageInfo),o&&c===s.cursor)throw new en(a,c);return s={...s,cursor:c},{done:!1,value:i}}})}},an=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=Dt(e),o=[...t,"nodes"],s=Pe(r,o);s&&er(e,o,d=>[...d,...s]);const i=[...t,"edges"],a=Pe(r,i);a&&er(e,i,d=>[...d,...a]);const c=[...t,"pageInfo"];return er(e,c,Pe(r,c)),e},cn=e=>{const r=qt(e);return async(t,o={})=>{let s={};for await(const i of r(t,o))s=an(s,i);return s}};function ln(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(cn(e),{iterator:qt(e)})})}}const un="13.2.6",pn={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var dn=pn;const pe=new Map;for(const[e,r]of Object.entries(dn))for(const[t,o]of Object.entries(r)){const[s,i,a]=o,[c,d]=s.split(/ /),m=Object.assign({method:c,url:d},i);pe.has(e)||pe.set(e,new Map),pe.get(e).set(t,{scope:e,methodName:t,endpointDefaults:m,decorations:a})}const gn={has({scope:e},r){return pe.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...pe.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},o){if(t[o])return t[o];const s=pe.get(r).get(o);if(!s)return;const{endpointDefaults:i,decorations:a}=s;return a?t[o]=mn(e,r,o,i,a):t[o]=e.request.defaults(i),t[o]}};function hn(e){const r={};for(const t of pe.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},gn);return r}function mn(e,r,t,o,s){const i=e.request.defaults(o);function a(...c){let d=i.endpoint.merge(...c);if(s.mapToData)return d=Object.assign({},d,{data:d[s.mapToData],[s.mapToData]:void 0}),i(d);if(s.renamed){const[m,_]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${m}.${_}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const m=i.endpoint.merge(...c);for(const[_,P]of Object.entries(s.renamedParameters))_ in m&&(e.log.warn(`"${_}" parameter is deprecated for "octokit.${r}.${t}()". Use "${P}" instead`),P in m||(m[P]=m[_]),delete m[_]);return i(m)}return i(...c)}return Object.assign(a,i)}function jt(e){return{rest:hn(e)}}jt.VERSION=un;var Ie={exports:{}},fn=Ie.exports,tt;function _n(){return tt||(tt=1,function(e,r){(function(t,o){e.exports=o()})(fn,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Qr<"u"?Qr:typeof self<"u"?self:{};function o(O){return O&&O.default||O}var s=function(O,l,n={}){var u,p,g;for(u in l)g=l[u],n[u]=(p=O[u])!=null?p:g;return n},i=function(O,l,n={}){var u,p;for(u in O)p=O[u],l[u]!==void 0&&(n[u]=p);return n},a={load:s,overwrite:i},c;c=class{constructor(l,n){this.incr=l,this.decr=n,this._first=null,this._last=null,this.length=0}push(l){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:l,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var l;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),l=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,l}first(){if(this._first!=null)return this._first.value}getArray(){var l,n,u;for(l=this._first,u=[];l!=null;)u.push((n=l,l=l.next,n.value));return u}forEachShift(l){var n;for(n=this.shift();n!=null;)l(n),n=this.shift()}debug(){var l,n,u,p,g;for(l=this._first,g=[];l!=null;)g.push((n=l,l=l.next,{value:n.value,prev:(u=n.prev)!=null?u.value:void 0,next:(p=n.next)!=null?p.value:void 0}));return g}};var d=c,m;m=class{constructor(l){if(this.instance=l,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,u)=>this._addListener(n,"many",u),this.instance.once=(n,u)=>this._addListener(n,"once",u),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(l,n,u){var p;return(p=this._events)[l]==null&&(p[l]=[]),this._events[l].push({cb:u,status:n}),this.instance}listenerCount(l){return this._events[l]!=null?this._events[l].length:0}async trigger(l,...n){var u,p;try{return l!=="debug"&&this.trigger("debug",`Event triggered: ${l}`,n),this._events[l]==null?void 0:(this._events[l]=this._events[l].filter(function(g){return g.status!=="none"}),p=this._events[l].map(async g=>{var E,k;if(g.status!=="none"){g.status==="once"&&(g.status="none");try{return k=typeof g.cb=="function"?g.cb(...n):void 0,typeof(k!=null?k.then:void 0)=="function"?await k:k}catch(C){return E=C,this.trigger("error",E),null}}}),(await Promise.all(p)).find(function(g){return g!=null}))}catch(g){return u=g,this.trigger("error",u),null}}};var _=m,P,v,T;P=d,v=_,T=class{constructor(l){this.Events=new v(this),this._length=0,this._lists=(function(){var n,u,p;for(p=[],n=1,u=l;1<=u?n<=u:n>=u;1<=u?++n:--n)p.push(new P(()=>this.incr(),()=>this.decr()));return p}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(l){return this._lists[l.options.priority].push(l)}queued(l){return l!=null?this._lists[l].length:this._length}shiftAll(l){return this._lists.forEach(function(n){return n.forEachShift(l)})}getFirst(l=this._lists){var n,u,p;for(n=0,u=l.length;n<u;n++)if(p=l[n],p.length>0)return p;return[]}shiftLastFrom(l){return this.getFirst(this._lists.slice(l).reverse()).shift()}};var G=T,w;w=class extends Error{};var f=w,b,A,S,y,R;y=10,A=5,R=a,b=f,S=class{constructor(l,n,u,p,g,E,k,C){this.task=l,this.args=n,this.rejectOnDrop=g,this.Events=E,this._states=k,this.Promise=C,this.options=R.load(u,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((j,x)=>{this._resolve=j,this._reject=x}),this.retryCount=0}_sanitizePriority(l){var n;return n=~~l!==l?A:l,n<0?0:n>y-1?y-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:l,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(l??new b(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(l){var n;if(n=this._states.jobStatus(this.options.id),!(n===l||l==="DONE"&&n===null))throw new b(`Invalid job status ${n}, expected ${l}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(l,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:l,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(l,n,u,p){var g,E,k;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),E={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",E);try{if(k=await(l!=null?l.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(E),await p(this.options,E),this._assertStatus("DONE"),this._resolve(k)}catch(C){return g=C,this._onFailure(g,E,n,u,p)}}doExpire(l,n,u){var p,g;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},p=new b(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,g,l,n,u)}async _onFailure(l,n,u,p,g){var E,k;if(u())return E=await this.Events.trigger("failed",l,n),E!=null?(k=~~E,this.Events.trigger("retry",`Retrying ${this.options.id} after ${k} ms`,n),this.retryCount++,p(k)):(this.doDone(n),await g(this.options,n),this._assertStatus("DONE"),this._reject(l))}doDone(l){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",l)}};var F=S,I,D,z;z=a,I=f,D=class{constructor(l,n,u){this.instance=l,this.storeOptions=n,this.clientId=this.instance._randomIndex(),z.load(u,u,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var l;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(l=this.heartbeat=setInterval(()=>{var n,u,p,g,E;if(g=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&g>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=g,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&g>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:p,reservoir:E}=this.storeOptions,this._lastReservoirIncrease=g,u=p!=null?Math.min(n,p-E):n,u>0))return this.storeOptions.reservoir+=u,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?l.unref():void 0:clearInterval(this.heartbeat)}async __publish__(l){return await this.yieldLoop(),this.instance.Events.trigger("message",l.toString())}async __disconnect__(l){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(l=0){return new this.Promise(function(n,u){return setTimeout(n,l)})}computePenalty(){var l;return(l=this.storeOptions.penalty)!=null?l:15*this.storeOptions.minTime||5e3}async __updateSettings__(l){return await this.yieldLoop(),z.overwrite(l,l,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(l){return await this.yieldLoop(),this._nextRequest+this.timeout<l}computeCapacity(){var l,n;return{maxConcurrent:l,reservoir:n}=this.storeOptions,l!=null&&n!=null?Math.min(l-this._running,n):l!=null?l-this._running:n??null}conditionsCheck(l){var n;return n=this.computeCapacity(),n==null||l<=n}async __incrementReservoir__(l){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(l){return this._unblockTime>=l}check(l,n){return this.conditionsCheck(l)&&this._nextRequest-n<=0}async __check__(l){var n;return await this.yieldLoop(),n=Date.now(),this.check(l,n)}async __register__(l,n,u){var p,g;return await this.yieldLoop(),p=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),g=Math.max(this._nextRequest-p,0),this._nextRequest=p+g+this.storeOptions.minTime,{success:!0,wait:g,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(l,n){var u,p,g;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new I(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),g=this.storeOptions.highWater!=null&&l===this.storeOptions.highWater&&!this.check(n,p),u=this.strategyIsBlock()&&(g||this.isBlocked(p)),u&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:g,blocked:u,strategy:this.storeOptions.strategy}}async __free__(l,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var U=D,X,oe;X=f,oe=class{constructor(l){this.status=l,this._jobs={},this.counts=this.status.map(function(){return 0})}next(l){var n,u;if(n=this._jobs[l],u=n+1,n!=null&&u<this.status.length)return this.counts[n]--,this.counts[u]++,this._jobs[l]++;if(n!=null)return this.counts[n]--,delete this._jobs[l]}start(l){var n;return n=0,this._jobs[l]=n,this.counts[n]++}remove(l){var n;return n=this._jobs[l],n!=null&&(this.counts[n]--,delete this._jobs[l]),n!=null}jobStatus(l){var n;return(n=this.status[this._jobs[l]])!=null?n:null}statusJobs(l){var n,u,p,g,E;if(l!=null){if(u=this.status.indexOf(l),u<0)throw new X(`status must be one of ${this.status.join(", ")}`);p=this._jobs,g=[];for(n in p)E=p[n],E===u&&g.push(n);return g}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((l,n,u)=>(l[this.status[u]]=n,l),{})}};var Z=oe,M,ie;M=d,ie=class{constructor(l,n){this.schedule=this.schedule.bind(this),this.name=l,this.Promise=n,this._running=0,this._queue=new M}isEmpty(){return this._queue.length===0}async _tryToRun(){var l,n,u,p,g,E,k;if(this._running<1&&this._queue.length>0)return this._running++,{task:k,args:l,resolve:g,reject:p}=this._queue.shift(),n=await async function(){try{return E=await k(...l),function(){return g(E)}}catch(C){return u=C,function(){return p(u)}}}(),this._running--,this._tryToRun(),n()}schedule(l,...n){var u,p,g;return g=p=null,u=new this.Promise(function(E,k){return g=E,p=k}),this._queue.push({task:l,args:n,resolve:g,reject:p}),this._tryToRun(),u}};var te=ie,K="2.19.5",ae={version:K},xe=Object.freeze({version:K,default:ae}),Er=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Tr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Mt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),vr,br,wr,yr,kr,Fe;Fe=a,vr=_,yr=Er,wr=Tr,kr=Mt,br=(function(){class O{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,Fe.load(this.limiterOptions,this.defaults,this),this.Events=new vr(this),this.instances={},this.Bottleneck=Lr,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new yr(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new wr(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var u;return(u=this.instances[n])!=null?u:(()=>{var p;return p=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,n),p})()}async deleteKey(n=""){var u,p;return p=this.instances[n],this.connection&&(u=await this.connection.__runCommand__(["del",...kr.allKeys(`${this.id}-${n}`)])),p!=null&&(delete this.instances[n],await p.disconnect()),p!=null||u>0}limiters(){var n,u,p,g;u=this.instances,p=[];for(n in u)g=u[n],p.push({key:n,limiter:g});return p}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,u,p,g,E,k,C,j,x;if(this.connection==null)return this.Promise.resolve(this.keys());for(k=[],n=null,x=`b_${this.id}-`.length,u=9;n!==0;)for([j,p]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~j,g=0,C=p.length;g<C;g++)E=p[g],k.push(E.slice(x,-u));return k}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var u,p,g,E,k,C;k=Date.now(),g=this.instances,E=[];for(p in g){C=g[p];try{await C._store.__groupCheck__(k)?E.push(this.deleteKey(p)):E.push(void 0)}catch(j){u=j,E.push(C.Events.trigger("error",u))}}return E},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(Fe.overwrite(n,this.defaults,this),Fe.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var u;if(!this.sharedConnection)return(u=this.connection)!=null?u.disconnect(n):void 0}}return O.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},O}).call(t);var Ht=br,Pr,Gr,Or;Or=a,Gr=_,Pr=(function(){class O{constructor(n={}){this.options=n,Or.load(this.options,this.defaults,this),this.Events=new Gr(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,u)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var u;return this._arr.push(n),u=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),u}}return O.prototype.defaults={maxTime:null,maxSize:null,Promise},O}).call(t);var Wt=Pr,Vt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),zt=o(xe),Rr,Ar,$e,Ne,Sr,Be,Fr,Cr,Ur,Me,ee,Dr=[].splice;Be=10,Ar=5,ee=a,Fr=G,Ne=F,Sr=U,Cr=Vt,$e=_,Ur=Z,Me=te,Rr=(function(){class O{constructor(n={},...u){var p,g;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,u),ee.load(n,this.instanceDefaults,this),this._queues=new Fr(Be),this._scheduled={},this._states=new Ur(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new $e(this),this._submitLock=new Me("submit",this.Promise),this._registerLock=new Me("register",this.Promise),g=ee.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=ee.load(n,this.redisStoreDefaults,{}),new Cr(this,g,p);if(this.datastore==="local")return p=ee.load(n,this.localStoreDefaults,{}),new Sr(this,g,p);throw new O.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var E;return(E=this._store.heartbeat)!=null&&typeof E.ref=="function"?E.ref():void 0}),this._queues.on("zero",()=>{var E;return(E=this._store.heartbeat)!=null&&typeof E.unref=="function"?E.unref():void 0})}_validateOptions(n,u){if(!(n!=null&&typeof n=="object"&&u.length===0))throw new O.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,u,p,g){var E,k;try{if({running:k}=await this._store.__free__(n,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,g),k===0&&this.empty())return this.Events.trigger("idle")}catch(C){return E=C,this.Events.trigger("error",E)}}_run(n,u,p){var g,E,k;return u.doRun(),g=this._clearGlobalState.bind(this,n),k=this._run.bind(this,n,u),E=this._free.bind(this,n,u),this._scheduled[n]={timeout:setTimeout(()=>u.doExecute(this._limiter,g,k,E),p),expiration:u.options.expiration!=null?setTimeout(function(){return u.doExpire(g,k,E)},p+u.options.expiration):void 0,job:u}}_drainOne(n){return this._registerLock.schedule(()=>{var u,p,g,E,k;return this.queued()===0?this.Promise.resolve(null):(k=this._queues.getFirst(),{options:E,args:u}=g=k.first(),n!=null&&E.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${E.id}`,{args:u,options:E}),p=this._randomIndex(),this._store.__register__(p,E.weight,E.expiration).then(({success:C,wait:j,reservoir:x})=>{var Te;return this.Events.trigger("debug",`Drained ${E.id}`,{success:C,args:u,options:E}),C?(k.shift(),Te=this.empty(),Te&&this.Events.trigger("empty"),x===0&&this.Events.trigger("depleted",Te),this._run(p,g,j),this.Promise.resolve(E.weight)):this.Promise.resolve(null)})))})}_drainAll(n,u=0){return this._drainOne(n).then(p=>{var g;return p!=null?(g=n!=null?n-p:n,this._drainAll(g,u+p)):this.Promise.resolve(u)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(n){return this._queues.shiftAll(function(u){return u.doDrop({message:n})})}stop(n={}){var u,p;return n=ee.load(n,this.stopDefaults),p=g=>{var E;return E=()=>{var k;return k=this._states.counts,k[0]+k[1]+k[2]+k[3]===g},new this.Promise((k,C)=>E()?k():this.on("done",()=>{if(E())return this.removeAllListeners("done"),k()}))},u=n.dropWaitingJobs?(this._run=function(g,E){return E.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var g,E,k;E=this._scheduled;for(g in E)k=E[g],this.jobStatus(k.job.options.id)==="RUNNING"&&(clearTimeout(k.timeout),clearTimeout(k.expiration),k.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),p(0)}))):this.schedule({priority:Be-1,weight:0},()=>p(1)),this._receive=function(g){return g._reject(new O.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new O.prototype.BottleneckError("stop() has already been called")),u}async _addToQueue(n){var u,p,g,E,k,C,j;({args:u,options:E}=n);try{({reachedHWM:k,blocked:p,strategy:j}=await this._store.__submit__(this.queued(),E.weight))}catch(x){return g=x,this.Events.trigger("debug",`Could not queue ${E.id}`,{args:u,options:E,error:g}),n.doDrop({error:g}),!1}return p?(n.doDrop(),!0):k&&(C=j===O.prototype.strategy.LEAK?this._queues.shiftLastFrom(E.priority):j===O.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(E.priority+1):j===O.prototype.strategy.OVERFLOW?n:void 0,C!=null&&C.doDrop(),C==null||j===O.prototype.strategy.OVERFLOW)?(C==null&&n.doDrop(),k):(n.doQueue(k,p),this._queues.push(n),await this._drainAll(),k)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new O.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var u,p,g,E,k,C,j;return typeof n[0]=="function"?(k=n,[p,...n]=k,[u]=Dr.call(n,-1),E=ee.load({},this.jobDefaults)):(C=n,[E,p,...n]=C,[u]=Dr.call(n,-1),E=ee.load(E,this.jobDefaults)),j=(...x)=>new this.Promise(function(Te,Jt){return p(...x,function(...Ir){return(Ir[0]!=null?Jt:Te)(Ir)})}),g=new Ne(j,n,E,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),g.promise.then(function(x){return typeof u=="function"?u(...x):void 0}).catch(function(x){return Array.isArray(x)?typeof u=="function"?u(...x):void 0:typeof u=="function"?u(x):void 0}),this._receive(g)}schedule(...n){var u,p,g;return typeof n[0]=="function"?([g,...n]=n,p={}):[p,g,...n]=n,u=new Ne(g,n,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(u),u.promise}wrap(n){var u,p;return u=this.schedule.bind(this),p=function(...g){return u(n.bind(this),...g)},p.withOptions=function(g,...E){return u(g,n,...E)},p}async updateSettings(n={}){return await this._store.__updateSettings__(ee.overwrite(n,this.storeDefaults)),ee.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return O.default=O,O.Events=$e,O.version=O.prototype.version=zt.version,O.strategy=O.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},O.BottleneckError=O.prototype.BottleneckError=f,O.Group=O.prototype.Group=Ht,O.RedisConnection=O.prototype.RedisConnection=Er,O.IORedisConnection=O.prototype.IORedisConnection=Tr,O.Batcher=O.prototype.Batcher=Wt,O.prototype.jobDefaults={priority:Ar,weight:1,expiration:null,id:"<no-id>"},O.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:O.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},O.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},O.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},O.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},O.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},O}).call(t);var Lr=Rr,Kt=Lr;return Kt})}(Ie)),Ie.exports}var En=_n();const xt=Oo(En);var Tn="0.0.0-development";async function $t(e,r,t,o){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,s,i)}throw t}async function vn(e,r,t,o){const s=new xt;return s.on("failed",function(i,a){const c=~~i.request.request.retries,d=~~i.request.request.retryAfter;if(o.request.retryCount=a.retryCount+1,c>a.retryCount)return d*e.retryAfterBaseValue}),s.schedule(bn.bind(null,e,r,t),o)}async function bn(e,r,t,o){const s=await t(t,o);if(s.data&&s.data.errors&&s.data.errors.length>0&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new ye(s.data.errors[0].message,500,{request:o,response:s});return $t(e,r,i,o)}return s}function Nt(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",$t.bind(null,t,e)),e.hook.wrap("request",vn.bind(null,t,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}Nt.VERSION=Tn;var wn="0.0.0-development",rr=()=>Promise.resolve();function yn(e,r,t){return e.retryLimiter.schedule(kn,e,r,t)}async function kn(e,r,t){const o=t.method!=="GET"&&t.method!=="HEAD",{pathname:s}=new URL(t.url,"http://github.test"),i=t.method==="GET"&&s.startsWith("/search/"),a=s.startsWith("/graphql"),d=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(d.expiration=1e3*60),(o||a)&&await e.write.key(e.id).schedule(d,rr),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(d,rr),i&&await e.search.key(e.id).schedule(d,rr);const m=e.global.key(e.id).schedule(d,r,t);if(a){const _=await m;if(_.data.errors!=null&&_.data.errors.some(P=>P.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:_,data:_.data})}return m}var Pn=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Gn(e){const t=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var st=Gn(Pn),Bt=st.test.bind(st),Ee={},On=function(e,r){Ee.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),Ee.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),Ee.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),Ee.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function _r(e,r){const{enabled:t=!0,Bottleneck:o=xt,id:s="no-id",timeout:i=1e3*60*2,connection:a}=r.throttle||{};if(!t)return{};const c={timeout:i};typeof a<"u"&&(c.connection=a),Ee.global==null&&On(o,c);const d=Object.assign({clustering:a!=null,triggersNotification:Bt,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...Ee},r.throttle);if(typeof d.onSecondaryRateLimit!="function"||typeof d.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const m={},_=new o.Events(m);return m.on("secondary-limit",d.onSecondaryRateLimit),m.on("rate-limit",d.onRateLimit),m.on("error",P=>e.log.warn("Error in throttling-plugin limit handler",P)),d.retryLimiter.on("failed",async function(P,v){const[T,G,w]=v.args,{pathname:f}=new URL(w.url,"http://github.test");if(!(f.startsWith("/graphql")&&P.status!==401||P.status===403||P.status===429))return;const A=~~G.retryCount;G.retryCount=A,w.request.retryCount=A;const{wantRetry:S,retryAfter:y=0}=await async function(){var R;if(/\bsecondary rate\b/i.test(P.message)){const F=Number(P.response.headers["retry-after"])||T.fallbackSecondaryRateRetryAfter;return{wantRetry:await _.trigger("secondary-limit",F,w,e,A),retryAfter:F}}if(P.response.headers!=null&&P.response.headers["x-ratelimit-remaining"]==="0"||(((R=P.response.data)==null?void 0:R.errors)??[]).some(F=>F.type==="RATE_LIMITED")){const F=new Date(~~P.response.headers["x-ratelimit-reset"]*1e3).getTime(),I=Math.max(Math.ceil((F-Date.now())/1e3)+1,0);return{wantRetry:await _.trigger("rate-limit",I,w,e,A),retryAfter:I}}return{}}();if(S)return G.retryCount++,y*T.retryAfterBaseValue}),e.hook.wrap("request",yn.bind(null,d)),{}}_r.VERSION=wn;_r.triggersNotification=Bt;var Rn="0.0.0-development",An=Qo.plugin(jt,Ut,ln,Nt,_r).defaults({userAgent:`octokit.js/${Rn}`,throttle:{onRateLimit:Sn,onSecondaryRateLimit:Fn}});function Sn(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function Fn(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}var ce,Ge,Oe;class Cn{constructor(r){q(this,"auth","");ve(this,ce);ve(this,Ge,Y(null));ve(this,Oe,Y([]));this.auth=r,xr(this,ce,new An({auth:r})),Ye.getUser(re(this,ce)).then(t=>{var o;this.user=t,Ye.getTrades(re(this,ce),(o=this.user)==null?void 0:o.login).then(s=>{this.trades=s})})}get user(){return h(re(this,Ge))}set user(r){H(re(this,Ge),r)}get trades(){return h(re(this,Oe))}set trades(r){H(re(this,Oe),r)}async set(r){var t;return this.user&&await Ye.setTrades(re(this,ce),(t=this.user)==null?void 0:t.login,r)?(this.trades=r,!0):!1}}ce=new WeakMap,Ge=new WeakMap,Oe=new WeakMap;function Un(e){return new Cn(e)}var Re;class Dn{constructor(r,t){q(this,"key","");ve(this,Re,Y());this.key=r,this.value=t,this.value=localStorage[r]?JSON.parse(localStorage[r]):t,dr(()=>{this.value&&(localStorage[r]=JSON.stringify(this.value))})}get value(){return h(re(this,Re))}set value(r){H(re(this,Re),r)}}Re=new WeakMap;function ot(e,r){return new Dn(e,r)}var Ln=se('<header class="flex-row align-items-center gap-1 svelte-wxr5oq"><h1 class="flexible">Trading journal v5</h1> <input placeholder="Git personal access token"> <button>Add</button> <button>Sync</button></header> <div class="containerTable overflow-auto svelte-wxr5oq"><!></div> <!>',1);function Yn(e,r){Ae(r,!0);const t=ot("personalAccessToken",""),o=ot("trades",[]),s=V(()=>Un(t.value)),i=V(()=>nr.combineChanges(o.value,h(s).trades)),a=V(()=>o.value.length>0&&!!h(s).user);let c=Y(void 0),d=Y(-1),m=Y(!1);const _=F=>{o.value=nr.getChanges(F,h(s).trades)},P=F=>{var I;H(d,ue(h(i).findIndex(D=>F.date==D.date))),(I=h(c))==null||I.show(F,D=>{_(h(i).toSpliced(h(d),1,D)),H(d,-1)})},v=()=>{o.value=[yt(),...o.value]},T=async()=>{H(m,!0),await h(s).set(h(i))&&(o.value=[]),H(m,!1)};var G=Ln(),w=le(G),f=L(Q(w),2);vt(f);var b=L(f,2);b.__click=v;var A=L(b,2);A.__click=T,W(w);var S=L(w,2),y=Q(S);io(y,{get trades(){return h(i)},onchange:_,ondblclick:P}),W(S);var R=L(S,2);ft(Ms(R,{}),F=>H(c,ue(F)),()=>h(c)),J(()=>A.disabled=!h(a)||h(m)),or(f,()=>t.value,F=>t.value=F),$(e,G),Se()}gr(["click"]);export{Yn as component};
